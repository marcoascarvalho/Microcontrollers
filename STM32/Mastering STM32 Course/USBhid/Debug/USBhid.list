
USBhid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008034  08008034  00018034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d4  080080d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080080d4  080080d4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080d4  080080d4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d4  080080d4  000180d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080080dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  200001e4  080082c0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  080082c0  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdb1  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b86  00000000  00000000  0002d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000849  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a94  00000000  00000000  00030f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7c5  00000000  00000000  0004a9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000896b1  00000000  00000000  0005a17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ba4  00000000  00000000  000e382c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e63d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800801c 	.word	0x0800801c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800801c 	.word	0x0800801c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa40 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f854 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ee 	bl	8000338 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f8ae 	bl	80002bc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f007 fb04 	bl	800776c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SendBuffer[0] =  KEY_REPORT_ID;
 8000164:	4b20      	ldr	r3, [pc, #128]	; (80001e8 <main+0x9c>)
 8000166:	2205      	movs	r2, #5
 8000168:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(BTN_K0_GPIO_Port, BTN_K0_Pin) == 0)
 800016a:	2104      	movs	r1, #4
 800016c:	481f      	ldr	r0, [pc, #124]	; (80001ec <main+0xa0>)
 800016e:	f001 f9a1 	bl	80014b4 <HAL_GPIO_ReadPin>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d103      	bne.n	8000180 <main+0x34>
	  {
		  SendBuffer[1] = 0x01;
 8000178:	4b1b      	ldr	r3, [pc, #108]	; (80001e8 <main+0x9c>)
 800017a:	2201      	movs	r2, #1
 800017c:	705a      	strb	r2, [r3, #1]
 800017e:	e002      	b.n	8000186 <main+0x3a>
	  }
	  else
	  {
		  SendBuffer[1] = 0x00;
 8000180:	4b19      	ldr	r3, [pc, #100]	; (80001e8 <main+0x9c>)
 8000182:	2200      	movs	r2, #0
 8000184:	705a      	strb	r2, [r3, #1]
	  }
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, SendBuffer, 2);
 8000186:	2202      	movs	r2, #2
 8000188:	4917      	ldr	r1, [pc, #92]	; (80001e8 <main+0x9c>)
 800018a:	4819      	ldr	r0, [pc, #100]	; (80001f0 <main+0xa4>)
 800018c:	f006 f98a 	bl	80064a4 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8000190:	2064      	movs	r0, #100	; 0x64
 8000192:	f000 fa81 	bl	8000698 <HAL_Delay>

	  SendBuffer[0] = ADC_REPORT_ID;
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <main+0x9c>)
 8000198:	2207      	movs	r2, #7
 800019a:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1); // Start ADC Peripheral
 800019c:	4815      	ldr	r0, [pc, #84]	; (80001f4 <main+0xa8>)
 800019e:	f000 fb77 	bl	8000890 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80001a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001a6:	4813      	ldr	r0, [pc, #76]	; (80001f4 <main+0xa8>)
 80001a8:	f000 fc4c 	bl	8000a44 <HAL_ADC_PollForConversion>
	  analog_Pot = HAL_ADC_GetValue(&hadc1);
 80001ac:	4811      	ldr	r0, [pc, #68]	; (80001f4 <main+0xa8>)
 80001ae:	f000 fd4f 	bl	8000c50 <HAL_ADC_GetValue>
 80001b2:	4603      	mov	r3, r0
 80001b4:	b29a      	uxth	r2, r3
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <main+0xac>)
 80001b8:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80001ba:	480e      	ldr	r0, [pc, #56]	; (80001f4 <main+0xa8>)
 80001bc:	f000 fc16 	bl	80009ec <HAL_ADC_Stop>
	  SendBuffer[1] = (uint8_t)(analog_Pot/20);
 80001c0:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <main+0xac>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <main+0xb0>)
 80001c6:	fba2 2303 	umull	r2, r3, r2, r3
 80001ca:	091b      	lsrs	r3, r3, #4
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <main+0x9c>)
 80001d2:	705a      	strb	r2, [r3, #1]
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, SendBuffer, 2);
 80001d4:	2202      	movs	r2, #2
 80001d6:	4904      	ldr	r1, [pc, #16]	; (80001e8 <main+0x9c>)
 80001d8:	4805      	ldr	r0, [pc, #20]	; (80001f0 <main+0xa4>)
 80001da:	f006 f963 	bl	80064a4 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 fa5a 	bl	8000698 <HAL_Delay>
	  SendBuffer[0] =  KEY_REPORT_ID;
 80001e4:	e7be      	b.n	8000164 <main+0x18>
 80001e6:	bf00      	nop
 80001e8:	20000234 	.word	0x20000234
 80001ec:	40010800 	.word	0x40010800
 80001f0:	20000240 	.word	0x20000240
 80001f4:	20000200 	.word	0x20000200
 80001f8:	20000230 	.word	0x20000230
 80001fc:	cccccccd 	.word	0xcccccccd

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b094      	sub	sp, #80	; 0x50
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f007 fed8 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800024c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	4618      	mov	r0, r3
 8000258:	f002 feb2 	bl	8002fc0 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000262:	f000 f8e5 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000276:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f003 f91e 	bl	80034c4 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800028e:	f000 f8cf 	bl	8000430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000292:	2312      	movs	r3, #18
 8000294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800029a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800029c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 fa87 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b0:	f000 f8be 	bl	8000430 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	; 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_ADC1_Init+0x74>)
 80002ce:	4a19      	ldr	r2, [pc, #100]	; (8000334 <MX_ADC1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d2:	4b17      	ldr	r3, [pc, #92]	; (8000330 <MX_ADC1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <MX_ADC1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <MX_ADC1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_ADC1_Init+0x74>)
 80002e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_ADC1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_ADC1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <MX_ADC1_Init+0x74>)
 80002fa:	f000 f9f1 	bl	80006e0 <HAL_ADC_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 f894 	bl	8000430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000308:	2301      	movs	r3, #1
 800030a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800030c:	2301      	movs	r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000310:	2305      	movs	r3, #5
 8000312:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_ADC1_Init+0x74>)
 800031a:	f000 fca5 	bl	8000c68 <HAL_ADC_ConfigChannel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000324:	f000 f884 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000200 	.word	0x20000200
 8000334:	40012400 	.word	0x40012400

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b34      	ldr	r3, [pc, #208]	; (8000420 <MX_GPIO_Init+0xe8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a33      	ldr	r2, [pc, #204]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <MX_GPIO_Init+0xe8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a2d      	ldr	r2, [pc, #180]	; (8000420 <MX_GPIO_Init+0xe8>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_GPIO_Init+0xe8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a27      	ldr	r2, [pc, #156]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_GPIO_Init+0xe8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_GPIO_Init+0xe8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a21      	ldr	r2, [pc, #132]	; (8000420 <MX_GPIO_Init+0xe8>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_GPIO_Init+0xe8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0308 	and.w	r3, r3, #8
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	481c      	ldr	r0, [pc, #112]	; (8000424 <MX_GPIO_Init+0xec>)
 80003b4:	f001 f895 	bl	80014e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003be:	481a      	ldr	r0, [pc, #104]	; (8000428 <MX_GPIO_Init+0xf0>)
 80003c0:	f001 f88f 	bl	80014e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4811      	ldr	r0, [pc, #68]	; (8000424 <MX_GPIO_Init+0xec>)
 80003de:	f000 fee5 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_K0_Pin */
  GPIO_InitStruct.Pin = BTN_K0_Pin;
 80003e2:	2304      	movs	r3, #4
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_K0_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <MX_GPIO_Init+0xf4>)
 80003f6:	f000 fed9 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D1_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin;
 80003fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D1_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_GPIO_Init+0xf0>)
 8000414:	f000 feca 	bl	80011ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000418:	bf00      	nop
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40021000 	.word	0x40021000
 8000424:	40011000 	.word	0x40011000
 8000428:	40010c00 	.word	0x40010c00
 800042c:	40010800 	.word	0x40010800

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <HAL_MspInit+0x5c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a14      	ldr	r2, [pc, #80]	; (8000498 <HAL_MspInit+0x5c>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_MspInit+0x5c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <HAL_MspInit+0x5c>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_MspInit+0x60>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_MspInit+0x60>)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000
 800049c:	40010000 	.word	0x40010000

080004a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_ADC_MspInit+0x6c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d121      	bne.n	8000504 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <HAL_ADC_MspInit+0x70>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a12      	ldr	r2, [pc, #72]	; (8000510 <HAL_ADC_MspInit+0x70>)
 80004c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <HAL_ADC_MspInit+0x70>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <HAL_ADC_MspInit+0x70>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <HAL_ADC_MspInit+0x70>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_ADC_MspInit+0x70>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004f0:	2302      	movs	r3, #2
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f4:	2303      	movs	r3, #3
 80004f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_ADC_MspInit+0x74>)
 8000500:	f000 fe54 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40012400 	.word	0x40012400
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f87f 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800056e:	f001 f8f5 	bl	800175c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000604 	.word	0x20000604

0800057c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000588:	f7ff fff8 	bl	800057c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800058e:	490c      	ldr	r1, [pc, #48]	; (80005c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a4:	4c09      	ldr	r4, [pc, #36]	; (80005cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b2:	f007 fd0f 	bl	8007fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff fdc9 	bl	800014c <main>
  bx lr
 80005ba:	4770      	bx	lr
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80005c4:	080080dc 	.word	0x080080dc
  ldr r2, =_sbss
 80005c8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80005cc:	20000910 	.word	0x20000910

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_Init+0x28>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_Init+0x28>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 fd9f 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f000 f808 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f7ff ff24 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40022000 	.word	0x40022000

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fdb7 	bl	8001192 <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 fd7f 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <HAL_IncTick+0x20>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000008 	.word	0x20000008
 8000680:	20000238 	.word	0x20000238

08000684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000238 	.word	0x20000238

08000698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a0:	f7ff fff0 	bl	8000684 <HAL_GetTick>
 80006a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b0:	d005      	beq.n	80006be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_Delay+0x44>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006be:	bf00      	nop
 80006c0:	f7ff ffe0 	bl	8000684 <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d8f7      	bhi.n	80006c0 <HAL_Delay+0x28>
  {
  }
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000008 	.word	0x20000008

080006e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e0be      	b.n	8000880 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070c:	2b00      	cmp	r3, #0
 800070e:	d109      	bne.n	8000724 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff febe 	bl	80004a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 fbf1 	bl	8000f0c <ADC_ConversionStop_Disable>
 800072a:	4603      	mov	r3, r0
 800072c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 8099 	bne.w	800086e <HAL_ADC_Init+0x18e>
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	2b00      	cmp	r3, #0
 8000740:	f040 8095 	bne.w	800086e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800074c:	f023 0302 	bic.w	r3, r3, #2
 8000750:	f043 0202 	orr.w	r2, r3, #2
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000760:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7b1b      	ldrb	r3, [r3, #12]
 8000766:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000768:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	4313      	orrs	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000778:	d003      	beq.n	8000782 <HAL_ADC_Init+0xa2>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d102      	bne.n	8000788 <HAL_ADC_Init+0xa8>
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	e000      	b.n	800078a <HAL_ADC_Init+0xaa>
 8000788:	2300      	movs	r3, #0
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	4313      	orrs	r3, r2
 800078e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7d1b      	ldrb	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d119      	bne.n	80007cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7b1b      	ldrb	r3, [r3, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d109      	bne.n	80007b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	035a      	lsls	r2, r3, #13
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	e00b      	b.n	80007cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b8:	f043 0220 	orr.w	r2, r3, #32
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c4:	f043 0201 	orr.w	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	430a      	orrs	r2, r1
 80007de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <HAL_ADC_Init+0x1a8>)
 80007e8:	4013      	ands	r3, r2
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007fc:	d003      	beq.n	8000806 <HAL_ADC_Init+0x126>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d104      	bne.n	8000810 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	3b01      	subs	r3, #1
 800080c:	051b      	lsls	r3, r3, #20
 800080e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	430a      	orrs	r2, r1
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_ADC_Init+0x1ac>)
 800082c:	4013      	ands	r3, r2
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	429a      	cmp	r2, r3
 8000832:	d10b      	bne.n	800084c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083e:	f023 0303 	bic.w	r3, r3, #3
 8000842:	f043 0201 	orr.w	r2, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800084a:	e018      	b.n	800087e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f023 0312 	bic.w	r3, r3, #18
 8000854:	f043 0210 	orr.w	r2, r3, #16
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	f043 0201 	orr.w	r2, r3, #1
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800086c:	e007      	b.n	800087e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000872:	f043 0210 	orr.w	r2, r3, #16
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800087e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	ffe1f7fd 	.word	0xffe1f7fd
 800088c:	ff1f0efe 	.word	0xff1f0efe

08000890 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d101      	bne.n	80008aa <HAL_ADC_Start+0x1a>
 80008a6:	2302      	movs	r3, #2
 80008a8:	e098      	b.n	80009dc <HAL_ADC_Start+0x14c>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 fad0 	bl	8000e58 <ADC_Enable>
 80008b8:	4603      	mov	r3, r0
 80008ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 8087 	bne.w	80009d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a41      	ldr	r2, [pc, #260]	; (80009e4 <HAL_ADC_Start+0x154>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d105      	bne.n	80008ee <HAL_ADC_Start+0x5e>
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <HAL_ADC_Start+0x158>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d115      	bne.n	800091a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000904:	2b00      	cmp	r3, #0
 8000906:	d026      	beq.n	8000956 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000910:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000918:	e01d      	b.n	8000956 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <HAL_ADC_Start+0x158>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d004      	beq.n	800093a <HAL_ADC_Start+0xaa>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <HAL_ADC_Start+0x154>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10d      	bne.n	8000956 <HAL_ADC_Start+0xc6>
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <HAL_ADC_Start+0x158>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800094e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	f023 0206 	bic.w	r2, r3, #6
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
 800096e:	e002      	b.n	8000976 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f06f 0202 	mvn.w	r2, #2
 8000986:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000992:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000996:	d113      	bne.n	80009c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800099c:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_ADC_Start+0x154>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d105      	bne.n	80009ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_ADC_Start+0x158>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d108      	bne.n	80009c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	e00c      	b.n	80009da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	e003      	b.n	80009da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40012800 	.word	0x40012800
 80009e8:	40012400 	.word	0x40012400

080009ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d101      	bne.n	8000a06 <HAL_ADC_Stop+0x1a>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e01a      	b.n	8000a3c <HAL_ADC_Stop+0x50>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 fa7c 	bl	8000f0c <ADC_ConversionStop_Disable>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d109      	bne.n	8000a32 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a26:	f023 0301 	bic.w	r3, r3, #1
 8000a2a:	f043 0201 	orr.w	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a5a:	f7ff fe13 	bl	8000684 <HAL_GetTick>
 8000a5e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00b      	beq.n	8000a86 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f043 0220 	orr.w	r2, r3, #32
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e0d3      	b.n	8000c2e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d131      	bne.n	8000af8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d12a      	bne.n	8000af8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aa2:	e021      	b.n	8000ae8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aaa:	d01d      	beq.n	8000ae8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d007      	beq.n	8000ac2 <HAL_ADC_PollForConversion+0x7e>
 8000ab2:	f7ff fde7 	bl	8000684 <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d212      	bcs.n	8000ae8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10b      	bne.n	8000ae8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	f043 0204 	orr.w	r2, r3, #4
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e0a2      	b.n	8000c2e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0d6      	beq.n	8000aa4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000af6:	e070      	b.n	8000bda <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000af8:	4b4f      	ldr	r3, [pc, #316]	; (8000c38 <HAL_ADC_PollForConversion+0x1f4>)
 8000afa:	681c      	ldr	r4, [r3, #0]
 8000afc:	2002      	movs	r0, #2
 8000afe:	f002 ff11 	bl	8003924 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b02:	4603      	mov	r3, r0
 8000b04:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6919      	ldr	r1, [r3, #16]
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <HAL_ADC_PollForConversion+0x1f8>)
 8000b10:	400b      	ands	r3, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d118      	bne.n	8000b48 <HAL_ADC_PollForConversion+0x104>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68d9      	ldr	r1, [r3, #12]
 8000b1c:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <HAL_ADC_PollForConversion+0x1fc>)
 8000b1e:	400b      	ands	r3, r1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d111      	bne.n	8000b48 <HAL_ADC_PollForConversion+0x104>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6919      	ldr	r1, [r3, #16]
 8000b2a:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <HAL_ADC_PollForConversion+0x200>)
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d108      	bne.n	8000b44 <HAL_ADC_PollForConversion+0x100>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68d9      	ldr	r1, [r3, #12]
 8000b38:	4b43      	ldr	r3, [pc, #268]	; (8000c48 <HAL_ADC_PollForConversion+0x204>)
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <HAL_ADC_PollForConversion+0x100>
 8000b40:	2314      	movs	r3, #20
 8000b42:	e020      	b.n	8000b86 <HAL_ADC_PollForConversion+0x142>
 8000b44:	2329      	movs	r3, #41	; 0x29
 8000b46:	e01e      	b.n	8000b86 <HAL_ADC_PollForConversion+0x142>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6919      	ldr	r1, [r3, #16]
 8000b4e:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <HAL_ADC_PollForConversion+0x200>)
 8000b50:	400b      	ands	r3, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d106      	bne.n	8000b64 <HAL_ADC_PollForConversion+0x120>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68d9      	ldr	r1, [r3, #12]
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <HAL_ADC_PollForConversion+0x204>)
 8000b5e:	400b      	ands	r3, r1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00d      	beq.n	8000b80 <HAL_ADC_PollForConversion+0x13c>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6919      	ldr	r1, [r3, #16]
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_ADC_PollForConversion+0x208>)
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d108      	bne.n	8000b84 <HAL_ADC_PollForConversion+0x140>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68d9      	ldr	r1, [r3, #12]
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <HAL_ADC_PollForConversion+0x208>)
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <HAL_ADC_PollForConversion+0x140>
 8000b80:	2354      	movs	r3, #84	; 0x54
 8000b82:	e000      	b.n	8000b86 <HAL_ADC_PollForConversion+0x142>
 8000b84:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b86:	fb02 f303 	mul.w	r3, r2, r3
 8000b8a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b8c:	e021      	b.n	8000bd2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b94:	d01a      	beq.n	8000bcc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <HAL_ADC_PollForConversion+0x168>
 8000b9c:	f7ff fd72 	bl	8000684 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d20f      	bcs.n	8000bcc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d90b      	bls.n	8000bcc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb8:	f043 0204 	orr.w	r2, r3, #4
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e030      	b.n	8000c2e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d8d9      	bhi.n	8000b8e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f06f 0212 	mvn.w	r2, #18
 8000be2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bfa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bfe:	d115      	bne.n	8000c2c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d111      	bne.n	8000c2c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f043 0201 	orr.w	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	24924924 	.word	0x24924924
 8000c40:	00924924 	.word	0x00924924
 8000c44:	12492492 	.word	0x12492492
 8000c48:	00492492 	.word	0x00492492
 8000c4c:	00249249 	.word	0x00249249

08000c50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d101      	bne.n	8000c88 <HAL_ADC_ConfigChannel+0x20>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e0dc      	b.n	8000e42 <HAL_ADC_ConfigChannel+0x1da>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b06      	cmp	r3, #6
 8000c96:	d81c      	bhi.n	8000cd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3b05      	subs	r3, #5
 8000caa:	221f      	movs	r2, #31
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4019      	ands	r1, r3
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3b05      	subs	r3, #5
 8000cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd0:	e03c      	b.n	8000d4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b0c      	cmp	r3, #12
 8000cd8:	d81c      	bhi.n	8000d14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b23      	subs	r3, #35	; 0x23
 8000cec:	221f      	movs	r2, #31
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4019      	ands	r1, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	3b23      	subs	r3, #35	; 0x23
 8000d06:	fa00 f203 	lsl.w	r2, r0, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	631a      	str	r2, [r3, #48]	; 0x30
 8000d12:	e01b      	b.n	8000d4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	3b41      	subs	r3, #65	; 0x41
 8000d26:	221f      	movs	r2, #31
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	4019      	ands	r1, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3b41      	subs	r3, #65	; 0x41
 8000d40:	fa00 f203 	lsl.w	r2, r0, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b09      	cmp	r3, #9
 8000d52:	d91c      	bls.n	8000d8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68d9      	ldr	r1, [r3, #12]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	3b1e      	subs	r3, #30
 8000d66:	2207      	movs	r2, #7
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4019      	ands	r1, r3
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	6898      	ldr	r0, [r3, #8]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3b1e      	subs	r3, #30
 8000d80:	fa00 f203 	lsl.w	r2, r0, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	e019      	b.n	8000dc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6919      	ldr	r1, [r3, #16]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	2207      	movs	r2, #7
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4019      	ands	r1, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6898      	ldr	r0, [r3, #8]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b10      	cmp	r3, #16
 8000dc8:	d003      	beq.n	8000dd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dce:	2b11      	cmp	r3, #17
 8000dd0:	d132      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_ADC_ConfigChannel+0x1e4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d125      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d126      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000df8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b10      	cmp	r3, #16
 8000e00:	d11a      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	0c9a      	lsrs	r2, r3, #18
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <HAL_ADC_ConfigChannel+0x1b2>
 8000e26:	e007      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	f043 0220 	orr.w	r2, r3, #32
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40012400 	.word	0x40012400
 8000e50:	20000000 	.word	0x20000000
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d040      	beq.n	8000ef8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0201 	orr.w	r2, r2, #1
 8000e84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <ADC_Enable+0xac>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <ADC_Enable+0xb0>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	0c9b      	lsrs	r3, r3, #18
 8000e92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e94:	e002      	b.n	8000e9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f9      	bne.n	8000e96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ea2:	f7ff fbef 	bl	8000684 <HAL_GetTick>
 8000ea6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ea8:	e01f      	b.n	8000eea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000eaa:	f7ff fbeb 	bl	8000684 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d918      	bls.n	8000eea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d011      	beq.n	8000eea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f043 0210 	orr.w	r2, r3, #16
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e007      	b.n	8000efa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d1d8      	bne.n	8000eaa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000
 8000f08:	431bde83 	.word	0x431bde83

08000f0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d12e      	bne.n	8000f84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0201 	bic.w	r2, r2, #1
 8000f34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f36:	f7ff fba5 	bl	8000684 <HAL_GetTick>
 8000f3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f3c:	e01b      	b.n	8000f76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f3e:	f7ff fba1 	bl	8000684 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d914      	bls.n	8000f76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d10d      	bne.n	8000f76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	f043 0210 	orr.w	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e007      	b.n	8000f86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d0dc      	beq.n	8000f3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4906      	ldr	r1, [pc, #24]	; (8001028 <__NVIC_EnableIRQ+0x34>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff90 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff2d 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff42 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff90 	bl	8001080 <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5f 	bl	800102c <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff35 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffa2 	bl	80010e4 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b08b      	sub	sp, #44	; 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e169      	b.n	8001494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c0:	2201      	movs	r2, #1
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8158 	bne.w	800148e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a9a      	ldr	r2, [pc, #616]	; (800144c <HAL_GPIO_Init+0x2a0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d05e      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 80011e8:	4a98      	ldr	r2, [pc, #608]	; (800144c <HAL_GPIO_Init+0x2a0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d875      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 80011ee:	4a98      	ldr	r2, [pc, #608]	; (8001450 <HAL_GPIO_Init+0x2a4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d058      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 80011f4:	4a96      	ldr	r2, [pc, #600]	; (8001450 <HAL_GPIO_Init+0x2a4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d86f      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 80011fa:	4a96      	ldr	r2, [pc, #600]	; (8001454 <HAL_GPIO_Init+0x2a8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d052      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 8001200:	4a94      	ldr	r2, [pc, #592]	; (8001454 <HAL_GPIO_Init+0x2a8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d869      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001206:	4a94      	ldr	r2, [pc, #592]	; (8001458 <HAL_GPIO_Init+0x2ac>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d04c      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 800120c:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_GPIO_Init+0x2ac>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d863      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001212:	4a92      	ldr	r2, [pc, #584]	; (800145c <HAL_GPIO_Init+0x2b0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d046      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 8001218:	4a90      	ldr	r2, [pc, #576]	; (800145c <HAL_GPIO_Init+0x2b0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d85d      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d82a      	bhi.n	8001278 <HAL_GPIO_Init+0xcc>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d859      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <HAL_GPIO_Init+0x80>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	080012a7 	.word	0x080012a7
 8001230:	08001281 	.word	0x08001281
 8001234:	08001293 	.word	0x08001293
 8001238:	080012d5 	.word	0x080012d5
 800123c:	080012db 	.word	0x080012db
 8001240:	080012db 	.word	0x080012db
 8001244:	080012db 	.word	0x080012db
 8001248:	080012db 	.word	0x080012db
 800124c:	080012db 	.word	0x080012db
 8001250:	080012db 	.word	0x080012db
 8001254:	080012db 	.word	0x080012db
 8001258:	080012db 	.word	0x080012db
 800125c:	080012db 	.word	0x080012db
 8001260:	080012db 	.word	0x080012db
 8001264:	080012db 	.word	0x080012db
 8001268:	080012db 	.word	0x080012db
 800126c:	080012db 	.word	0x080012db
 8001270:	08001289 	.word	0x08001289
 8001274:	0800129d 	.word	0x0800129d
 8001278:	4a79      	ldr	r2, [pc, #484]	; (8001460 <HAL_GPIO_Init+0x2b4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127e:	e02c      	b.n	80012da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e029      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	3304      	adds	r3, #4
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e024      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	3308      	adds	r3, #8
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e01f      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	330c      	adds	r3, #12
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e01a      	b.n	80012dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ae:	2304      	movs	r3, #4
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e013      	b.n	80012dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012bc:	2308      	movs	r3, #8
 80012be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	611a      	str	r2, [r3, #16]
          break;
 80012c6:	e009      	b.n	80012dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c8:	2308      	movs	r3, #8
 80012ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	615a      	str	r2, [r3, #20]
          break;
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
          break;
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x130>
          break;
 80012da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d801      	bhi.n	80012e6 <HAL_GPIO_Init+0x13a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_Init+0x13e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d802      	bhi.n	80012f8 <HAL_GPIO_Init+0x14c>
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x152>
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3b08      	subs	r3, #8
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	210f      	movs	r1, #15
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	6a39      	ldr	r1, [r7, #32]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80b1 	beq.w	800148e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x2b8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x2b8>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_GPIO_Init+0x2b8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001344:	4a48      	ldr	r2, [pc, #288]	; (8001468 <HAL_GPIO_Init+0x2bc>)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a40      	ldr	r2, [pc, #256]	; (800146c <HAL_GPIO_Init+0x2c0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d013      	beq.n	8001398 <HAL_GPIO_Init+0x1ec>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a3f      	ldr	r2, [pc, #252]	; (8001470 <HAL_GPIO_Init+0x2c4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00d      	beq.n	8001394 <HAL_GPIO_Init+0x1e8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <HAL_GPIO_Init+0x2c8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x1e4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <HAL_GPIO_Init+0x2cc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_GPIO_Init+0x1e0>
 8001388:	2303      	movs	r3, #3
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 800138c:	2304      	movs	r3, #4
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001398:	2300      	movs	r3, #0
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013aa:	492f      	ldr	r1, [pc, #188]	; (8001468 <HAL_GPIO_Init+0x2bc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	492c      	ldr	r1, [pc, #176]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	43db      	mvns	r3, r3
 80013da:	4928      	ldr	r1, [pc, #160]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013dc:	4013      	ands	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	4922      	ldr	r1, [pc, #136]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	491e      	ldr	r1, [pc, #120]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4918      	ldr	r1, [pc, #96]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	4914      	ldr	r1, [pc, #80]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d021      	beq.n	8001480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	490e      	ldr	r1, [pc, #56]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e021      	b.n	800148e <HAL_GPIO_Init+0x2e2>
 800144a:	bf00      	nop
 800144c:	10320000 	.word	0x10320000
 8001450:	10310000 	.word	0x10310000
 8001454:	10220000 	.word	0x10220000
 8001458:	10210000 	.word	0x10210000
 800145c:	10120000 	.word	0x10120000
 8001460:	10110000 	.word	0x10110000
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	40010800 	.word	0x40010800
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40011000 	.word	0x40011000
 8001478:	40011400 	.word	0x40011400
 800147c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_GPIO_Init+0x304>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	43db      	mvns	r3, r3
 8001488:	4909      	ldr	r1, [pc, #36]	; (80014b0 <HAL_GPIO_Init+0x304>)
 800148a:	4013      	ands	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f47f ae8e 	bne.w	80011c0 <HAL_GPIO_Init+0x14>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	372c      	adds	r7, #44	; 0x2c
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f2:	787b      	ldrb	r3, [r7, #1]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014fe:	e003      	b.n	8001508 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001514:	b08b      	sub	sp, #44	; 0x2c
 8001516:	af06      	add	r7, sp, #24
 8001518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0f1      	b.n	8001708 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f006 fab5 	bl	8007aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fac6 	bl	8003adc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	687e      	ldr	r6, [r7, #4]
 8001558:	466d      	mov	r5, sp
 800155a:	f106 0410 	add.w	r4, r6, #16
 800155e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	602b      	str	r3, [r5, #0]
 8001566:	1d33      	adds	r3, r6, #4
 8001568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f002 fa90 	bl	8003a90 <USB_CoreInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0c2      	b.n	8001708 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fac1 	bl	8003b10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e040      	b.n	8001616 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3301      	adds	r3, #1
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	3303      	adds	r3, #3
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3338      	adds	r3, #56	; 0x38
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	333c      	adds	r3, #60	; 0x3c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3340      	adds	r3, #64	; 0x40
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3b9      	bcc.n	8001594 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e044      	b.n	80016b0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d3b5      	bcc.n	8001626 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	687e      	ldr	r6, [r7, #4]
 80016c2:	466d      	mov	r5, sp
 80016c4:	f106 0410 	add.w	r4, r6, #16
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	1d33      	adds	r3, r6, #4
 80016d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f002 fa27 	bl	8003b28 <USB_DevInit>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2202      	movs	r2, #2
 80016e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00d      	b.n	8001708 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fca8 	bl	8006056 <USB_DevDisconnect>

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001710 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_PCD_Start+0x16>
 8001722:	2302      	movs	r3, #2
 8001724:	e016      	b.n	8001754 <HAL_PCD_Start+0x44>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f002 f9bc 	bl	8003ab0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f006 fc0b 	bl	8007f56 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f004 fc7c 	bl	8006042 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f004 fc7e 	bl	800606a <USB_ReadInterrupts>
 800176e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fb04 	bl	8001d88 <PCD_EP_ISR_Handler>

    return;
 8001780:	e119      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179e:	b292      	uxth	r2, r2
 80017a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f006 f9fa 	bl	8007b9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017aa:	2100      	movs	r1, #0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f905 	bl	80019bc <HAL_PCD_SetAddress>

    return;
 80017b2:	e100      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00c      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017d0:	b292      	uxth	r2, r2
 80017d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017d6:	e0ee      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017f4:	b292      	uxth	r2, r2
 80017f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017fa:	e0dc      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d027      	beq.n	8001856 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0204 	bic.w	r2, r2, #4
 8001818:	b292      	uxth	r2, r2
 800181a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0208 	bic.w	r2, r2, #8
 8001830:	b292      	uxth	r2, r2
 8001832:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f006 f9ea 	bl	8007c10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001844:	b29a      	uxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800184e:	b292      	uxth	r2, r2
 8001850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001854:	e0af      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8083 	beq.w	8001968 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	77fb      	strb	r3, [r7, #31]
 8001866:	e010      	b.n	800188a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	7ffb      	ldrb	r3, [r7, #31]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	441a      	add	r2, r3
 8001874:	7ffb      	ldrb	r3, [r7, #31]
 8001876:	8812      	ldrh	r2, [r2, #0]
 8001878:	b292      	uxth	r2, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3320      	adds	r3, #32
 800187e:	443b      	add	r3, r7
 8001880:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001884:	7ffb      	ldrb	r3, [r7, #31]
 8001886:	3301      	adds	r3, #1
 8001888:	77fb      	strb	r3, [r7, #31]
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d9eb      	bls.n	8001868 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	b292      	uxth	r2, r2
 80018bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018c0:	bf00      	nop
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f6      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e6:	b292      	uxth	r2, r2
 80018e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	77fb      	strb	r3, [r7, #31]
 80018f0:	e00f      	b.n	8001912 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018f2:	7ffb      	ldrb	r3, [r7, #31]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4611      	mov	r1, r2
 80018fa:	7ffa      	ldrb	r2, [r7, #31]
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	440a      	add	r2, r1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800190a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	3301      	adds	r3, #1
 8001910:	77fb      	strb	r3, [r7, #31]
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d9ec      	bls.n	80018f2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0208 	orr.w	r2, r2, #8
 800192a:	b292      	uxth	r2, r2
 800192c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001938:	b29a      	uxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001942:	b292      	uxth	r2, r2
 8001944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001950:	b29a      	uxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0204 	orr.w	r2, r2, #4
 800195a:	b292      	uxth	r2, r2
 800195c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f006 f93b 	bl	8007bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001966:	e026      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00f      	beq.n	8001992 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001984:	b292      	uxth	r2, r2
 8001986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f006 f8f9 	bl	8007b82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001990:	e011      	b.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00c      	beq.n	80019b6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019b4:	bf00      	nop
  }
}
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_SetAddress+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e013      	b.n	80019fe <HAL_PCD_SetAddress+0x42>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fb14 	bl	800601c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	4608      	mov	r0, r1
 8001a10:	4611      	mov	r1, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	70fb      	strb	r3, [r7, #3]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	803b      	strh	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da0e      	bge.n	8001a4a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	705a      	strb	r2, [r3, #1]
 8001a48:	e00e      	b.n	8001a68 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0207 	and.w	r2, r3, #7
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a74:	883a      	ldrh	r2, [r7, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	78ba      	ldrb	r2, [r7, #2]
 8001a7e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d102      	bne.n	8001a8c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_EP_Open+0x94>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e00e      	b.n	8001ab8 <HAL_PCD_EP_Open+0xb2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68f9      	ldr	r1, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 f85d 	bl	8003b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0e      	bge.n	8001af2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00e      	b.n	8001b10 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0207 	and.w	r2, r3, #7
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_EP_Close+0x6a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_Close+0x88>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fbd5 	bl	80042e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f003 0207 	and.w	r2, r3, #7
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6979      	ldr	r1, [r7, #20]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fd8c 	bl	80046c0 <USB_EPStartXfer>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fd55 	bl	80046c0 <USB_EPStartXfer>

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 0207 	and.w	r2, r3, #7
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d901      	bls.n	8001c3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e04c      	b.n	8001cd8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da0e      	bge.n	8001c64 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	705a      	strb	r2, [r3, #1]
 8001c62:	e00c      	b.n	8001c7e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_PCD_EP_SetStall+0x7e>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e01c      	b.n	8001cd8 <HAL_PCD_EP_SetStall+0xb8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68f9      	ldr	r1, [r7, #12]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 f8b8 	bl	8005e22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d108      	bne.n	8001cce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f004 f9dd 	bl	8006088 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d901      	bls.n	8001cfe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e040      	b.n	8001d80 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da0e      	bge.n	8001d24 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
 8001d22:	e00e      	b.n	8001d42 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 0207 	and.w	r2, r3, #7
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_PCD_EP_ClrStall+0x82>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e00e      	b.n	8001d80 <HAL_PCD_EP_ClrStall+0xa0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68f9      	ldr	r1, [r7, #12]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 f8a6 	bl	8005ec2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b096      	sub	sp, #88	; 0x58
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d90:	e3bf      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001dac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8179 	bne.w	80020a8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001db6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d152      	bne.n	8001e68 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	81fb      	strh	r3, [r7, #14]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3328      	adds	r3, #40	; 0x28
 8001dea:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3302      	adds	r3, #2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	441a      	add	r2, r3
 8001e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e24:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f005 fe90 	bl	8007b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 836b 	beq.w	8002512 <PCD_EP_ISR_Handler+0x78a>
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 8366 	bne.w	8002512 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e66:	e354      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e6e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d034      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f004 f92f 	bl	8006128 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	823b      	strh	r3, [r7, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	8a3a      	ldrh	r2, [r7, #16]
 8001ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f005 fe03 	bl	8007af4 <HAL_PCD_SetupStageCallback>
 8001eee:	e310      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ef0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f280 830c 	bge.w	8002512 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f06:	4013      	ands	r3, r2
 8001f08:	83fb      	strh	r3, [r7, #30]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	8bfa      	ldrh	r2, [r7, #30]
 8001f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f14:	b292      	uxth	r2, r2
 8001f16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d019      	beq.n	8001f80 <PCD_EP_ISR_Handler+0x1f8>
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	6959      	ldr	r1, [r3, #20]
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f004 f8df 	bl	8006128 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	441a      	add	r2, r3
 8001f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f005 fdcc 	bl	8007b18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001f8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 82bd 	bne.w	8002512 <PCD_EP_ISR_Handler+0x78a>
 8001f98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f9c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001fa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001fa4:	f000 82b5 	beq.w	8002512 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8001fde:	d91d      	bls.n	800201c <PCD_EP_ISR_Handler+0x294>
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <PCD_EP_ISR_Handler+0x272>
 8001ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002002:	b29b      	uxth	r3, r3
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	b29b      	uxth	r3, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002014:	b29a      	uxth	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	801a      	strh	r2, [r3, #0]
 800201a:	e026      	b.n	800206a <PCD_EP_ISR_Handler+0x2e2>
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <PCD_EP_ISR_Handler+0x2b2>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800202e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002032:	b29a      	uxth	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	e017      	b.n	800206a <PCD_EP_ISR_Handler+0x2e2>
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	647b      	str	r3, [r7, #68]	; 0x44
 8002042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <PCD_EP_ISR_Handler+0x2cc>
 800204e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002050:	3301      	adds	r3, #1
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29a      	uxth	r2, r3
 800205a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205c:	b29b      	uxth	r3, r3
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	b29b      	uxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b29a      	uxth	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	827b      	strh	r3, [r7, #18]
 800207c:	8a7b      	ldrh	r3, [r7, #18]
 800207e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002082:	827b      	strh	r3, [r7, #18]
 8002084:	8a7b      	ldrh	r3, [r7, #18]
 8002086:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800208a:	827b      	strh	r3, [r7, #18]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	8a7b      	ldrh	r3, [r7, #18]
 8002092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	8013      	strh	r3, [r2, #0]
 80020a6:	e234      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f280 80fc 	bge.w	80022be <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020dc:	4013      	ands	r3, r2
 80020de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80020f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020f8:	b292      	uxth	r2, r2
 80020fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020fc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d125      	bne.n	8002166 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	3306      	adds	r3, #6
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002142:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002146:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8092 	beq.w	8002274 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215a:	88da      	ldrh	r2, [r3, #6]
 800215c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002160:	f003 ffe2 	bl	8006128 <USB_ReadPMA>
 8002164:	e086      	b.n	8002274 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002168:	78db      	ldrb	r3, [r3, #3]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d10a      	bne.n	8002184 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800216e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002172:	461a      	mov	r2, r3
 8002174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f9d9 	bl	800252e <HAL_PCD_EP_DB_Receive>
 800217c:	4603      	mov	r3, r0
 800217e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002182:	e077      	b.n	8002274 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	441a      	add	r2, r3
 80021b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d024      	beq.n	800222c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	3302      	adds	r3, #2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800220e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002212:	2b00      	cmp	r3, #0
 8002214:	d02e      	beq.n	8002274 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	6959      	ldr	r1, [r3, #20]
 800221e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002220:	891a      	ldrh	r2, [r3, #8]
 8002222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002226:	f003 ff7f 	bl	8006128 <USB_ReadPMA>
 800222a:	e023      	b.n	8002274 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3306      	adds	r3, #6
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002254:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002258:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002266:	6959      	ldr	r1, [r3, #20]
 8002268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226a:	895a      	ldrh	r2, [r3, #10]
 800226c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002270:	f003 ff5a 	bl	8006128 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800227c:	441a      	add	r2, r3
 800227e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002280:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800228a:	441a      	add	r2, r3
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <PCD_EP_ISR_Handler+0x51c>
 8002298:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d206      	bcs.n	80022b2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f005 fc34 	bl	8007b18 <HAL_PCD_DataOutStageCallback>
 80022b0:	e005      	b.n	80022be <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 fa01 	bl	80046c0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8123 	beq.w	8002512 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80022cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	441a      	add	r2, r3
 800230c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800231e:	78db      	ldrb	r3, [r3, #3]
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 80a2 	bne.w	800246a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800232c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800232e:	7b1b      	ldrb	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8093 	beq.w	800245c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002336:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d046      	beq.n	80023d0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d126      	bne.n	8002398 <PCD_EP_ISR_Handler+0x610>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	4413      	add	r3, r2
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	011a      	lsls	r2, r3, #4
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	4413      	add	r3, r2
 800236c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002370:	623b      	str	r3, [r7, #32]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	b29a      	uxth	r2, r3
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002390:	b29a      	uxth	r2, r3
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	e061      	b.n	800245c <PCD_EP_ISR_Handler+0x6d4>
 8002398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d15d      	bne.n	800245c <PCD_EP_ISR_Handler+0x6d4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	4413      	add	r3, r2
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	011a      	lsls	r2, r3, #4
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	4413      	add	r3, r2
 80023c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	e045      	b.n	800245c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d126      	bne.n	800242c <PCD_EP_ISR_Handler+0x6a4>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	4413      	add	r3, r2
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
 80023f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	011a      	lsls	r2, r3, #4
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	4413      	add	r3, r2
 8002400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002410:	b29a      	uxth	r2, r3
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002424:	b29a      	uxth	r2, r3
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e017      	b.n	800245c <PCD_EP_ISR_Handler+0x6d4>
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d113      	bne.n	800245c <PCD_EP_ISR_Handler+0x6d4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002442:	4413      	add	r3, r2
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	011a      	lsls	r2, r3, #4
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244e:	4413      	add	r3, r2
 8002450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002454:	63bb      	str	r3, [r7, #56]	; 0x38
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2200      	movs	r2, #0
 800245a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800245c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f005 fb73 	bl	8007b4e <HAL_PCD_DataInStageCallback>
 8002468:	e053      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800246a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d146      	bne.n	8002504 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	3302      	adds	r3, #2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d907      	bls.n	80024be <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80024ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e002      	b.n	80024c4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80024be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80024c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f005 fb3b 	bl	8007b4e <HAL_PCD_DataInStageCallback>
 80024d8:	e01b      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80024da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024e2:	441a      	add	r2, r3
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80024e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024f0:	441a      	add	r2, r3
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 f8df 	bl	80046c0 <USB_EPStartXfer>
 8002502:	e006      	b.n	8002512 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002504:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002508:	461a      	mov	r2, r3
 800250a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f91b 	bl	8002748 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251a:	b29b      	uxth	r3, r3
 800251c:	b21b      	sxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	f6ff ac37 	blt.w	8001d92 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3758      	adds	r7, #88	; 0x58
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b088      	sub	sp, #32
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d07e      	beq.n	8002644 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	3302      	adds	r3, #2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	8b7b      	ldrh	r3, [r7, #26]
 8002576:	429a      	cmp	r2, r3
 8002578:	d306      	bcc.n	8002588 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	8b7b      	ldrh	r3, [r7, #26]
 8002580:	1ad2      	subs	r2, r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	619a      	str	r2, [r3, #24]
 8002586:	e002      	b.n	800258e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d123      	bne.n	80025de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	833b      	strh	r3, [r7, #24]
 80025b2:	8b3b      	ldrh	r3, [r7, #24]
 80025b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025b8:	833b      	strh	r3, [r7, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	441a      	add	r2, r3
 80025c8:	8b3b      	ldrh	r3, [r7, #24]
 80025ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01f      	beq.n	8002628 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	82fb      	strh	r3, [r7, #22]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	8afb      	ldrh	r3, [r7, #22]
 8002614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002624:	b29b      	uxth	r3, r3
 8002626:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002628:	8b7b      	ldrh	r3, [r7, #26]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8087 	beq.w	800273e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6959      	ldr	r1, [r3, #20]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	891a      	ldrh	r2, [r3, #8]
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	f003 fd73 	bl	8006128 <USB_ReadPMA>
 8002642:	e07c      	b.n	800273e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	3306      	adds	r3, #6
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	8b7b      	ldrh	r3, [r7, #26]
 8002674:	429a      	cmp	r2, r3
 8002676:	d306      	bcc.n	8002686 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	8b7b      	ldrh	r3, [r7, #26]
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	619a      	str	r2, [r3, #24]
 8002684:	e002      	b.n	800268c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d123      	bne.n	80026dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	83fb      	strh	r3, [r7, #30]
 80026b0:	8bfb      	ldrh	r3, [r7, #30]
 80026b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026b6:	83fb      	strh	r3, [r7, #30]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	8bfb      	ldrh	r3, [r7, #30]
 80026c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	b29b      	uxth	r3, r3
 80026da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11f      	bne.n	8002726 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	83bb      	strh	r3, [r7, #28]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	441a      	add	r2, r3
 8002710:	8bbb      	ldrh	r3, [r7, #28]
 8002712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002722:	b29b      	uxth	r3, r3
 8002724:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002726:	8b7b      	ldrh	r3, [r7, #26]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6959      	ldr	r1, [r3, #20]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	895a      	ldrh	r2, [r3, #10]
 8002738:	8b7b      	ldrh	r3, [r7, #26]
 800273a:	f003 fcf5 	bl	8006128 <USB_ReadPMA>
    }
  }

  return count;
 800273e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0a4      	sub	sp, #144	; 0x90
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 81dd 	beq.w	8002b1c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	3302      	adds	r3, #2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002796:	429a      	cmp	r2, r3
 8002798:	d907      	bls.n	80027aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	619a      	str	r2, [r3, #24]
 80027a8:	e002      	b.n	80027b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f040 80b9 	bne.w	800292c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d126      	bne.n	8002810 <HAL_PCD_EP_DB_Transmit+0xc8>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	4413      	add	r3, r2
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	011a      	lsls	r2, r3, #4
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	4413      	add	r3, r2
 80027e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002808:	b29a      	uxth	r2, r3
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e01a      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	785b      	ldrb	r3, [r3, #1]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d116      	bne.n	8002846 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282c:	4413      	add	r3, r2
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	011a      	lsls	r2, r3, #4
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	4413      	add	r3, r2
 800283a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
 8002840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d126      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	011a      	lsls	r2, r3, #4
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002886:	b29a      	uxth	r2, r3
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289a:	b29a      	uxth	r2, r3
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	e017      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d113      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	4413      	add	r3, r2
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	4413      	add	r3, r2
 80028c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f005 f938 	bl	8007b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 82fc 	beq.w	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002904:	82fb      	strh	r3, [r7, #22]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	441a      	add	r2, r3
 8002914:	8afb      	ldrh	r3, [r7, #22]
 8002916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]
 800292a:	e2da      	b.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d021      	beq.n	800297a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	b29b      	uxth	r3, r3
 8002978:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 82ae 	bne.w	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800298e:	441a      	add	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800299c:	441a      	add	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d30b      	bcc.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	621a      	str	r2, [r3, #32]
 80029c4:	e017      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d108      	bne.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80029ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029de:	e00a      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d165      	bne.n	8002aca <HAL_PCD_EP_DB_Transmit+0x382>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a12:	4413      	add	r3, r2
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	011a      	lsls	r2, r3, #4
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1e:	4413      	add	r3, r2
 8002a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a3c:	d91d      	bls.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x332>
 8002a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x310>
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a54:	3b01      	subs	r3, #1
 8002a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4313      	orrs	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	e044      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x350>
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	801a      	strh	r2, [r3, #0]
 8002a96:	e035      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aae:	3301      	adds	r3, #1
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	029b      	lsls	r3, r3, #10
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	e01c      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d118      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae6:	4413      	add	r3, r2
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	011a      	lsls	r2, r3, #4
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002af8:	643b      	str	r3, [r7, #64]	; 0x40
 8002afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	6959      	ldr	r1, [r3, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	891a      	ldrh	r2, [r3, #8]
 8002b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f003 fac2 	bl	800609e <USB_WritePMA>
 8002b1a:	e1e2      	b.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3306      	adds	r3, #6
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b44:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d307      	bcc.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b5c:	1ad2      	subs	r2, r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	619a      	str	r2, [r3, #24]
 8002b62:	e002      	b.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80c0 	bne.w	8002cf4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d126      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x482>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b90:	4413      	add	r3, r2
 8002b92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ba2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e01a      	b.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d116      	bne.n	8002c00 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be6:	4413      	add	r3, r2
 8002be8:	667b      	str	r3, [r7, #100]	; 0x64
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	011a      	lsls	r2, r3, #4
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	677b      	str	r3, [r7, #116]	; 0x74
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d12b      	bne.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c22:	4413      	add	r3, r2
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	011a      	lsls	r2, r3, #4
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	4413      	add	r3, r2
 8002c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c62:	801a      	strh	r2, [r3, #0]
 8002c64:	e017      	b.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	785b      	ldrb	r3, [r3, #1]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d113      	bne.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7c:	4413      	add	r3, r2
 8002c7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	011a      	lsls	r2, r3, #4
 8002c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c88:	4413      	add	r3, r2
 8002c8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c92:	2200      	movs	r2, #0
 8002c94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f004 ff56 	bl	8007b4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 811a 	bne.w	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]
 8002cf2:	e0f6      	b.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d121      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 80ca 	bne.w	8002ee2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d56:	441a      	add	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d64:	441a      	add	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d30b      	bcc.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	621a      	str	r2, [r3, #32]
 8002d8c:	e017      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d108      	bne.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002d96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002da6:	e00a      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d165      	bne.n	8002e98 <HAL_PCD_EP_DB_Transmit+0x750>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de0:	4413      	add	r3, r2
 8002de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	011a      	lsls	r2, r3, #4
 8002dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e08:	2b3e      	cmp	r3, #62	; 0x3e
 8002e0a:	d91d      	bls.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x700>
 8002e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e22:	3b01      	subs	r3, #1
 8002e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	029b      	lsls	r3, r3, #10
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	e041      	b.n	8002ecc <HAL_PCD_EP_DB_Transmit+0x784>
 8002e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	801a      	strh	r2, [r3, #0]
 8002e64:	e032      	b.n	8002ecc <HAL_PCD_EP_DB_Transmit+0x784>
 8002e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x738>
 8002e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	029b      	lsls	r3, r3, #10
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	e019      	b.n	8002ecc <HAL_PCD_EP_DB_Transmit+0x784>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d115      	bne.n	8002ecc <HAL_PCD_EP_DB_Transmit+0x784>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eae:	4413      	add	r3, r2
 8002eb0:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	011a      	lsls	r2, r3, #4
 8002eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eba:	4413      	add	r3, r2
 8002ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6959      	ldr	r1, [r3, #20]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	895a      	ldrh	r2, [r3, #10]
 8002ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f003 f8de 	bl	800609e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efc:	82bb      	strh	r3, [r7, #20]
 8002efe:	8abb      	ldrh	r3, [r7, #20]
 8002f00:	f083 0310 	eor.w	r3, r3, #16
 8002f04:	82bb      	strh	r3, [r7, #20]
 8002f06:	8abb      	ldrh	r3, [r7, #20]
 8002f08:	f083 0320 	eor.w	r3, r3, #32
 8002f0c:	82bb      	strh	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	8abb      	ldrh	r3, [r7, #20]
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3790      	adds	r7, #144	; 0x90
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	817b      	strh	r3, [r7, #10]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e009      	b.n	8002f86 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f72:	897a      	ldrh	r2, [r7, #10]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f86:	893b      	ldrh	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	80da      	strh	r2, [r3, #6]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e272      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8087 	beq.w	80030ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe0:	4b92      	ldr	r3, [pc, #584]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d00c      	beq.n	8003006 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fec:	4b8f      	ldr	r3, [pc, #572]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d112      	bne.n	800301e <HAL_RCC_OscConfig+0x5e>
 8002ff8:	4b8c      	ldr	r3, [pc, #560]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d10b      	bne.n	800301e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003006:	4b89      	ldr	r3, [pc, #548]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06c      	beq.n	80030ec <HAL_RCC_OscConfig+0x12c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d168      	bne.n	80030ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e24c      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x76>
 8003028:	4b80      	ldr	r3, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7f      	ldr	r2, [pc, #508]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 800302e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	e02e      	b.n	8003094 <HAL_RCC_OscConfig+0xd4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x98>
 800303e:	4b7b      	ldr	r3, [pc, #492]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7a      	ldr	r2, [pc, #488]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b78      	ldr	r3, [pc, #480]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a77      	ldr	r2, [pc, #476]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e01d      	b.n	8003094 <HAL_RCC_OscConfig+0xd4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0xbc>
 8003062:	4b72      	ldr	r3, [pc, #456]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a71      	ldr	r2, [pc, #452]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6e      	ldr	r2, [pc, #440]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0xd4>
 800307c:	4b6b      	ldr	r3, [pc, #428]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b68      	ldr	r3, [pc, #416]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a67      	ldr	r2, [pc, #412]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fd faf2 	bl	8000684 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fd faee 	bl	8000684 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e200      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0xe4>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd fade 	bl	8000684 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd fada 	bl	8000684 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1ec      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x10c>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d063      	beq.n	80031c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fa:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003106:	4b49      	ldr	r3, [pc, #292]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d11c      	bne.n	800314c <HAL_RCC_OscConfig+0x18c>
 8003112:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_RCC_OscConfig+0x176>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1c0      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4939      	ldr	r1, [pc, #228]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	e03a      	b.n	80031c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCC_OscConfig+0x270>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7fd fa93 	bl	8000684 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003162:	f7fd fa8f 	bl	8000684 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1a1      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4927      	ldr	r1, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCC_OscConfig+0x270>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fd fa72 	bl	8000684 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fd fa6e 	bl	8000684 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e180      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d03a      	beq.n	8003244 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d019      	beq.n	800320a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_RCC_OscConfig+0x274>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7fd fa52 	bl	8000684 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fd fa4e 	bl	8000684 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e160      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003202:	2001      	movs	r0, #1
 8003204:	f000 faba 	bl	800377c <RCC_Delay>
 8003208:	e01c      	b.n	8003244 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_OscConfig+0x274>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7fd fa38 	bl	8000684 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003216:	e00f      	b.n	8003238 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd fa34 	bl	8000684 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d908      	bls.n	8003238 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e146      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	42420000 	.word	0x42420000
 8003234:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b92      	ldr	r3, [pc, #584]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e9      	bne.n	8003218 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a6 	beq.w	800339e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4a87      	ldr	r2, [pc, #540]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	61d3      	str	r3, [r2, #28]
 800326e:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b82      	ldr	r3, [pc, #520]	; (8003488 <HAL_RCC_OscConfig+0x4c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b7f      	ldr	r3, [pc, #508]	; (8003488 <HAL_RCC_OscConfig+0x4c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a7e      	ldr	r2, [pc, #504]	; (8003488 <HAL_RCC_OscConfig+0x4c8>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fd f9f5 	bl	8000684 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fd f9f1 	bl	8000684 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b64      	cmp	r3, #100	; 0x64
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e103      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b75      	ldr	r3, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4c8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x312>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6213      	str	r3, [r2, #32]
 80032d0:	e02d      	b.n	800332e <HAL_RCC_OscConfig+0x36e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x334>
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a69      	ldr	r2, [pc, #420]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6213      	str	r3, [r2, #32]
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	6213      	str	r3, [r2, #32]
 80032f2:	e01c      	b.n	800332e <HAL_RCC_OscConfig+0x36e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d10c      	bne.n	8003316 <HAL_RCC_OscConfig+0x356>
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4a60      	ldr	r2, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a5d      	ldr	r2, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	e00b      	b.n	800332e <HAL_RCC_OscConfig+0x36e>
 8003316:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a5a      	ldr	r2, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	4b58      	ldr	r3, [pc, #352]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a57      	ldr	r2, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d015      	beq.n	8003362 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003336:	f7fd f9a5 	bl	8000684 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd f9a1 	bl	8000684 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0b1      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ee      	beq.n	800333e <HAL_RCC_OscConfig+0x37e>
 8003360:	e014      	b.n	800338c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fd f98f 	bl	8000684 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fd f98b 	bl	8000684 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e09b      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ee      	bne.n	800336a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d105      	bne.n	800339e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003392:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8087 	beq.w	80034b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d061      	beq.n	8003478 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d146      	bne.n	800344a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b33      	ldr	r3, [pc, #204]	; (800348c <HAL_RCC_OscConfig+0x4cc>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd f95f 	bl	8000684 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fd f95b 	bl	8000684 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e06d      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d108      	bne.n	8003404 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4921      	ldr	r1, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a19      	ldr	r1, [r3, #32]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	430b      	orrs	r3, r1
 8003416:	491b      	ldr	r1, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x4cc>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fd f92f 	bl	8000684 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342a:	f7fd f92b 	bl	8000684 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e03d      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x46a>
 8003448:	e035      	b.n	80034b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCC_OscConfig+0x4cc>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fd f918 	bl	8000684 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd f914 	bl	8000684 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e026      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x498>
 8003476:	e01e      	b.n	80034b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e019      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
 800348c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_OscConfig+0x500>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d0      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d910      	bls.n	8003508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0207 	bic.w	r2, r3, #7
 80034ee:	4965      	ldr	r1, [pc, #404]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b8      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800352a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494d      	ldr	r1, [pc, #308]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d040      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07f      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e073      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06b      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4936      	ldr	r1, [pc, #216]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fd f866 	bl	8000684 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd f862 	bl	8000684 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e053      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d210      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4922      	ldr	r1, [pc, #136]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490e      	ldr	r1, [pc, #56]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f821 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8003656:	4602      	mov	r2, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	490a      	ldr	r1, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	5ccb      	ldrb	r3, [r1, r3]
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1cc>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1d0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ffc4 	bl	8000600 <HAL_InitTick>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40022000 	.word	0x40022000
 8003688:	40021000 	.word	0x40021000
 800368c:	08008094 	.word	0x08008094
 8003690:	20000000 	.word	0x20000000
 8003694:	20000004 	.word	0x20000004

08003698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCC_GetSysClockFreq+0x94>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d002      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x30>
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_GetSysClockFreq+0x36>
 80036c6:	e027      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ca:	613b      	str	r3, [r7, #16]
      break;
 80036cc:	e027      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	0c9b      	lsrs	r3, r3, #18
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_GetSysClockFreq+0x94>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	0c5b      	lsrs	r3, r3, #17
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_RCC_GetSysClockFreq+0x98>)
 80036fa:	fb03 f202 	mul.w	r2, r3, r2
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e004      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_RCC_GetSysClockFreq+0xa4>)
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	613b      	str	r3, [r7, #16]
      break;
 8003716:	e002      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_GetSysClockFreq+0x98>)
 800371a:	613b      	str	r3, [r7, #16]
      break;
 800371c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371e:	693b      	ldr	r3, [r7, #16]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	007a1200 	.word	0x007a1200
 8003734:	080080ac 	.word	0x080080ac
 8003738:	080080bc 	.word	0x080080bc
 800373c:	003d0900 	.word	0x003d0900

08003740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003744:	4b02      	ldr	r3, [pc, #8]	; (8003750 <HAL_RCC_GetHCLKFreq+0x10>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000000 	.word	0x20000000

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003758:	f7ff fff2 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	080080a4 	.word	0x080080a4

0800377c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCC_Delay+0x34>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <RCC_Delay+0x38>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	0a5b      	lsrs	r3, r3, #9
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003798:	bf00      	nop
  }
  while (Delay --);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1e5a      	subs	r2, r3, #1
 800379e:	60fa      	str	r2, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f9      	bne.n	8003798 <RCC_Delay+0x1c>
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	20000000 	.word	0x20000000
 80037b4:	10624dd3 	.word	0x10624dd3

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d07d      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a4b      	ldr	r2, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	61d3      	str	r3, [r2, #28]
 80037f0:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b46      	ldr	r3, [pc, #280]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d118      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a42      	ldr	r2, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003818:	f7fc ff34 	bl	8000684 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	e008      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fc ff30 	bl	8000684 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e06d      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b3a      	ldr	r3, [pc, #232]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800383e:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d027      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800385c:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003866:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800386c:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003872:	4a29      	ldr	r2, [pc, #164]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d014      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fc feff 	bl	8000684 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003888:	e00a      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fc fefb 	bl	8000684 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e036      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0ee      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4917      	ldr	r1, [pc, #92]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4a13      	ldr	r2, [pc, #76]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	490b      	ldr	r1, [pc, #44]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
 8003920:	42420440 	.word	0x42420440

08003924 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b10      	cmp	r3, #16
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b10      	cmp	r3, #16
 800394a:	f200 808a 	bhi.w	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d045      	beq.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d075      	beq.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800395a:	e082      	b.n	8003a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800395c:	4b46      	ldr	r3, [pc, #280]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003962:	4b45      	ldr	r3, [pc, #276]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d07b      	beq.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	0c9b      	lsrs	r3, r3, #18
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4a41      	ldr	r2, [pc, #260]	; (8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d015      	beq.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003986:	4b3c      	ldr	r3, [pc, #240]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0c5b      	lsrs	r3, r3, #17
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039a0:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	e004      	b.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4a34      	ldr	r2, [pc, #208]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039bc:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c8:	d102      	bne.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	61bb      	str	r3, [r7, #24]
      break;
 80039ce:	e04a      	b.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
      break;
 80039de:	e042      	b.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f0:	d108      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80039fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e01f      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003a1c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e00f      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2e:	d11c      	bne.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003a3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a40:	61bb      	str	r3, [r7, #24]
      break;
 8003a42:	e012      	b.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a44:	e011      	b.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a46:	f7ff fe85 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	0b9b      	lsrs	r3, r3, #14
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	3301      	adds	r3, #1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	61bb      	str	r3, [r7, #24]
      break;
 8003a60:	e004      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a6a:	bf00      	nop
    }
  }
  return (frequency);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	080080c0 	.word	0x080080c0
 8003a80:	080080d0 	.word	0x080080d0
 8003a84:	007a1200 	.word	0x007a1200
 8003a88:	003d0900 	.word	0x003d0900
 8003a8c:	aaaaaaab 	.word	0xaaaaaaab

08003a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a90:	b084      	sub	sp, #16
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	f107 0014 	add.w	r0, r7, #20
 8003a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	b004      	add	sp, #16
 8003aae:	4770      	bx	lr

08003ab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ac0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ac4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ae4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ae8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	4013      	ands	r3, r2
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b28:	b084      	sub	sp, #16
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	f107 0014 	add.w	r0, r7, #20
 8003b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	b004      	add	sp, #16
 8003b66:	4770      	bx	lr

08003b68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b09d      	sub	sp, #116	; 0x74
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	78db      	ldrb	r3, [r3, #3]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d81f      	bhi.n	8003bda <USB_ActivateEndpoint+0x72>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <USB_ActivateEndpoint+0x38>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bcd 	.word	0x08003bcd
 8003ba8:	08003be3 	.word	0x08003be3
 8003bac:	08003bbf 	.word	0x08003bbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003bbc:	e012      	b.n	8003be4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003bc2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003bca:	e00b      	b.n	8003be4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003bd8:	e004      	b.n	8003be4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003be0:	e000      	b.n	8003be4 <USB_ActivateEndpoint+0x7c>
      break;
 8003be2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	441a      	add	r2, r3
 8003c34:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	7b1b      	ldrb	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 8178 	bne.w	8003f46 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8084 	beq.w	8003d68 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4413      	add	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011a      	lsls	r2, r3, #4
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	88db      	ldrh	r3, [r3, #6]
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	827b      	strh	r3, [r7, #18]
 8003ca2:	8a7b      	ldrh	r3, [r7, #18]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01b      	beq.n	8003ce4 <USB_ActivateEndpoint+0x17c>
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	823b      	strh	r3, [r7, #16]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	8a3b      	ldrh	r3, [r7, #16]
 8003cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	78db      	ldrb	r3, [r3, #3]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d020      	beq.n	8003d2e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	81bb      	strh	r3, [r7, #12]
 8003d04:	89bb      	ldrh	r3, [r7, #12]
 8003d06:	f083 0320 	eor.w	r3, r3, #32
 8003d0a:	81bb      	strh	r3, [r7, #12]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	89bb      	ldrh	r3, [r7, #12]
 8003d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	8013      	strh	r3, [r2, #0]
 8003d2c:	e2d5      	b.n	80042da <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d44:	81fb      	strh	r3, [r7, #14]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	89fb      	ldrh	r3, [r7, #14]
 8003d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]
 8003d66:	e2b8      	b.n	80042da <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	4413      	add	r3, r2
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	011a      	lsls	r2, r3, #4
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	88db      	ldrh	r3, [r3, #6]
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	4413      	add	r3, r2
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	011a      	lsls	r2, r3, #4
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8003dd6:	d91d      	bls.n	8003e14 <USB_ActivateEndpoint+0x2ac>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <USB_ActivateEndpoint+0x28a>
 8003dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dee:	3b01      	subs	r3, #1
 8003df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	029b      	lsls	r3, r3, #10
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4313      	orrs	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	801a      	strh	r2, [r3, #0]
 8003e12:	e026      	b.n	8003e62 <USB_ActivateEndpoint+0x2fa>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <USB_ActivateEndpoint+0x2ca>
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	e017      	b.n	8003e62 <USB_ActivateEndpoint+0x2fa>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <USB_ActivateEndpoint+0x2e4>
 8003e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e48:	3301      	adds	r3, #1
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	029b      	lsls	r3, r3, #10
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <USB_ActivateEndpoint+0x34a>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	843b      	strh	r3, [r7, #32]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	8c3b      	ldrh	r3, [r7, #32]
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d124      	bne.n	8003f04 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed0:	83bb      	strh	r3, [r7, #28]
 8003ed2:	8bbb      	ldrh	r3, [r7, #28]
 8003ed4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ed8:	83bb      	strh	r3, [r7, #28]
 8003eda:	8bbb      	ldrh	r3, [r7, #28]
 8003edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ee0:	83bb      	strh	r3, [r7, #28]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8bbb      	ldrh	r3, [r7, #28]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]
 8003f02:	e1ea      	b.n	80042da <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	83fb      	strh	r3, [r7, #30]
 8003f1c:	8bfb      	ldrh	r3, [r7, #30]
 8003f1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f22:	83fb      	strh	r3, [r7, #30]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	8bfb      	ldrh	r3, [r7, #30]
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]
 8003f44:	e1c9      	b.n	80042da <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	78db      	ldrb	r3, [r3, #3]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d11e      	bne.n	8003f8c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]
 8003f8a:	e01d      	b.n	8003fc8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	4413      	add	r3, r2
 8003fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	011a      	lsls	r2, r3, #4
 8003fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	891b      	ldrh	r3, [r3, #8]
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004006:	b29b      	uxth	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400c:	4413      	add	r3, r2
 800400e:	657b      	str	r3, [r7, #84]	; 0x54
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	011a      	lsls	r2, r3, #4
 8004016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004018:	4413      	add	r3, r2
 800401a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800401e:	653b      	str	r3, [r7, #80]	; 0x50
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	895b      	ldrh	r3, [r3, #10]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8093 	bne.w	8004160 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800404a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01b      	beq.n	800408e <USB_ActivateEndpoint+0x526>
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800409c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <USB_ActivateEndpoint+0x576>
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	441a      	add	r2, r3
 80040c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80040f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80040fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004100:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004104:	873b      	strh	r3, [r7, #56]	; 0x38
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]
 800415e:	e0bc      	b.n	80042da <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01d      	beq.n	80041b8 <USB_ActivateEndpoint+0x650>
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80041c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01d      	beq.n	8004210 <USB_ActivateEndpoint+0x6a8>
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420c:	b29b      	uxth	r3, r3
 800420e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	78db      	ldrb	r3, [r3, #3]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d024      	beq.n	8004262 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004232:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004236:	f083 0320 	eor.w	r3, r3, #32
 800423a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800424c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]
 8004260:	e01d      	b.n	800429e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800428a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80042da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3774      	adds	r7, #116	; 0x74
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b08d      	sub	sp, #52	; 0x34
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	7b1b      	ldrb	r3, [r3, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 808e 	bne.w	8004418 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d044      	beq.n	800438e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	81bb      	strh	r3, [r7, #12]
 8004312:	89bb      	ldrh	r3, [r7, #12]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01b      	beq.n	8004354 <USB_DeactivateEndpoint+0x6c>
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	817b      	strh	r3, [r7, #10]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	897b      	ldrh	r3, [r7, #10]
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436a:	813b      	strh	r3, [r7, #8]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	441a      	add	r2, r3
 8004376:	893b      	ldrh	r3, [r7, #8]
 8004378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004388:	b29b      	uxth	r3, r3
 800438a:	8013      	strh	r3, [r2, #0]
 800438c:	e192      	b.n	80046b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	827b      	strh	r3, [r7, #18]
 800439c:	8a7b      	ldrh	r3, [r7, #18]
 800439e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d01b      	beq.n	80043de <USB_DeactivateEndpoint+0xf6>
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	823b      	strh	r3, [r7, #16]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8a3b      	ldrh	r3, [r7, #16]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f4:	81fb      	strh	r3, [r7, #14]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	89fb      	ldrh	r3, [r7, #14]
 8004402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
 8004416:	e14d      	b.n	80046b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 80a5 	bne.w	800456c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	843b      	strh	r3, [r7, #32]
 8004430:	8c3b      	ldrh	r3, [r7, #32]
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01b      	beq.n	8004472 <USB_DeactivateEndpoint+0x18a>
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	83fb      	strh	r3, [r7, #30]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	8bfb      	ldrh	r3, [r7, #30]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800446a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	83bb      	strh	r3, [r7, #28]
 8004480:	8bbb      	ldrh	r3, [r7, #28]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01b      	beq.n	80044c2 <USB_DeactivateEndpoint+0x1da>
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	837b      	strh	r3, [r7, #26]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	8b7b      	ldrh	r3, [r7, #26]
 80044ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	833b      	strh	r3, [r7, #24]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8b3b      	ldrh	r3, [r7, #24]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	82fb      	strh	r3, [r7, #22]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	8afb      	ldrh	r3, [r7, #22]
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004548:	82bb      	strh	r3, [r7, #20]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	441a      	add	r2, r3
 8004554:	8abb      	ldrh	r3, [r7, #20]
 8004556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004566:	b29b      	uxth	r3, r3
 8004568:	8013      	strh	r3, [r2, #0]
 800456a:	e0a3      	b.n	80046b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800457a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800457c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <USB_DeactivateEndpoint+0x2d4>
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80045ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <USB_DeactivateEndpoint+0x324>
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	b29b      	uxth	r3, r3
 8004642:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	b29b      	uxth	r3, r3
 800467a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	847b      	strh	r3, [r7, #34]	; 0x22
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3734      	adds	r7, #52	; 0x34
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0c2      	sub	sp, #264	; 0x108
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ce:	6018      	str	r0, [r3, #0]
 80046d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	f040 86b7 	bne.w	800545a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	429a      	cmp	r2, r3
 8004706:	d908      	bls.n	800471a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004718:	e007      	b.n	800472a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800471a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800471e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800472a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800472e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	7b1b      	ldrb	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13a      	bne.n	80047b0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800473a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800473e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6959      	ldr	r1, [r3, #20]
 8004746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	88da      	ldrh	r2, [r3, #6]
 8004752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004756:	b29b      	uxth	r3, r3
 8004758:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800475c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004760:	6800      	ldr	r0, [r0, #0]
 8004762:	f001 fc9c 	bl	800609e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800478e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	011a      	lsls	r2, r3, #4
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	f000 be1f 	b.w	80053ee <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80047b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	78db      	ldrb	r3, [r3, #3]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f040 8462 	bne.w	8005086 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80047c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	f240 83df 	bls.w	8004f9e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800480a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004830:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004838:	b29b      	uxth	r3, r3
 800483a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800483c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a1a      	ldr	r2, [r3, #32]
 8004848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484c:	1ad2      	subs	r2, r2, r3
 800484e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800485a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800485e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 81c7 	beq.w	8004c10 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d177      	bne.n	800498e <USB_EPStartXfer+0x2ce>
 800489e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	4413      	add	r3, r2
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	011a      	lsls	r2, r3, #4
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	4413      	add	r3, r2
 80048d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ee:	2b3e      	cmp	r3, #62	; 0x3e
 80048f0:	d921      	bls.n	8004936 <USB_EPStartXfer+0x276>
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <USB_EPStartXfer+0x252>
 8004908:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800490c:	3b01      	subs	r3, #1
 800490e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800491c:	b29b      	uxth	r3, r3
 800491e:	029b      	lsls	r3, r3, #10
 8004920:	b29b      	uxth	r3, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29a      	uxth	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	e050      	b.n	80049d8 <USB_EPStartXfer+0x318>
 8004936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <USB_EPStartXfer+0x294>
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e041      	b.n	80049d8 <USB_EPStartXfer+0x318>
 8004954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800495e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <USB_EPStartXfer+0x2b4>
 800496a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800496e:	3301      	adds	r3, #1
 8004970:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29a      	uxth	r2, r3
 800497a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800497e:	b29b      	uxth	r3, r3
 8004980:	029b      	lsls	r3, r3, #10
 8004982:	b29b      	uxth	r3, r3
 8004984:	4313      	orrs	r3, r2
 8004986:	b29a      	uxth	r2, r3
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	e024      	b.n	80049d8 <USB_EPStartXfer+0x318>
 800498e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d11c      	bne.n	80049d8 <USB_EPStartXfer+0x318>
 800499e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	4413      	add	r3, r2
 80049b4:	633b      	str	r3, [r7, #48]	; 0x30
 80049b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	011a      	lsls	r2, r3, #4
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	4413      	add	r3, r2
 80049c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80049d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	895b      	ldrh	r3, [r3, #10]
 80049e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6959      	ldr	r1, [r3, #20]
 80049f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80049fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a06:	6800      	ldr	r0, [r0, #0]
 8004a08:	f001 fb49 	bl	800609e <USB_WritePMA>
            ep->xfer_buff += len;
 8004a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a1c:	441a      	add	r2, r3
 8004a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a1a      	ldr	r2, [r3, #32]
 8004a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d90f      	bls.n	8004a66 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a1a      	ldr	r2, [r3, #32]
 8004a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	621a      	str	r2, [r3, #32]
 8004a64:	e00e      	b.n	8004a84 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2200      	movs	r2, #0
 8004a82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d177      	bne.n	8004b84 <USB_EPStartXfer+0x4c4>
 8004a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ae6:	d921      	bls.n	8004b2c <USB_EPStartXfer+0x46c>
 8004ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <USB_EPStartXfer+0x448>
 8004afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	e056      	b.n	8004bda <USB_EPStartXfer+0x51a>
 8004b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <USB_EPStartXfer+0x48a>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e047      	b.n	8004bda <USB_EPStartXfer+0x51a>
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <USB_EPStartXfer+0x4aa>
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b64:	3301      	adds	r3, #1
 8004b66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	029b      	lsls	r3, r3, #10
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	e02a      	b.n	8004bda <USB_EPStartXfer+0x51a>
 8004b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d122      	bne.n	8004bda <USB_EPStartXfer+0x51a>
 8004b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	891b      	ldrh	r3, [r3, #8]
 8004be6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6959      	ldr	r1, [r3, #20]
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c08:	6800      	ldr	r0, [r0, #0]
 8004c0a:	f001 fa48 	bl	800609e <USB_WritePMA>
 8004c0e:	e3ee      	b.n	80053ee <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d177      	bne.n	8004d10 <USB_EPStartXfer+0x650>
 8004c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c40:	4413      	add	r3, r2
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	011a      	lsls	r2, r3, #4
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c54:	4413      	add	r3, r2
 8004c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c70:	2b3e      	cmp	r3, #62	; 0x3e
 8004c72:	d921      	bls.n	8004cb8 <USB_EPStartXfer+0x5f8>
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <USB_EPStartXfer+0x5d4>
 8004c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	e056      	b.n	8004d66 <USB_EPStartXfer+0x6a6>
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <USB_EPStartXfer+0x616>
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e047      	b.n	8004d66 <USB_EPStartXfer+0x6a6>
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <USB_EPStartXfer+0x636>
 8004cec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	029b      	lsls	r3, r3, #10
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	4313      	orrs	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e02a      	b.n	8004d66 <USB_EPStartXfer+0x6a6>
 8004d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d122      	bne.n	8004d66 <USB_EPStartXfer+0x6a6>
 8004d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d40:	4413      	add	r3, r2
 8004d42:	653b      	str	r3, [r7, #80]	; 0x50
 8004d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	011a      	lsls	r2, r3, #4
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	891b      	ldrh	r3, [r3, #8]
 8004d72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d94:	6800      	ldr	r0, [r0, #0]
 8004d96:	f001 f982 	bl	800609e <USB_WritePMA>
            ep->xfer_buff += len;
 8004d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004daa:	441a      	add	r2, r3
 8004dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d90f      	bls.n	8004df4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de4:	1ad2      	subs	r2, r2, r3
 8004de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	621a      	str	r2, [r3, #32]
 8004df2:	e00e      	b.n	8004e12 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d177      	bne.n	8004f1e <USB_EPStartXfer+0x85e>
 8004e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	4413      	add	r3, r2
 8004e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	011a      	lsls	r2, r3, #4
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	4413      	add	r3, r2
 8004e64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e80:	d921      	bls.n	8004ec6 <USB_EPStartXfer+0x806>
 8004e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <USB_EPStartXfer+0x7e2>
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e050      	b.n	8004f68 <USB_EPStartXfer+0x8a8>
 8004ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <USB_EPStartXfer+0x824>
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	e041      	b.n	8004f68 <USB_EPStartXfer+0x8a8>
 8004ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <USB_EPStartXfer+0x844>
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efe:	3301      	adds	r3, #1
 8004f00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4313      	orrs	r3, r2
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	e024      	b.n	8004f68 <USB_EPStartXfer+0x8a8>
 8004f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d11c      	bne.n	8004f68 <USB_EPStartXfer+0x8a8>
 8004f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f42:	4413      	add	r3, r2
 8004f44:	643b      	str	r3, [r7, #64]	; 0x40
 8004f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	011a      	lsls	r2, r3, #4
 8004f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	895b      	ldrh	r3, [r3, #10]
 8004f74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6959      	ldr	r1, [r3, #20]
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	f001 f881 	bl	800609e <USB_WritePMA>
 8004f9c:	e227      	b.n	80053ee <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800500a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502a:	4413      	add	r3, r2
 800502c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	011a      	lsls	r2, r3, #4
 800503c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503e:	4413      	add	r3, r2
 8005040:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005044:	65bb      	str	r3, [r7, #88]	; 0x58
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504a:	b29a      	uxth	r2, r3
 800504c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800504e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	891b      	ldrh	r3, [r3, #8]
 800505c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6959      	ldr	r1, [r3, #20]
 800506c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005070:	b29b      	uxth	r3, r3
 8005072:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005076:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800507a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800507e:	6800      	ldr	r0, [r0, #0]
 8005080:	f001 f80d 	bl	800609e <USB_WritePMA>
 8005084:	e1b3      	b.n	80053ee <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80c6 	beq.w	8005258 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	673b      	str	r3, [r7, #112]	; 0x70
 80050d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d177      	bne.n	80051d8 <USB_EPStartXfer+0xb18>
 80050e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005108:	4413      	add	r3, r2
 800510a:	66bb      	str	r3, [r7, #104]	; 0x68
 800510c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	011a      	lsls	r2, r3, #4
 800511a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800511c:	4413      	add	r3, r2
 800511e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005122:	667b      	str	r3, [r7, #100]	; 0x64
 8005124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800512e:	b29a      	uxth	r2, r3
 8005130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005132:	801a      	strh	r2, [r3, #0]
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005138:	2b3e      	cmp	r3, #62	; 0x3e
 800513a:	d921      	bls.n	8005180 <USB_EPStartXfer+0xac0>
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <USB_EPStartXfer+0xa9c>
 8005152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005156:	3b01      	subs	r3, #1
 8005158:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800515c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29a      	uxth	r2, r3
 8005162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005166:	b29b      	uxth	r3, r3
 8005168:	029b      	lsls	r3, r3, #10
 800516a:	b29b      	uxth	r3, r3
 800516c:	4313      	orrs	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005178:	b29a      	uxth	r2, r3
 800517a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e050      	b.n	8005222 <USB_EPStartXfer+0xb62>
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <USB_EPStartXfer+0xade>
 8005188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005196:	b29a      	uxth	r2, r3
 8005198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e041      	b.n	8005222 <USB_EPStartXfer+0xb62>
 800519e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <USB_EPStartXfer+0xafe>
 80051b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051b8:	3301      	adds	r3, #1
 80051ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	029b      	lsls	r3, r3, #10
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e024      	b.n	8005222 <USB_EPStartXfer+0xb62>
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d11c      	bne.n	8005222 <USB_EPStartXfer+0xb62>
 80051e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051fc:	4413      	add	r3, r2
 80051fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005210:	4413      	add	r3, r2
 8005212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521c:	b29a      	uxth	r2, r3
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	895b      	ldrh	r3, [r3, #10]
 800522e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6959      	ldr	r1, [r3, #20]
 800523e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005242:	b29b      	uxth	r3, r3
 8005244:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005248:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800524c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005250:	6800      	ldr	r0, [r0, #0]
 8005252:	f000 ff24 	bl	800609e <USB_WritePMA>
 8005256:	e0ca      	b.n	80053ee <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d177      	bne.n	8005358 <USB_EPStartXfer+0xc98>
 8005268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005288:	4413      	add	r3, r2
 800528a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	011a      	lsls	r2, r3, #4
 800529a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800529c:	4413      	add	r3, r2
 800529e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b8:	2b3e      	cmp	r3, #62	; 0x3e
 80052ba:	d921      	bls.n	8005300 <USB_EPStartXfer+0xc40>
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <USB_EPStartXfer+0xc1c>
 80052d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052d6:	3b01      	subs	r3, #1
 80052d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e05c      	b.n	80053ba <USB_EPStartXfer+0xcfa>
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <USB_EPStartXfer+0xc5e>
 8005308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005316:	b29a      	uxth	r2, r3
 8005318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e04d      	b.n	80053ba <USB_EPStartXfer+0xcfa>
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <USB_EPStartXfer+0xc7e>
 8005334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005338:	3301      	adds	r3, #1
 800533a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800533e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29a      	uxth	r2, r3
 8005344:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005348:	b29b      	uxth	r3, r3
 800534a:	029b      	lsls	r3, r3, #10
 800534c:	b29b      	uxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b29a      	uxth	r2, r3
 8005352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e030      	b.n	80053ba <USB_EPStartXfer+0xcfa>
 8005358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d128      	bne.n	80053ba <USB_EPStartXfer+0xcfa>
 8005368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800537a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005384:	b29b      	uxth	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800538c:	4413      	add	r3, r2
 800538e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053a4:	4413      	add	r3, r2
 80053a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	891b      	ldrh	r3, [r3, #8]
 80053c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6959      	ldr	r1, [r3, #20]
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053e8:	6800      	ldr	r0, [r0, #0]
 80053ea:	f000 fe58 	bl	800609e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	817b      	strh	r3, [r7, #10]
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	f083 0310 	eor.w	r3, r3, #16
 800541c:	817b      	strh	r3, [r7, #10]
 800541e:	897b      	ldrh	r3, [r7, #10]
 8005420:	f083 0320 	eor.w	r3, r3, #32
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	897b      	ldrh	r3, [r7, #10]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]
 8005456:	f000 bcde 	b.w	8005e16 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800545a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	7b1b      	ldrb	r3, [r3, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 80bb 	bne.w	80055e2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800546c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d917      	bls.n	80054b8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	619a      	str	r2, [r3, #24]
 80054b6:	e00e      	b.n	80054d6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80054c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054fa:	4413      	add	r3, r2
 80054fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	011a      	lsls	r2, r3, #4
 800550e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005512:	4413      	add	r3, r2
 8005514:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800551c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005528:	b29a      	uxth	r2, r3
 800552a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005534:	2b3e      	cmp	r3, #62	; 0x3e
 8005536:	d924      	bls.n	8005582 <USB_EPStartXfer+0xec2>
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <USB_EPStartXfer+0xe98>
 800554e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005552:	3b01      	subs	r3, #1
 8005554:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29a      	uxth	r2, r3
 8005560:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005564:	b29b      	uxth	r3, r3
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	b29b      	uxth	r3, r3
 800556a:	4313      	orrs	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	f000 bc10 	b.w	8005da2 <USB_EPStartXfer+0x16e2>
 8005582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10c      	bne.n	80055a4 <USB_EPStartXfer+0xee4>
 800558a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559a:	b29a      	uxth	r2, r3
 800559c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e3fe      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <USB_EPStartXfer+0xf04>
 80055ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055be:	3301      	adds	r3, #1
 80055c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e3df      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	78db      	ldrb	r3, [r3, #3]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	f040 8218 	bne.w	8005a24 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 809d 	bne.w	8005740 <USB_EPStartXfer+0x1080>
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800562a:	4413      	add	r3, r2
 800562c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	011a      	lsls	r2, r3, #4
 800563e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005642:	4413      	add	r3, r2
 8005644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800564c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005658:	b29a      	uxth	r2, r3
 800565a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b3e      	cmp	r3, #62	; 0x3e
 800566e:	d92b      	bls.n	80056c8 <USB_EPStartXfer+0x1008>
 8005670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 031f 	and.w	r3, r3, #31
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <USB_EPStartXfer+0xfe0>
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	3b01      	subs	r3, #1
 800569c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e070      	b.n	80057aa <USB_EPStartXfer+0x10ea>
 80056c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10c      	bne.n	80056f2 <USB_EPStartXfer+0x1032>
 80056d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	e05b      	b.n	80057aa <USB_EPStartXfer+0x10ea>
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <USB_EPStartXfer+0x1062>
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	3301      	adds	r3, #1
 800571e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29a      	uxth	r2, r3
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	b29b      	uxth	r3, r3
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	b29b      	uxth	r3, r3
 8005734:	4313      	orrs	r3, r2
 8005736:	b29a      	uxth	r2, r3
 8005738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e034      	b.n	80057aa <USB_EPStartXfer+0x10ea>
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d12c      	bne.n	80057aa <USB_EPStartXfer+0x10ea>
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800575e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005774:	4413      	add	r3, r2
 8005776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800577a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	011a      	lsls	r2, r3, #4
 8005788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800578c:	4413      	add	r3, r2
 800578e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 809d 	bne.w	8005904 <USB_EPStartXfer+0x1244>
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057ee:	4413      	add	r3, r2
 80057f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005806:	4413      	add	r3, r2
 8005808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800580c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581c:	b29a      	uxth	r2, r3
 800581e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b3e      	cmp	r3, #62	; 0x3e
 8005832:	d92b      	bls.n	800588c <USB_EPStartXfer+0x11cc>
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <USB_EPStartXfer+0x11a4>
 800585a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585e:	3b01      	subs	r3, #1
 8005860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29a      	uxth	r2, r3
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005870:	b29b      	uxth	r3, r3
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	b29b      	uxth	r3, r3
 8005876:	4313      	orrs	r3, r2
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e069      	b.n	8005960 <USB_EPStartXfer+0x12a0>
 800588c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10c      	bne.n	80058b6 <USB_EPStartXfer+0x11f6>
 800589c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e054      	b.n	8005960 <USB_EPStartXfer+0x12a0>
 80058b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <USB_EPStartXfer+0x1226>
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e0:	3301      	adds	r3, #1
 80058e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	029b      	lsls	r3, r3, #10
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e02d      	b.n	8005960 <USB_EPStartXfer+0x12a0>
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d125      	bne.n	8005960 <USB_EPStartXfer+0x12a0>
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800592a:	4413      	add	r3, r2
 800592c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005942:	4413      	add	r3, r2
 8005944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	b29a      	uxth	r2, r3
 800595a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800595e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8218 	beq.w	8005da2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005992:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <USB_EPStartXfer+0x12ea>
 800599e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80059ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 81f5 	bne.w	8005da2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 81ee 	bne.w	8005da2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]
 8005a22:	e1be      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	78db      	ldrb	r3, [r3, #3]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	f040 81b4 	bne.w	8005d9e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d917      	bls.n	8005a82 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	619a      	str	r2, [r3, #24]
 8005a80:	e00e      	b.n	8005aa0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 8085 	bne.w	8005bbc <USB_EPStartXfer+0x14fc>
 8005ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	011a      	lsls	r2, r3, #4
 8005aea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aee:	4413      	add	r3, r2
 8005af0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005af8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b10:	2b3e      	cmp	r3, #62	; 0x3e
 8005b12:	d923      	bls.n	8005b5c <USB_EPStartXfer+0x149c>
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <USB_EPStartXfer+0x1474>
 8005b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4313      	orrs	r3, r2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e060      	b.n	8005c1e <USB_EPStartXfer+0x155e>
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10c      	bne.n	8005b7e <USB_EPStartXfer+0x14be>
 8005b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e04f      	b.n	8005c1e <USB_EPStartXfer+0x155e>
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <USB_EPStartXfer+0x14de>
 8005b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	e030      	b.n	8005c1e <USB_EPStartXfer+0x155e>
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d128      	bne.n	8005c1e <USB_EPStartXfer+0x155e>
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	011a      	lsls	r2, r3, #4
 8005c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 8085 	bne.w	8005d48 <USB_EPStartXfer+0x1688>
 8005c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c62:	4413      	add	r3, r2
 8005c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9e:	d923      	bls.n	8005ce8 <USB_EPStartXfer+0x1628>
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <USB_EPStartXfer+0x1600>
 8005cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e05c      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10c      	bne.n	8005d0a <USB_EPStartXfer+0x164a>
 8005cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e04b      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <USB_EPStartXfer+0x166a>
 8005d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d24:	3301      	adds	r3, #1
 8005d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	e02c      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d124      	bne.n	8005da2 <USB_EPStartXfer+0x16e2>
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d6e:	4413      	add	r3, r2
 8005d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d86:	4413      	add	r3, r2
 8005d88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e001      	b.n	8005da2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e03a      	b.n	8005e18 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005dcc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005dd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dd4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005dd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ddc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005de0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e4a:	81bb      	strh	r3, [r7, #12]
 8005e4c:	89bb      	ldrh	r3, [r7, #12]
 8005e4e:	f083 0310 	eor.w	r3, r3, #16
 8005e52:	81bb      	strh	r3, [r7, #12]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	89bb      	ldrh	r3, [r7, #12]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
 8005e74:	e01f      	b.n	8005eb6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	81fb      	strh	r3, [r7, #14]
 8005e8e:	89fb      	ldrh	r3, [r7, #14]
 8005e90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e94:	81fb      	strh	r3, [r7, #14]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	7b1b      	ldrb	r3, [r3, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 809d 	bne.w	8006010 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d04c      	beq.n	8005f78 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	823b      	strh	r3, [r7, #16]
 8005eec:	8a3b      	ldrh	r3, [r7, #16]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01b      	beq.n	8005f2e <USB_EPClearStall+0x6c>
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	81fb      	strh	r3, [r7, #14]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	89fb      	ldrh	r3, [r7, #14]
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d06c      	beq.n	8006010 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4c:	81bb      	strh	r3, [r7, #12]
 8005f4e:	89bb      	ldrh	r3, [r7, #12]
 8005f50:	f083 0320 	eor.w	r3, r3, #32
 8005f54:	81bb      	strh	r3, [r7, #12]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	89bb      	ldrh	r3, [r7, #12]
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
 8005f76:	e04b      	b.n	8006010 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	82fb      	strh	r3, [r7, #22]
 8005f86:	8afb      	ldrh	r3, [r7, #22]
 8005f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01b      	beq.n	8005fc8 <USB_EPClearStall+0x106>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	82bb      	strh	r3, [r7, #20]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	8abb      	ldrh	r3, [r7, #20]
 8005fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	827b      	strh	r3, [r7, #18]
 8005fe0:	8a7b      	ldrh	r3, [r7, #18]
 8005fe2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fe6:	827b      	strh	r3, [r7, #18]
 8005fe8:	8a7b      	ldrh	r3, [r7, #18]
 8005fea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fee:	827b      	strh	r3, [r7, #18]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	8a7b      	ldrh	r3, [r7, #18]
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2280      	movs	r2, #128	; 0x80
 8006032:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr

0800606a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006078:	b29b      	uxth	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800607c:	68fb      	ldr	r3, [r7, #12]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800609e:	b480      	push	{r7}
 80060a0:	b08b      	sub	sp, #44	; 0x2c
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	4611      	mov	r1, r2
 80060aa:	461a      	mov	r2, r3
 80060ac:	460b      	mov	r3, r1
 80060ae:	80fb      	strh	r3, [r7, #6]
 80060b0:	4613      	mov	r3, r2
 80060b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060b4:	88bb      	ldrh	r3, [r7, #4]
 80060b6:	3301      	adds	r3, #1
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	005a      	lsls	r2, r3, #1
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
 80060d6:	e01e      	b.n	8006116 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3301      	adds	r3, #1
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b21b      	sxth	r3, r3
 80060f0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	8a7a      	ldrh	r2, [r7, #18]
 80060f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	3302      	adds	r3, #2
 80060fc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	3302      	adds	r3, #2
 8006102:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3301      	adds	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	3b01      	subs	r3, #1
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1dd      	bne.n	80060d8 <USB_WritePMA+0x3a>
  }
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	372c      	adds	r7, #44	; 0x2c
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006128:	b480      	push	{r7}
 800612a:	b08b      	sub	sp, #44	; 0x2c
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4611      	mov	r1, r2
 8006134:	461a      	mov	r2, r3
 8006136:	460b      	mov	r3, r1
 8006138:	80fb      	strh	r3, [r7, #6]
 800613a:	4613      	mov	r3, r2
 800613c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800613e:	88bb      	ldrh	r3, [r7, #4]
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	b29b      	uxth	r3, r3
 8006144:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	005a      	lsls	r2, r3, #1
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
 8006160:	e01b      	b.n	800619a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	3302      	adds	r3, #2
 800616e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3301      	adds	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	b2da      	uxtb	r2, r3
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	3302      	adds	r3, #2
 8006192:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	3b01      	subs	r3, #1
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e0      	bne.n	8006162 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80061a0:	88bb      	ldrh	r3, [r7, #4]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	701a      	strb	r2, [r3, #0]
  }
}
 80061bc:	bf00      	nop
 80061be:	372c      	adds	r7, #44	; 0x2c
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80061d6:	2302      	movs	r3, #2
 80061d8:	2203      	movs	r2, #3
 80061da:	2181      	movs	r1, #129	; 0x81
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fd90 	bl	8007d02 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80061e8:	2302      	movs	r3, #2
 80061ea:	2203      	movs	r2, #3
 80061ec:	2101      	movs	r1, #1
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fd87 	bl	8007d02 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80061fc:	2018      	movs	r0, #24
 80061fe:	f001 fe95 	bl	8007f2c <USBD_static_malloc>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	e011      	b.n	800623e <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	2302      	movs	r3, #2
 8006236:	2101      	movs	r1, #1
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fe53 	bl	8007ee4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006254:	2181      	movs	r1, #129	; 0x81
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fd79 	bl	8007d4e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006262:	2101      	movs	r1, #1
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fd72 	bl	8007d4e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00e      	beq.n	800629a <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fe59 	bl	8007f44 <USBD_static_free>
    pdev->pClassData = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d051      	beq.n	8006376 <USBD_CUSTOM_HID_Setup+0xd2>
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	f040 80d8 	bne.w	8006488 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	3b02      	subs	r3, #2
 80062de:	2b09      	cmp	r3, #9
 80062e0:	d841      	bhi.n	8006366 <USBD_CUSTOM_HID_Setup+0xc2>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <USBD_CUSTOM_HID_Setup+0x44>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	08006341 	.word	0x08006341
 80062ec:	0800631f 	.word	0x0800631f
 80062f0:	08006367 	.word	0x08006367
 80062f4:	08006367 	.word	0x08006367
 80062f8:	08006367 	.word	0x08006367
 80062fc:	08006367 	.word	0x08006367
 8006300:	08006367 	.word	0x08006367
 8006304:	08006351 	.word	0x08006351
 8006308:	0800632f 	.word	0x0800632f
 800630c:	08006311 	.word	0x08006311
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	885b      	ldrh	r3, [r3, #2]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]
          break;
 800631c:	e02a      	b.n	8006374 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3304      	adds	r3, #4
 8006322:	2201      	movs	r2, #1
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 f99b 	bl	8007662 <USBD_CtlSendData>
          break;
 800632c:	e022      	b.n	8006374 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	885b      	ldrh	r3, [r3, #2]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	b29b      	uxth	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	609a      	str	r2, [r3, #8]
          break;
 800633e:	e019      	b.n	8006374 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	3308      	adds	r3, #8
 8006344:	2201      	movs	r2, #1
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f98a 	bl	8007662 <USBD_CtlSendData>
          break;
 800634e:	e011      	b.n	8006374 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2201      	movs	r2, #1
 8006354:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006356:	6939      	ldr	r1, [r7, #16]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	88db      	ldrh	r3, [r3, #6]
 800635c:	461a      	mov	r2, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 f9ad 	bl	80076be <USBD_CtlPrepareRx>
          break;
 8006364:	e006      	b.n	8006374 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 f910 	bl	800758e <USBD_CtlError>
          ret = USBD_FAIL;
 800636e:	2302      	movs	r3, #2
 8006370:	75fb      	strb	r3, [r7, #23]
          break;
 8006372:	bf00      	nop
      }
      break;
 8006374:	e08f      	b.n	8006496 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b0b      	cmp	r3, #11
 800637c:	d87c      	bhi.n	8006478 <USBD_CUSTOM_HID_Setup+0x1d4>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <USBD_CUSTOM_HID_Setup+0xe0>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	080063b5 	.word	0x080063b5
 8006388:	08006479 	.word	0x08006479
 800638c:	08006479 	.word	0x08006479
 8006390:	08006479 	.word	0x08006479
 8006394:	08006479 	.word	0x08006479
 8006398:	08006479 	.word	0x08006479
 800639c:	080063dd 	.word	0x080063dd
 80063a0:	08006479 	.word	0x08006479
 80063a4:	08006479 	.word	0x08006479
 80063a8:	08006479 	.word	0x08006479
 80063ac:	0800642b 	.word	0x0800642b
 80063b0:	08006453 	.word	0x08006453
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d107      	bne.n	80063ce <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80063be:	f107 030e 	add.w	r3, r7, #14
 80063c2:	2202      	movs	r2, #2
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 f94b 	bl	8007662 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063cc:	e05b      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 f8dc 	bl	800758e <USBD_CtlError>
            ret = USBD_FAIL;
 80063d6:	2302      	movs	r3, #2
 80063d8:	75fb      	strb	r3, [r7, #23]
          break;
 80063da:	e054      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	885b      	ldrh	r3, [r3, #2]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b22      	cmp	r3, #34	; 0x22
 80063e6:	d10b      	bne.n	8006400 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	88db      	ldrh	r3, [r3, #6]
 80063ec:	2ba3      	cmp	r3, #163	; 0xa3
 80063ee:	bf28      	it	cs
 80063f0:	23a3      	movcs	r3, #163	; 0xa3
 80063f2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	e00d      	b.n	800641c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	885b      	ldrh	r3, [r3, #2]
 8006404:	0a1b      	lsrs	r3, r3, #8
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b21      	cmp	r3, #33	; 0x21
 800640a:	d107      	bne.n	800641c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800640c:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800640e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	88db      	ldrh	r3, [r3, #6]
 8006414:	2b09      	cmp	r3, #9
 8006416:	bf28      	it	cs
 8006418:	2309      	movcs	r3, #9
 800641a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800641c:	8bfb      	ldrh	r3, [r7, #30]
 800641e:	461a      	mov	r2, r3
 8006420:	69b9      	ldr	r1, [r7, #24]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f91d 	bl	8007662 <USBD_CtlSendData>
          break;
 8006428:	e02d      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	2b03      	cmp	r3, #3
 8006432:	d107      	bne.n	8006444 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	330c      	adds	r3, #12
 8006438:	2201      	movs	r2, #1
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 f910 	bl	8007662 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006442:	e020      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 f8a1 	bl	800758e <USBD_CtlError>
            ret = USBD_FAIL;
 800644c:	2302      	movs	r3, #2
 800644e:	75fb      	strb	r3, [r7, #23]
          break;
 8006450:	e019      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	2b03      	cmp	r3, #3
 800645a:	d106      	bne.n	800646a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006468:	e00d      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f88e 	bl	800758e <USBD_CtlError>
            ret = USBD_FAIL;
 8006472:	2302      	movs	r3, #2
 8006474:	75fb      	strb	r3, [r7, #23]
          break;
 8006476:	e006      	b.n	8006486 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f887 	bl	800758e <USBD_CtlError>
          ret = USBD_FAIL;
 8006480:	2302      	movs	r3, #2
 8006482:	75fb      	strb	r3, [r7, #23]
          break;
 8006484:	bf00      	nop
      }
      break;
 8006486:	e006      	b.n	8006496 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 f87f 	bl	800758e <USBD_CtlError>
      ret = USBD_FAIL;
 8006490:	2302      	movs	r3, #2
 8006492:	75fb      	strb	r3, [r7, #23]
      break;
 8006494:	bf00      	nop
  }
  return ret;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200000c8 	.word	0x200000c8

080064a4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d10f      	bne.n	80064e4 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	7d1b      	ldrb	r3, [r3, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2201      	movs	r2, #1
 80064d0:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	2181      	movs	r1, #129	; 0x81
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f001 fce0 	bl	8007e9e <USBD_LL_Transmit>
 80064de:	e001      	b.n	80064e4 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2229      	movs	r2, #41	; 0x29
 80064fc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20000044 	.word	0x20000044

08006510 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2229      	movs	r2, #41	; 0x29
 800651c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800651e:	4b03      	ldr	r3, [pc, #12]	; (800652c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000070 	.word	0x20000070

08006530 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2229      	movs	r2, #41	; 0x29
 800653c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	2000009c 	.word	0x2000009c

08006550 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	2200      	movs	r2, #0
 8006564:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	7810      	ldrb	r0, [r2, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	7852      	ldrb	r2, [r2, #1]
 8006596:	4611      	mov	r1, r2
 8006598:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	2302      	movs	r3, #2
 800659e:	2101      	movs	r1, #1
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 fc9f 	bl	8007ee4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10c      	bne.n	80065e2 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	7810      	ldrb	r0, [r2, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	7852      	ldrb	r2, [r2, #1]
 80065d8:	4611      	mov	r1, r2
 80065da:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	220a      	movs	r2, #10
 80065f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	200000d4 	.word	0x200000d4

0800660c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006616:	2302      	movs	r3, #2
 8006618:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4613      	mov	r3, r2
 8006644:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800664c:	2302      	movs	r3, #2
 800664e:	e01a      	b.n	8006686 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	79fa      	ldrb	r2, [r7, #7]
 800667c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f001 fad4 	bl	8007c2c <USBD_LL_Init>

  return USBD_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d006      	beq.n	80066b0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
 80066ae:	e001      	b.n	80066b4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066b0:	2302      	movs	r3, #2
 80066b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 faff 	bl	8007ccc <USBD_LL_Start>

  return USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066f8:	2302      	movs	r3, #2
 80066fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	4611      	mov	r1, r2
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	4611      	mov	r1, r2
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3

  return USBD_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fed7 	bl	8007516 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2b02      	cmp	r3, #2
 800678a:	d016      	beq.n	80067ba <USBD_LL_SetupStage+0x6a>
 800678c:	2b02      	cmp	r3, #2
 800678e:	d81c      	bhi.n	80067ca <USBD_LL_SetupStage+0x7a>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <USBD_LL_SetupStage+0x4a>
 8006794:	2b01      	cmp	r3, #1
 8006796:	d008      	beq.n	80067aa <USBD_LL_SetupStage+0x5a>
 8006798:	e017      	b.n	80067ca <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9ca 	bl	8006b3c <USBD_StdDevReq>
      break;
 80067a8:	e01a      	b.n	80067e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa2c 	bl	8006c10 <USBD_StdItfReq>
      break;
 80067b8:	e012      	b.n	80067e0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa6c 	bl	8006ca0 <USBD_StdEPReq>
      break;
 80067c8:	e00a      	b.n	80067e0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fad7 	bl	8007d8c <USBD_LL_StallEP>
      break;
 80067de:	bf00      	nop
  }

  return USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b086      	sub	sp, #24
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	460b      	mov	r3, r1
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d14b      	bne.n	8006896 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006804:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800680c:	2b03      	cmp	r3, #3
 800680e:	d134      	bne.n	800687a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	429a      	cmp	r2, r3
 800681a:	d919      	bls.n	8006850 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	1ad2      	subs	r2, r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006832:	429a      	cmp	r2, r3
 8006834:	d203      	bcs.n	800683e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800683a:	b29b      	uxth	r3, r3
 800683c:	e002      	b.n	8006844 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 ff56 	bl	80076fa <USBD_CtlContinueRx>
 800684e:	e038      	b.n	80068c2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006862:	2b03      	cmp	r3, #3
 8006864:	d105      	bne.n	8006872 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 ff53 	bl	800771e <USBD_CtlSendStatus>
 8006878:	e023      	b.n	80068c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006880:	2b05      	cmp	r3, #5
 8006882:	d11e      	bne.n	80068c2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800688c:	2100      	movs	r1, #0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f001 fa7c 	bl	8007d8c <USBD_LL_StallEP>
 8006894:	e015      	b.n	80068c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d108      	bne.n	80068be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	7afa      	ldrb	r2, [r7, #11]
 80068b6:	4611      	mov	r1, r2
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	4798      	blx	r3
 80068bc:	e001      	b.n	80068c2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068be:	2302      	movs	r3, #2
 80068c0:	e000      	b.n	80068c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	460b      	mov	r3, r1
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d17f      	bne.n	80069e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3314      	adds	r3, #20
 80068e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d15c      	bne.n	80069aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	68da      	ldr	r2, [r3, #12]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d915      	bls.n	8006928 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	1ad2      	subs	r2, r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fec0 	bl	800769a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800691a:	2300      	movs	r3, #0
 800691c:	2200      	movs	r2, #0
 800691e:	2100      	movs	r1, #0
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 fadf 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8006926:	e04e      	b.n	80069c6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	6912      	ldr	r2, [r2, #16]
 8006930:	fbb3 f1f2 	udiv	r1, r3, r2
 8006934:	fb01 f202 	mul.w	r2, r1, r2
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d11c      	bne.n	8006978 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006946:	429a      	cmp	r2, r3
 8006948:	d316      	bcc.n	8006978 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006954:	429a      	cmp	r2, r3
 8006956:	d20f      	bcs.n	8006978 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fe9c 	bl	800769a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696a:	2300      	movs	r3, #0
 800696c:	2200      	movs	r2, #0
 800696e:	2100      	movs	r1, #0
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f001 fab7 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8006976:	e026      	b.n	80069c6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800698a:	2b03      	cmp	r3, #3
 800698c:	d105      	bne.n	800699a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800699a:	2180      	movs	r1, #128	; 0x80
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f001 f9f5 	bl	8007d8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 fece 	bl	8007744 <USBD_CtlReceiveStatus>
 80069a8:	e00d      	b.n	80069c6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d004      	beq.n	80069be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069be:	2180      	movs	r1, #128	; 0x80
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f001 f9e3 	bl	8007d8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d11d      	bne.n	8006a0c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff fe81 	bl	80066d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069de:	e015      	b.n	8006a0c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00d      	beq.n	8006a08 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d108      	bne.n	8006a08 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	7afa      	ldrb	r2, [r7, #11]
 8006a00:	4611      	mov	r1, r2
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	4798      	blx	r3
 8006a06:	e001      	b.n	8006a0c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e000      	b.n	8006a0e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	2200      	movs	r2, #0
 8006a22:	2100      	movs	r1, #0
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f96c 	bl	8007d02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2240      	movs	r2, #64	; 0x40
 8006a36:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a3a:	2340      	movs	r3, #64	; 0x40
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 f95e 	bl	8007d02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2240      	movs	r2, #64	; 0x40
 8006a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6852      	ldr	r2, [r2, #4]
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	4611      	mov	r1, r2
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
  }

  return USBD_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr

08006ade <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d105      	bne.n	8006afc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d10b      	bne.n	8006b32 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d005      	beq.n	8006b62 <USBD_StdDevReq+0x26>
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d84f      	bhi.n	8006bfa <USBD_StdDevReq+0xbe>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <USBD_StdDevReq+0x36>
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d14b      	bne.n	8006bfa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	4798      	blx	r3
      break;
 8006b70:	e048      	b.n	8006c04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b09      	cmp	r3, #9
 8006b78:	d839      	bhi.n	8006bee <USBD_StdDevReq+0xb2>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <USBD_StdDevReq+0x44>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bd1 	.word	0x08006bd1
 8006b84:	08006be5 	.word	0x08006be5
 8006b88:	08006bef 	.word	0x08006bef
 8006b8c:	08006bdb 	.word	0x08006bdb
 8006b90:	08006bef 	.word	0x08006bef
 8006b94:	08006bb3 	.word	0x08006bb3
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006bef 	.word	0x08006bef
 8006ba0:	08006bc7 	.word	0x08006bc7
 8006ba4:	08006bbd 	.word	0x08006bbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f9dc 	bl	8006f68 <USBD_GetDescriptor>
          break;
 8006bb0:	e022      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fb3f 	bl	8007238 <USBD_SetAddress>
          break;
 8006bba:	e01d      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fb7e 	bl	80072c0 <USBD_SetConfig>
          break;
 8006bc4:	e018      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fc07 	bl	80073dc <USBD_GetConfig>
          break;
 8006bce:	e013      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fc37 	bl	8007446 <USBD_GetStatus>
          break;
 8006bd8:	e00e      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc65 	bl	80074ac <USBD_SetFeature>
          break;
 8006be2:	e009      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fc74 	bl	80074d4 <USBD_ClrFeature>
          break;
 8006bec:	e004      	b.n	8006bf8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fccc 	bl	800758e <USBD_CtlError>
          break;
 8006bf6:	bf00      	nop
      }
      break;
 8006bf8:	e004      	b.n	8006c04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fcc6 	bl	800758e <USBD_CtlError>
      break;
 8006c02:	bf00      	nop
  }

  return ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d005      	beq.n	8006c36 <USBD_StdItfReq+0x26>
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d82e      	bhi.n	8006c8c <USBD_StdItfReq+0x7c>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <USBD_StdItfReq+0x26>
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d12a      	bne.n	8006c8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d81d      	bhi.n	8006c7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	889b      	ldrh	r3, [r3, #4]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d813      	bhi.n	8006c74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	88db      	ldrh	r3, [r3, #6]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d110      	bne.n	8006c88 <USBD_StdItfReq+0x78>
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fd56 	bl	800771e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c72:	e009      	b.n	8006c88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fc89 	bl	800758e <USBD_CtlError>
          break;
 8006c7c:	e004      	b.n	8006c88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fc84 	bl	800758e <USBD_CtlError>
          break;
 8006c86:	e000      	b.n	8006c8a <USBD_StdItfReq+0x7a>
          break;
 8006c88:	bf00      	nop
      }
      break;
 8006c8a:	e004      	b.n	8006c96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fc7d 	bl	800758e <USBD_CtlError>
      break;
 8006c94:	bf00      	nop
  }

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	889b      	ldrh	r3, [r3, #4]
 8006cb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d007      	beq.n	8006cd0 <USBD_StdEPReq+0x30>
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	f200 8146 	bhi.w	8006f52 <USBD_StdEPReq+0x2b2>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <USBD_StdEPReq+0x40>
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	f040 8141 	bne.w	8006f52 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
      break;
 8006cde:	e13d      	b.n	8006f5c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d10a      	bne.n	8006d02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	e12d      	b.n	8006f5e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d007      	beq.n	8006d1a <USBD_StdEPReq+0x7a>
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f300 811b 	bgt.w	8006f46 <USBD_StdEPReq+0x2a6>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d072      	beq.n	8006dfa <USBD_StdEPReq+0x15a>
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d03a      	beq.n	8006d8e <USBD_StdEPReq+0xee>
 8006d18:	e115      	b.n	8006f46 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d002      	beq.n	8006d2a <USBD_StdEPReq+0x8a>
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d015      	beq.n	8006d54 <USBD_StdEPReq+0xb4>
 8006d28:	e02b      	b.n	8006d82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00c      	beq.n	8006d4a <USBD_StdEPReq+0xaa>
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b80      	cmp	r3, #128	; 0x80
 8006d34:	d009      	beq.n	8006d4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 f826 	bl	8007d8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d40:	2180      	movs	r1, #128	; 0x80
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 f822 	bl	8007d8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d48:	e020      	b.n	8006d8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc1e 	bl	800758e <USBD_CtlError>
              break;
 8006d52:	e01b      	b.n	8006d8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10e      	bne.n	8006d7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <USBD_StdEPReq+0xda>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d008      	beq.n	8006d7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	88db      	ldrh	r3, [r3, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f809 	bl	8007d8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fccf 	bl	800771e <USBD_CtlSendStatus>

              break;
 8006d80:	e004      	b.n	8006d8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc02 	bl	800758e <USBD_CtlError>
              break;
 8006d8a:	bf00      	nop
          }
          break;
 8006d8c:	e0e0      	b.n	8006f50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d002      	beq.n	8006d9e <USBD_StdEPReq+0xfe>
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d015      	beq.n	8006dc8 <USBD_StdEPReq+0x128>
 8006d9c:	e026      	b.n	8006dec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00c      	beq.n	8006dbe <USBD_StdEPReq+0x11e>
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d009      	beq.n	8006dbe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 ffec 	bl	8007d8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006db4:	2180      	movs	r1, #128	; 0x80
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 ffe8 	bl	8007d8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dbc:	e01c      	b.n	8006df8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fbe4 	bl	800758e <USBD_CtlError>
              break;
 8006dc6:	e017      	b.n	8006df8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	885b      	ldrh	r3, [r3, #2]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d112      	bne.n	8006df6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fff3 	bl	8007dca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc9a 	bl	800771e <USBD_CtlSendStatus>
              }
              break;
 8006dea:	e004      	b.n	8006df6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fbcd 	bl	800758e <USBD_CtlError>
              break;
 8006df4:	e000      	b.n	8006df8 <USBD_StdEPReq+0x158>
              break;
 8006df6:	bf00      	nop
          }
          break;
 8006df8:	e0aa      	b.n	8006f50 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d002      	beq.n	8006e0a <USBD_StdEPReq+0x16a>
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d032      	beq.n	8006e6e <USBD_StdEPReq+0x1ce>
 8006e08:	e097      	b.n	8006f3a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <USBD_StdEPReq+0x180>
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d004      	beq.n	8006e20 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fbb8 	bl	800758e <USBD_CtlError>
                break;
 8006e1e:	e091      	b.n	8006f44 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da0b      	bge.n	8006e40 <USBD_StdEPReq+0x1a0>
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	3310      	adds	r3, #16
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	e00b      	b.n	8006e58 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	3304      	adds	r3, #4
 8006e58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2202      	movs	r2, #2
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fbfb 	bl	8007662 <USBD_CtlSendData>
              break;
 8006e6c:	e06a      	b.n	8006f44 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da11      	bge.n	8006e9a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	3318      	adds	r3, #24
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d117      	bne.n	8006ec0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fb7b 	bl	800758e <USBD_CtlError>
                  break;
 8006e98:	e054      	b.n	8006f44 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	f003 020f 	and.w	r2, r3, #15
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb68 	bl	800758e <USBD_CtlError>
                  break;
 8006ebe:	e041      	b.n	8006f44 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da0b      	bge.n	8006ee0 <USBD_StdEPReq+0x240>
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	3304      	adds	r3, #4
 8006ede:	e00b      	b.n	8006ef8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <USBD_StdEPReq+0x266>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d103      	bne.n	8006f0e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e00e      	b.n	8006f2c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 ff78 	bl	8007e08 <USBD_LL_IsStallEP>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e002      	b.n	8006f2c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb95 	bl	8007662 <USBD_CtlSendData>
              break;
 8006f38:	e004      	b.n	8006f44 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fb26 	bl	800758e <USBD_CtlError>
              break;
 8006f42:	bf00      	nop
          }
          break;
 8006f44:	e004      	b.n	8006f50 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fb20 	bl	800758e <USBD_CtlError>
          break;
 8006f4e:	bf00      	nop
      }
      break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb1a 	bl	800758e <USBD_CtlError>
      break;
 8006f5a:	bf00      	nop
  }

  return ret;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	885b      	ldrh	r3, [r3, #2]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b06      	cmp	r3, #6
 8006f8a:	f200 8128 	bhi.w	80071de <USBD_GetDescriptor+0x276>
 8006f8e:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <USBD_GetDescriptor+0x2c>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	08006fb1 	.word	0x08006fb1
 8006f98:	08006fc9 	.word	0x08006fc9
 8006f9c:	08007009 	.word	0x08007009
 8006fa0:	080071df 	.word	0x080071df
 8006fa4:	080071df 	.word	0x080071df
 8006fa8:	0800717f 	.word	0x0800717f
 8006fac:	080071ab 	.word	0x080071ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7c12      	ldrb	r2, [r2, #16]
 8006fbc:	f107 0108 	add.w	r1, r7, #8
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	4798      	blx	r3
 8006fc4:	60f8      	str	r0, [r7, #12]
      break;
 8006fc6:	e112      	b.n	80071ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7c1b      	ldrb	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10d      	bne.n	8006fec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	f107 0208 	add.w	r2, r7, #8
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fea:	e100      	b.n	80071ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	f107 0208 	add.w	r2, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	2202      	movs	r2, #2
 8007004:	701a      	strb	r2, [r3, #0]
      break;
 8007006:	e0f2      	b.n	80071ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	885b      	ldrh	r3, [r3, #2]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b05      	cmp	r3, #5
 8007010:	f200 80ac 	bhi.w	800716c <USBD_GetDescriptor+0x204>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <USBD_GetDescriptor+0xb4>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007035 	.word	0x08007035
 8007020:	08007069 	.word	0x08007069
 8007024:	0800709d 	.word	0x0800709d
 8007028:	080070d1 	.word	0x080070d1
 800702c:	08007105 	.word	0x08007105
 8007030:	08007139 	.word	0x08007139
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007056:	e091      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa97 	bl	800758e <USBD_CtlError>
            err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
          break;
 8007066:	e089      	b.n	800717c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708a:	e077      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa7d 	bl	800758e <USBD_CtlError>
            err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
          break;
 800709a:	e06f      	b.n	800717c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	7c12      	ldrb	r2, [r2, #16]
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070be:	e05d      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa63 	bl	800758e <USBD_CtlError>
            err++;
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	3301      	adds	r3, #1
 80070cc:	72fb      	strb	r3, [r7, #11]
          break;
 80070ce:	e055      	b.n	800717c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f2:	e043      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa49 	bl	800758e <USBD_CtlError>
            err++;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	3301      	adds	r3, #1
 8007100:	72fb      	strb	r3, [r7, #11]
          break;
 8007102:	e03b      	b.n	800717c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7c12      	ldrb	r2, [r2, #16]
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
 8007124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007126:	e029      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa2f 	bl	800758e <USBD_CtlError>
            err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
          break;
 8007136:	e021      	b.n	800717c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7c12      	ldrb	r2, [r2, #16]
 8007150:	f107 0108 	add.w	r1, r7, #8
 8007154:	4610      	mov	r0, r2
 8007156:	4798      	blx	r3
 8007158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715a:	e00f      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa15 	bl	800758e <USBD_CtlError>
            err++;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	3301      	adds	r3, #1
 8007168:	72fb      	strb	r3, [r7, #11]
          break;
 800716a:	e007      	b.n	800717c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa0d 	bl	800758e <USBD_CtlError>
          err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800717a:	e038      	b.n	80071ee <USBD_GetDescriptor+0x286>
 800717c:	e037      	b.n	80071ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7c1b      	ldrb	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	f107 0208 	add.w	r2, r7, #8
 8007192:	4610      	mov	r0, r2
 8007194:	4798      	blx	r3
 8007196:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007198:	e029      	b.n	80071ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f9f6 	bl	800758e <USBD_CtlError>
        err++;
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	3301      	adds	r3, #1
 80071a6:	72fb      	strb	r3, [r7, #11]
      break;
 80071a8:	e021      	b.n	80071ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7c1b      	ldrb	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10d      	bne.n	80071ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	f107 0208 	add.w	r2, r7, #8
 80071be:	4610      	mov	r0, r2
 80071c0:	4798      	blx	r3
 80071c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	2207      	movs	r2, #7
 80071ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071cc:	e00f      	b.n	80071ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9dc 	bl	800758e <USBD_CtlError>
        err++;
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	3301      	adds	r3, #1
 80071da:	72fb      	strb	r3, [r7, #11]
      break;
 80071dc:	e007      	b.n	80071ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9d4 	bl	800758e <USBD_CtlError>
      err++;
 80071e6:	7afb      	ldrb	r3, [r7, #11]
 80071e8:	3301      	adds	r3, #1
 80071ea:	72fb      	strb	r3, [r7, #11]
      break;
 80071ec:	bf00      	nop
  }

  if (err != 0U)
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11c      	bne.n	800722e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80071f4:	893b      	ldrh	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d011      	beq.n	800721e <USBD_GetDescriptor+0x2b6>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	88db      	ldrh	r3, [r3, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	88da      	ldrh	r2, [r3, #6]
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	4293      	cmp	r3, r2
 800720a:	bf28      	it	cs
 800720c:	4613      	movcs	r3, r2
 800720e:	b29b      	uxth	r3, r3
 8007210:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007212:	893b      	ldrh	r3, [r7, #8]
 8007214:	461a      	mov	r2, r3
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fa22 	bl	8007662 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	88db      	ldrh	r3, [r3, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa79 	bl	800771e <USBD_CtlSendStatus>
 800722c:	e000      	b.n	8007230 <USBD_GetDescriptor+0x2c8>
    return;
 800722e:	bf00      	nop
    }
  }
}
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop

08007238 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	889b      	ldrh	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d130      	bne.n	80072ac <USBD_SetAddress+0x74>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	88db      	ldrh	r3, [r3, #6]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d12c      	bne.n	80072ac <USBD_SetAddress+0x74>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	2b7f      	cmp	r3, #127	; 0x7f
 8007258:	d828      	bhi.n	80072ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	885b      	ldrh	r3, [r3, #2]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007264:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	2b03      	cmp	r3, #3
 800726e:	d104      	bne.n	800727a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f98b 	bl	800758e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007278:	e01d      	b.n	80072b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7bfa      	ldrb	r2, [r7, #15]
 800727e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fdea 	bl	8007e60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa46 	bl	800771e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a0:	e009      	b.n	80072b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072aa:	e004      	b.n	80072b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f96d 	bl	800758e <USBD_CtlError>
  }
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	885b      	ldrh	r3, [r3, #2]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	4b41      	ldr	r3, [pc, #260]	; (80073d8 <USBD_SetConfig+0x118>)
 80072d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072d4:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <USBD_SetConfig+0x118>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d904      	bls.n	80072e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f955 	bl	800758e <USBD_CtlError>
 80072e4:	e075      	b.n	80073d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d002      	beq.n	80072f6 <USBD_SetConfig+0x36>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d023      	beq.n	800733c <USBD_SetConfig+0x7c>
 80072f4:	e062      	b.n	80073bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80072f6:	4b38      	ldr	r3, [pc, #224]	; (80073d8 <USBD_SetConfig+0x118>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01a      	beq.n	8007334 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80072fe:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <USBD_SetConfig+0x118>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2203      	movs	r2, #3
 800730c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007310:	4b31      	ldr	r3, [pc, #196]	; (80073d8 <USBD_SetConfig+0x118>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff f9e8 	bl	80066ec <USBD_SetClassConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	2b02      	cmp	r3, #2
 8007320:	d104      	bne.n	800732c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f932 	bl	800758e <USBD_CtlError>
            return;
 800732a:	e052      	b.n	80073d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9f6 	bl	800771e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007332:	e04e      	b.n	80073d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f9f2 	bl	800771e <USBD_CtlSendStatus>
        break;
 800733a:	e04a      	b.n	80073d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800733c:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <USBD_SetConfig+0x118>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d112      	bne.n	800736a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800734c:	4b22      	ldr	r3, [pc, #136]	; (80073d8 <USBD_SetConfig+0x118>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007356:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <USBD_SetConfig+0x118>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff f9e4 	bl	800672a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9db 	bl	800771e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007368:	e033      	b.n	80073d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <USBD_SetConfig+0x118>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d01d      	beq.n	80073b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff f9d2 	bl	800672a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <USBD_SetConfig+0x118>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <USBD_SetConfig+0x118>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff f9a8 	bl	80066ec <USBD_SetClassConfig>
 800739c:	4603      	mov	r3, r0
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d104      	bne.n	80073ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8f2 	bl	800758e <USBD_CtlError>
            return;
 80073aa:	e012      	b.n	80073d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9b6 	bl	800771e <USBD_CtlSendStatus>
        break;
 80073b2:	e00e      	b.n	80073d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9b2 	bl	800771e <USBD_CtlSendStatus>
        break;
 80073ba:	e00a      	b.n	80073d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f8e5 	bl	800758e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <USBD_SetConfig+0x118>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff f9ad 	bl	800672a <USBD_ClrClassConfig>
        break;
 80073d0:	bf00      	nop
    }
  }
}
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	2000023c 	.word	0x2000023c

080073dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	88db      	ldrh	r3, [r3, #6]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d004      	beq.n	80073f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f8cc 	bl	800758e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073f6:	e022      	b.n	800743e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fe:	2b02      	cmp	r3, #2
 8007400:	dc02      	bgt.n	8007408 <USBD_GetConfig+0x2c>
 8007402:	2b00      	cmp	r3, #0
 8007404:	dc03      	bgt.n	800740e <USBD_GetConfig+0x32>
 8007406:	e015      	b.n	8007434 <USBD_GetConfig+0x58>
 8007408:	2b03      	cmp	r3, #3
 800740a:	d00b      	beq.n	8007424 <USBD_GetConfig+0x48>
 800740c:	e012      	b.n	8007434 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3308      	adds	r3, #8
 8007418:	2201      	movs	r2, #1
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f920 	bl	8007662 <USBD_CtlSendData>
        break;
 8007422:	e00c      	b.n	800743e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	2201      	movs	r2, #1
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f918 	bl	8007662 <USBD_CtlSendData>
        break;
 8007432:	e004      	b.n	800743e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f8a9 	bl	800758e <USBD_CtlError>
        break;
 800743c:	bf00      	nop
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007456:	3b01      	subs	r3, #1
 8007458:	2b02      	cmp	r3, #2
 800745a:	d81e      	bhi.n	800749a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	88db      	ldrh	r3, [r3, #6]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d004      	beq.n	800746e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f891 	bl	800758e <USBD_CtlError>
        break;
 800746c:	e01a      	b.n	80074a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	330c      	adds	r3, #12
 800748e:	2202      	movs	r2, #2
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8e5 	bl	8007662 <USBD_CtlSendData>
      break;
 8007498:	e004      	b.n	80074a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f876 	bl	800758e <USBD_CtlError>
      break;
 80074a2:	bf00      	nop
  }
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d106      	bne.n	80074cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f929 	bl	800771e <USBD_CtlSendStatus>
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	3b01      	subs	r3, #1
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d80b      	bhi.n	8007502 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	885b      	ldrh	r3, [r3, #2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10c      	bne.n	800750c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f90f 	bl	800771e <USBD_CtlSendStatus>
      }
      break;
 8007500:	e004      	b.n	800750c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f842 	bl	800758e <USBD_CtlError>
      break;
 800750a:	e000      	b.n	800750e <USBD_ClrFeature+0x3a>
      break;
 800750c:	bf00      	nop
  }
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	785a      	ldrb	r2, [r3, #1]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	3302      	adds	r3, #2
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b29a      	uxth	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	3303      	adds	r3, #3
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	b29b      	uxth	r3, r3
 8007544:	4413      	add	r3, r2
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	3304      	adds	r3, #4
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b29a      	uxth	r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	3305      	adds	r3, #5
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	b29b      	uxth	r3, r3
 8007560:	4413      	add	r3, r2
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	3306      	adds	r3, #6
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	3307      	adds	r3, #7
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b29b      	uxth	r3, r3
 800757c:	4413      	add	r3, r2
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	80da      	strh	r2, [r3, #6]

}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr

0800758e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fbf6 	bl	8007d8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fbf2 	bl	8007d8c <USBD_LL_StallEP>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d032      	beq.n	800762c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f834 	bl	8007634 <USBD_GetLen>
 80075cc:	4603      	mov	r3, r0
 80075ce:	3301      	adds	r3, #1
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	75fa      	strb	r2, [r7, #23]
 80075e0:	461a      	mov	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	75fa      	strb	r2, [r7, #23]
 80075f2:	461a      	mov	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4413      	add	r3, r2
 80075f8:	2203      	movs	r2, #3
 80075fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80075fc:	e012      	b.n	8007624 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	60fa      	str	r2, [r7, #12]
 8007604:	7dfa      	ldrb	r2, [r7, #23]
 8007606:	1c51      	adds	r1, r2, #1
 8007608:	75f9      	strb	r1, [r7, #23]
 800760a:	4611      	mov	r1, r2
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	440a      	add	r2, r1
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	75fa      	strb	r2, [r7, #23]
 800761a:	461a      	mov	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4413      	add	r3, r2
 8007620:	2200      	movs	r2, #0
 8007622:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e8      	bne.n	80075fe <USBD_GetString+0x4e>
    }
  }
}
 800762c:	bf00      	nop
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007640:	e005      	b.n	800764e <USBD_GetLen+0x1a>
  {
    len++;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	3301      	adds	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3301      	adds	r3, #1
 800764c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f5      	bne.n	8007642 <USBD_GetLen+0xe>
  }

  return len;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr

08007662 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	4613      	mov	r3, r2
 800766e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2202      	movs	r2, #2
 8007674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007678:	88fa      	ldrh	r2, [r7, #6]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fc07 	bl	8007e9e <USBD_LL_Transmit>

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	4613      	mov	r3, r2
 80076a6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076a8:	88fb      	ldrh	r3, [r7, #6]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	2100      	movs	r1, #0
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fbf5 	bl	8007e9e <USBD_LL_Transmit>

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	4613      	mov	r3, r2
 80076ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2203      	movs	r2, #3
 80076d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	2100      	movs	r1, #0
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fbfa 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	4613      	mov	r3, r2
 8007706:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	2100      	movs	r1, #0
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fbe8 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2204      	movs	r2, #4
 800772a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800772e:	2300      	movs	r3, #0
 8007730:	2200      	movs	r2, #0
 8007732:	2100      	movs	r1, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fbb2 	bl	8007e9e <USBD_LL_Transmit>

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2205      	movs	r2, #5
 8007750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	2100      	movs	r1, #0
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fbc2 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007770:	2200      	movs	r2, #0
 8007772:	4912      	ldr	r1, [pc, #72]	; (80077bc <MX_USB_DEVICE_Init+0x50>)
 8007774:	4812      	ldr	r0, [pc, #72]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 8007776:	f7fe ff5f 	bl	8006638 <USBD_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007780:	f7f8 fe56 	bl	8000430 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007784:	490f      	ldr	r1, [pc, #60]	; (80077c4 <MX_USB_DEVICE_Init+0x58>)
 8007786:	480e      	ldr	r0, [pc, #56]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 8007788:	f7fe ff81 	bl	800668e <USBD_RegisterClass>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007792:	f7f8 fe4d 	bl	8000430 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007796:	490c      	ldr	r1, [pc, #48]	; (80077c8 <MX_USB_DEVICE_Init+0x5c>)
 8007798:	4809      	ldr	r0, [pc, #36]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 800779a:	f7fe ff37 	bl	800660c <USBD_CUSTOM_HID_RegisterInterface>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077a4:	f7f8 fe44 	bl	8000430 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <MX_USB_DEVICE_Init+0x54>)
 80077aa:	f7fe ff89 	bl	80066c0 <USBD_Start>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077b4:	f7f8 fe3c 	bl	8000430 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077b8:	bf00      	nop
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	20000194 	.word	0x20000194
 80077c0:	20000240 	.word	0x20000240
 80077c4:	2000000c 	.word	0x2000000c
 80077c8:	20000184 	.word	0x20000184

080077cc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr

080077da <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80077de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	460a      	mov	r2, r1
 80077f2:	71fb      	strb	r3, [r7, #7]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	  switch (event_idx)
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d82d      	bhi.n	800785c <CUSTOM_HID_OutEvent_FS+0x74>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <CUSTOM_HID_OutEvent_FS+0x20>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	08007819 	.word	0x08007819
 800780c:	0800783b 	.word	0x0800783b
 8007810:	08007877 	.word	0x08007877
 8007814:	08007877 	.word	0x08007877
	  {
	  case 1:                      /* LED1 */
	    (state == 1) ? HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET) : HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8007818:	79bb      	ldrb	r3, [r7, #6]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d106      	bne.n	800782c <CUSTOM_HID_OutEvent_FS+0x44>
 800781e:	2200      	movs	r2, #0
 8007820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007824:	4817      	ldr	r0, [pc, #92]	; (8007884 <CUSTOM_HID_OutEvent_FS+0x9c>)
 8007826:	f7f9 fe5c 	bl	80014e2 <HAL_GPIO_WritePin>
	    break;
 800782a:	e025      	b.n	8007878 <CUSTOM_HID_OutEvent_FS+0x90>
	    (state == 1) ? HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET) : HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 800782c:	2201      	movs	r2, #1
 800782e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007832:	4814      	ldr	r0, [pc, #80]	; (8007884 <CUSTOM_HID_OutEvent_FS+0x9c>)
 8007834:	f7f9 fe55 	bl	80014e2 <HAL_GPIO_WritePin>
	    break;
 8007838:	e01e      	b.n	8007878 <CUSTOM_HID_OutEvent_FS+0x90>

	  case 2:                      /* LED2 */
	    (state == 1) ? HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET) : HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 800783a:	79bb      	ldrb	r3, [r7, #6]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d106      	bne.n	800784e <CUSTOM_HID_OutEvent_FS+0x66>
 8007840:	2200      	movs	r2, #0
 8007842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007846:	4810      	ldr	r0, [pc, #64]	; (8007888 <CUSTOM_HID_OutEvent_FS+0xa0>)
 8007848:	f7f9 fe4b 	bl	80014e2 <HAL_GPIO_WritePin>
	    break;
 800784c:	e014      	b.n	8007878 <CUSTOM_HID_OutEvent_FS+0x90>
	    (state == 1) ? HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET) : HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 800784e:	2201      	movs	r2, #1
 8007850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007854:	480c      	ldr	r0, [pc, #48]	; (8007888 <CUSTOM_HID_OutEvent_FS+0xa0>)
 8007856:	f7f9 fe44 	bl	80014e2 <HAL_GPIO_WritePin>
	    break;
 800785a:	e00d      	b.n	8007878 <CUSTOM_HID_OutEvent_FS+0x90>
	  case 4:                      /* LED4 */
	    //(state == 1) ? BSP_LED_On(LED4) : BSP_LED_Off(LED4);
	    break;

	  default:
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 800785c:	2200      	movs	r2, #0
 800785e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007862:	4808      	ldr	r0, [pc, #32]	; (8007884 <CUSTOM_HID_OutEvent_FS+0x9c>)
 8007864:	f7f9 fe3d 	bl	80014e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800786e:	4806      	ldr	r0, [pc, #24]	; (8007888 <CUSTOM_HID_OutEvent_FS+0xa0>)
 8007870:	f7f9 fe37 	bl	80014e2 <HAL_GPIO_WritePin>
	    //BSP_LED_Off(LED3);
	    //BSP_LED_Off(LED4);
	    break;
 8007874:	e000      	b.n	8007878 <CUSTOM_HID_OutEvent_FS+0x90>
	    break;
 8007876:	bf00      	nop
	  }


	return (USBD_OK);
 8007878:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40010c00 	.word	0x40010c00
 8007888:	40011000 	.word	0x40011000

0800788c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2212      	movs	r2, #18
 800789c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800789e:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	200001b0 	.word	0x200001b0

080078b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2204      	movs	r2, #4
 80078c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078c2:	4b03      	ldr	r3, [pc, #12]	; (80078d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	200001c4 	.word	0x200001c4

080078d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	4907      	ldr	r1, [pc, #28]	; (8007908 <USBD_FS_ProductStrDescriptor+0x34>)
 80078ea:	4808      	ldr	r0, [pc, #32]	; (800790c <USBD_FS_ProductStrDescriptor+0x38>)
 80078ec:	f7ff fe60 	bl	80075b0 <USBD_GetString>
 80078f0:	e004      	b.n	80078fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4904      	ldr	r1, [pc, #16]	; (8007908 <USBD_FS_ProductStrDescriptor+0x34>)
 80078f6:	4805      	ldr	r0, [pc, #20]	; (800790c <USBD_FS_ProductStrDescriptor+0x38>)
 80078f8:	f7ff fe5a 	bl	80075b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000504 	.word	0x20000504
 800790c:	08008034 	.word	0x08008034

08007910 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	4904      	ldr	r1, [pc, #16]	; (8007930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007920:	4804      	ldr	r0, [pc, #16]	; (8007934 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007922:	f7ff fe45 	bl	80075b0 <USBD_GetString>
  return USBD_StrDesc;
 8007926:	4b02      	ldr	r3, [pc, #8]	; (8007930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000504 	.word	0x20000504
 8007934:	08008054 	.word	0x08008054

08007938 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	221a      	movs	r2, #26
 8007948:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800794a:	f000 f843 	bl	80079d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800794e:	4b02      	ldr	r3, [pc, #8]	; (8007958 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200001c8 	.word	0x200001c8

0800795c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4907      	ldr	r1, [pc, #28]	; (8007990 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007972:	4808      	ldr	r0, [pc, #32]	; (8007994 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007974:	f7ff fe1c 	bl	80075b0 <USBD_GetString>
 8007978:	e004      	b.n	8007984 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4904      	ldr	r1, [pc, #16]	; (8007990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007980:	f7ff fe16 	bl	80075b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000504 	.word	0x20000504
 8007994:	08008068 	.word	0x08008068

08007998 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4907      	ldr	r1, [pc, #28]	; (80079cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ae:	4808      	ldr	r0, [pc, #32]	; (80079d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b0:	f7ff fdfe 	bl	80075b0 <USBD_GetString>
 80079b4:	e004      	b.n	80079c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4904      	ldr	r1, [pc, #16]	; (80079cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ba:	4805      	ldr	r0, [pc, #20]	; (80079d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079bc:	f7ff fdf8 	bl	80075b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000504 	.word	0x20000504
 80079d0:	0800807c 	.word	0x0800807c

080079d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <Get_SerialNum+0x44>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <Get_SerialNum+0x48>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079e6:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <Get_SerialNum+0x4c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079fa:	2208      	movs	r2, #8
 80079fc:	4909      	ldr	r1, [pc, #36]	; (8007a24 <Get_SerialNum+0x50>)
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 f814 	bl	8007a2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a04:	2204      	movs	r2, #4
 8007a06:	4908      	ldr	r1, [pc, #32]	; (8007a28 <Get_SerialNum+0x54>)
 8007a08:	68b8      	ldr	r0, [r7, #8]
 8007a0a:	f000 f80f 	bl	8007a2c <IntToUnicode>
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	1ffff7e8 	.word	0x1ffff7e8
 8007a1c:	1ffff7ec 	.word	0x1ffff7ec
 8007a20:	1ffff7f0 	.word	0x1ffff7f0
 8007a24:	200001ca 	.word	0x200001ca
 8007a28:	200001da 	.word	0x200001da

08007a2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	75fb      	strb	r3, [r7, #23]
 8007a42:	e027      	b.n	8007a94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	0f1b      	lsrs	r3, r3, #28
 8007a48:	2b09      	cmp	r3, #9
 8007a4a:	d80b      	bhi.n	8007a64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	0f1b      	lsrs	r3, r3, #28
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4619      	mov	r1, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	440b      	add	r3, r1
 8007a5c:	3230      	adds	r2, #48	; 0x30
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e00a      	b.n	8007a7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	0f1b      	lsrs	r3, r3, #28
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	4619      	mov	r1, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	440b      	add	r3, r1
 8007a74:	3237      	adds	r2, #55	; 0x37
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	3301      	adds	r3, #1
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	4413      	add	r3, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	3301      	adds	r3, #1
 8007a92:	75fb      	strb	r3, [r7, #23]
 8007a94:	7dfa      	ldrb	r2, [r7, #23]
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d3d3      	bcc.n	8007a44 <IntToUnicode+0x18>
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	; (8007aec <HAL_PCD_MspInit+0x44>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d113      	bne.n	8007ae2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007aba:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <HAL_PCD_MspInit+0x48>)
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <HAL_PCD_MspInit+0x48>)
 8007ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ac4:	61d3      	str	r3, [r2, #28]
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <HAL_PCD_MspInit+0x48>)
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	2014      	movs	r0, #20
 8007ad8:	f7f9 fb31 	bl	800113e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007adc:	2014      	movs	r0, #20
 8007ade:	f7f9 fb4a 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40005c00 	.word	0x40005c00
 8007af0:	40021000 	.word	0x40021000

08007af4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f7fe fe20 	bl	8006750 <USBD_LL_SetupStage>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	440b      	add	r3, r1
 8007b38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	4619      	mov	r1, r3
 8007b42:	f7fe fe52 	bl	80067ea <USBD_LL_DataOutStage>
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	440b      	add	r3, r1
 8007b6e:	333c      	adds	r3, #60	; 0x3c
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7fe fea9 	bl	80068cc <USBD_LL_DataInStage>
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe ffb9 	bl	8006b08 <USBD_LL_SOF>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d001      	beq.n	8007bb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bb2:	f7f8 fc3d 	bl	8000430 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007bbc:	7bfa      	ldrb	r2, [r7, #15]
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe ff69 	bl	8006a98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fe ff22 	bl	8006a16 <USBD_LL_Reset>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe ff63 	bl	8006ab6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bf8:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <HAL_PCD_SuspendCallback+0x30>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4a03      	ldr	r2, [pc, #12]	; (8007c0c <HAL_PCD_SuspendCallback+0x30>)
 8007bfe:	f043 0306 	orr.w	r3, r3, #6
 8007c02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	e000ed00 	.word	0xe000ed00

08007c10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe ff5d 	bl	8006ade <USBD_LL_Resume>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c34:	4a23      	ldr	r2, [pc, #140]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a21      	ldr	r2, [pc, #132]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c44:	4b1f      	ldr	r3, [pc, #124]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c46:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <USBD_LL_Init+0x9c>)
 8007c48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c4a:	4b1e      	ldr	r3, [pc, #120]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c50:	4b1c      	ldr	r3, [pc, #112]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c52:	2202      	movs	r2, #2
 8007c54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c56:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c5c:	4b19      	ldr	r3, [pc, #100]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c62:	4b18      	ldr	r3, [pc, #96]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c68:	4816      	ldr	r0, [pc, #88]	; (8007cc4 <USBD_LL_Init+0x98>)
 8007c6a:	f7f9 fc52 	bl	8001512 <HAL_PCD_Init>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c74:	f7f8 fbdc 	bl	8000430 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c7e:	2318      	movs	r3, #24
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	f7fb f95a 	bl	8002f3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c8e:	2358      	movs	r3, #88	; 0x58
 8007c90:	2200      	movs	r2, #0
 8007c92:	2180      	movs	r1, #128	; 0x80
 8007c94:	f7fb f952 	bl	8002f3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c9e:	2398      	movs	r3, #152	; 0x98
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2181      	movs	r1, #129	; 0x81
 8007ca4:	f7fb f94a 	bl	8002f3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cae:	23d8      	movs	r3, #216	; 0xd8
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	f7fb f942 	bl	8002f3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000604 	.word	0x20000604
 8007cc8:	40005c00 	.word	0x40005c00

08007ccc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f9 fd14 	bl	8001710 <HAL_PCD_Start>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f93c 	bl	8007f6c <USBD_Get_USB_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4603      	mov	r3, r0
 8007d12:	70fb      	strb	r3, [r7, #3]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70bb      	strb	r3, [r7, #2]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d2a:	78bb      	ldrb	r3, [r7, #2]
 8007d2c:	883a      	ldrh	r2, [r7, #0]
 8007d2e:	78f9      	ldrb	r1, [r7, #3]
 8007d30:	f7f9 fe69 	bl	8001a06 <HAL_PCD_EP_Open>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f916 	bl	8007f6c <USBD_Get_USB_Status>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f9 fea7 	bl	8001ac0 <HAL_PCD_EP_Close>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 f8f7 	bl	8007f6c <USBD_Get_USB_Status>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f9 ff38 	bl	8001c20 <HAL_PCD_EP_SetStall>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f8d8 	bl	8007f6c <USBD_Get_USB_Status>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7f9 ff79 	bl	8001ce0 <HAL_PCD_EP_ClrStall>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f8b9 	bl	8007f6c <USBD_Get_USB_Status>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da0c      	bge.n	8007e3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	440b      	add	r3, r1
 8007e38:	3302      	adds	r3, #2
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	e00b      	b.n	8007e56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	440b      	add	r3, r1
 8007e50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e54:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bc80      	pop	{r7}
 8007e5e:	4770      	bx	lr

08007e60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f9 fd9c 	bl	80019bc <HAL_PCD_SetAddress>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f86e 	bl	8007f6c <USBD_Get_USB_Status>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	460b      	mov	r3, r1
 8007eac:	72fb      	strb	r3, [r7, #11]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ec0:	893b      	ldrh	r3, [r7, #8]
 8007ec2:	7af9      	ldrb	r1, [r7, #11]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f7f9 fe74 	bl	8001bb2 <HAL_PCD_EP_Transmit>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f84b 	bl	8007f6c <USBD_Get_USB_Status>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	72fb      	strb	r3, [r7, #11]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f06:	893b      	ldrh	r3, [r7, #8]
 8007f08:	7af9      	ldrb	r1, [r7, #11]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	f7f9 fe20 	bl	8001b50 <HAL_PCD_EP_Receive>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f828 	bl	8007f6c <USBD_Get_USB_Status>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f20:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007f34:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <USBD_static_malloc+0x14>)
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr
 8007f40:	200008f4 	.word	0x200008f4

08007f44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]

}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr

08007f56 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d817      	bhi.n	8007fb0 <USBD_Get_USB_Status+0x44>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <USBD_Get_USB_Status+0x1c>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007f9f 	.word	0x08007f9f
 8007f90:	08007fa5 	.word	0x08007fa5
 8007f94:	08007fab 	.word	0x08007fab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9c:	e00b      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa2:	e008      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	e005      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007faa:	2302      	movs	r3, #2
 8007fac:	73fb      	strb	r3, [r7, #15]
    break;
 8007fae:	e002      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	bf00      	nop
  }
  return usb_status;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop

08007fc4 <memset>:
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	4402      	add	r2, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <__libc_init_array>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	4d0c      	ldr	r5, [pc, #48]	; (800800c <__libc_init_array+0x38>)
 8007fda:	4c0d      	ldr	r4, [pc, #52]	; (8008010 <__libc_init_array+0x3c>)
 8007fdc:	1b64      	subs	r4, r4, r5
 8007fde:	10a4      	asrs	r4, r4, #2
 8007fe0:	42a6      	cmp	r6, r4
 8007fe2:	d109      	bne.n	8007ff8 <__libc_init_array+0x24>
 8007fe4:	f000 f81a 	bl	800801c <_init>
 8007fe8:	2600      	movs	r6, #0
 8007fea:	4d0a      	ldr	r5, [pc, #40]	; (8008014 <__libc_init_array+0x40>)
 8007fec:	4c0a      	ldr	r4, [pc, #40]	; (8008018 <__libc_init_array+0x44>)
 8007fee:	1b64      	subs	r4, r4, r5
 8007ff0:	10a4      	asrs	r4, r4, #2
 8007ff2:	42a6      	cmp	r6, r4
 8007ff4:	d105      	bne.n	8008002 <__libc_init_array+0x2e>
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffc:	4798      	blx	r3
 8007ffe:	3601      	adds	r6, #1
 8008000:	e7ee      	b.n	8007fe0 <__libc_init_array+0xc>
 8008002:	f855 3b04 	ldr.w	r3, [r5], #4
 8008006:	4798      	blx	r3
 8008008:	3601      	adds	r6, #1
 800800a:	e7f2      	b.n	8007ff2 <__libc_init_array+0x1e>
 800800c:	080080d4 	.word	0x080080d4
 8008010:	080080d4 	.word	0x080080d4
 8008014:	080080d4 	.word	0x080080d4
 8008018:	080080d8 	.word	0x080080d8

0800801c <_init>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr

08008028 <_fini>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr
