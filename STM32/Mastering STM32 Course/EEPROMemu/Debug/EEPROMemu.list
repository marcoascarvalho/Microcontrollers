
EEPROMemu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ed0  08001ed0  00011ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef4  08001ef4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001ef4  08001ef4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ef4  08001ef4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000018  08001f10  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001f10  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b72  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001478  00000000  00000000  00023bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  00025070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003d7  00000000  00000000  000255b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016564  00000000  00000000  0002598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000069b0  00000000  00000000  0003bef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007db13  00000000  00000000  000428a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000012d8  00000000  00000000  000c03b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c1690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001eb8 	.word	0x08001eb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001eb8 	.word	0x08001eb8

0800014c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8000152:	2306      	movs	r3, #6
 8000154:	847b      	strh	r3, [r7, #34]	; 0x22
 8000156:	2306      	movs	r3, #6
 8000158:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	83fb      	strh	r3, [r7, #30]
 8000162:	2300      	movs	r3, #0
 8000164:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8000166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000170:	4ba0      	ldr	r3, [pc, #640]	; (80003f4 <EE_Init+0x2a8>)
 8000172:	881b      	ldrh	r3, [r3, #0]
 8000174:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000176:	4ba0      	ldr	r3, [pc, #640]	; (80003f8 <EE_Init+0x2ac>)
 8000178:	881b      	ldrh	r3, [r3, #0]
 800017a:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800017c:	2300      	movs	r3, #0
 800017e:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 8000180:	4b9c      	ldr	r3, [pc, #624]	; (80003f4 <EE_Init+0x2a8>)
 8000182:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 8000184:	2301      	movs	r3, #1
 8000186:	613b      	str	r3, [r7, #16]

  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 8000188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800018a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800018e:	4293      	cmp	r3, r2
 8000190:	d00b      	beq.n	80001aa <EE_Init+0x5e>
 8000192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000196:	f280 8196 	bge.w	80004c6 <EE_Init+0x37a>
 800019a:	2b00      	cmp	r3, #0
 800019c:	f000 80f8 	beq.w	8000390 <EE_Init+0x244>
 80001a0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d050      	beq.n	800024a <EE_Init+0xfe>
 80001a8:	e18d      	b.n	80004c6 <EE_Init+0x37a>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80001aa:	8c3b      	ldrh	r3, [r7, #32]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d116      	bne.n	80001de <EE_Init+0x92>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80001b0:	4890      	ldr	r0, [pc, #576]	; (80003f4 <EE_Init+0x2a8>)
 80001b2:	f000 f9a9 	bl	8000508 <EE_VerifyPageFullyErased>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 818e 	bne.w	80004da <EE_Init+0x38e>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80001be:	f107 0214 	add.w	r2, r7, #20
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4611      	mov	r1, r2
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 f828 	bl	800121c <HAL_FLASHEx_Erase>
 80001cc:	4603      	mov	r3, r0
 80001ce:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80001d0:	7efb      	ldrb	r3, [r7, #27]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	f000 8181 	beq.w	80004da <EE_Init+0x38e>
          {
            return flashstatus;
 80001d8:	7efb      	ldrb	r3, [r7, #27]
 80001da:	b29b      	uxth	r3, r3
 80001dc:	e185      	b.n	80004ea <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80001de:	8c3b      	ldrh	r3, [r7, #32]
 80001e0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d125      	bne.n	8000234 <EE_Init+0xe8>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80001e8:	4882      	ldr	r0, [pc, #520]	; (80003f4 <EE_Init+0x2a8>)
 80001ea:	f000 f98d 	bl	8000508 <EE_VerifyPageFullyErased>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d10e      	bne.n	8000212 <EE_Init+0xc6>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80001f4:	f107 0214 	add.w	r2, r7, #20
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	4611      	mov	r1, r2
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 f80d 	bl	800121c <HAL_FLASHEx_Erase>
 8000202:	4603      	mov	r3, r0
 8000204:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8000206:	7efb      	ldrb	r3, [r7, #27]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d002      	beq.n	8000212 <EE_Init+0xc6>
          {
            return flashstatus;
 800020c:	7efb      	ldrb	r3, [r7, #27]
 800020e:	b29b      	uxth	r3, r3
 8000210:	e16b      	b.n	80004ea <EE_Init+0x39e>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000212:	f04f 0200 	mov.w	r2, #0
 8000216:	f04f 0300 	mov.w	r3, #0
 800021a:	4977      	ldr	r1, [pc, #476]	; (80003f8 <EE_Init+0x2ac>)
 800021c:	2001      	movs	r0, #1
 800021e:	f000 feb5 	bl	8000f8c <HAL_FLASH_Program>
 8000222:	4603      	mov	r3, r0
 8000224:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000226:	7efb      	ldrb	r3, [r7, #27]
 8000228:	2b00      	cmp	r3, #0
 800022a:	f000 8156 	beq.w	80004da <EE_Init+0x38e>
        {
          return flashstatus;
 800022e:	7efb      	ldrb	r3, [r7, #27]
 8000230:	b29b      	uxth	r3, r3
 8000232:	e15a      	b.n	80004ea <EE_Init+0x39e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000234:	f000 f9fa 	bl	800062c <EE_Format>
 8000238:	4603      	mov	r3, r0
 800023a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800023c:	7efb      	ldrb	r3, [r7, #27]
 800023e:	2b00      	cmp	r3, #0
 8000240:	f000 814b 	beq.w	80004da <EE_Init+0x38e>
        {
          return flashstatus;
 8000244:	7efb      	ldrb	r3, [r7, #27]
 8000246:	b29b      	uxth	r3, r3
 8000248:	e14f      	b.n	80004ea <EE_Init+0x39e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800024a:	8c3b      	ldrh	r3, [r7, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d163      	bne.n	8000318 <EE_Init+0x1cc>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000250:	2300      	movs	r3, #0
 8000252:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000254:	e030      	b.n	80002b8 <EE_Init+0x16c>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000256:	4b69      	ldr	r3, [pc, #420]	; (80003fc <EE_Init+0x2b0>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	b29a      	uxth	r2, r3
 800025c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800025e:	4968      	ldr	r1, [pc, #416]	; (8000400 <EE_Init+0x2b4>)
 8000260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000264:	429a      	cmp	r2, r3
 8000266:	d101      	bne.n	800026c <EE_Init+0x120>
          {
            x = varidx;
 8000268:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800026a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 800026c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800026e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000272:	429a      	cmp	r2, r3
 8000274:	d01d      	beq.n	80002b2 <EE_Init+0x166>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000278:	4a61      	ldr	r2, [pc, #388]	; (8000400 <EE_Init+0x2b4>)
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	4961      	ldr	r1, [pc, #388]	; (8000404 <EE_Init+0x2b8>)
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f967 	bl	8000554 <EE_ReadVariable>
 8000286:	4603      	mov	r3, r0
 8000288:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 800028a:	8bbb      	ldrh	r3, [r7, #28]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d010      	beq.n	80002b2 <EE_Init+0x166>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000290:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000292:	4a5b      	ldr	r2, [pc, #364]	; (8000400 <EE_Init+0x2b4>)
 8000294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000298:	4a5a      	ldr	r2, [pc, #360]	; (8000404 <EE_Init+0x2b8>)
 800029a:	8812      	ldrh	r2, [r2, #0]
 800029c:	4611      	mov	r1, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa58 	bl	8000754 <EE_VerifyPageFullWriteVariable>
 80002a4:	4603      	mov	r3, r0
 80002a6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 80002a8:	8bfb      	ldrh	r3, [r7, #30]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <EE_Init+0x166>
              {
                return eepromstatus;
 80002ae:	8bfb      	ldrh	r3, [r7, #30]
 80002b0:	e11b      	b.n	80004ea <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80002b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80002b4:	3301      	adds	r3, #1
 80002b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80002b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d9cb      	bls.n	8000256 <EE_Init+0x10a>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80002be:	f04f 0200 	mov.w	r2, #0
 80002c2:	f04f 0300 	mov.w	r3, #0
 80002c6:	494b      	ldr	r1, [pc, #300]	; (80003f4 <EE_Init+0x2a8>)
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 fe5f 	bl	8000f8c <HAL_FLASH_Program>
 80002ce:	4603      	mov	r3, r0
 80002d0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80002d2:	7efb      	ldrb	r3, [r7, #27]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d002      	beq.n	80002de <EE_Init+0x192>
        {
          return flashstatus;
 80002d8:	7efb      	ldrb	r3, [r7, #27]
 80002da:	b29b      	uxth	r3, r3
 80002dc:	e105      	b.n	80004ea <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80002e2:	4b45      	ldr	r3, [pc, #276]	; (80003f8 <EE_Init+0x2ac>)
 80002e4:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80002ea:	4843      	ldr	r0, [pc, #268]	; (80003f8 <EE_Init+0x2ac>)
 80002ec:	f000 f90c 	bl	8000508 <EE_VerifyPageFullyErased>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 80f3 	bne.w	80004de <EE_Init+0x392>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80002f8:	f107 0214 	add.w	r2, r7, #20
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4611      	mov	r1, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f000 ff8b 	bl	800121c <HAL_FLASHEx_Erase>
 8000306:	4603      	mov	r3, r0
 8000308:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800030a:	7efb      	ldrb	r3, [r7, #27]
 800030c:	2b00      	cmp	r3, #0
 800030e:	f000 80e6 	beq.w	80004de <EE_Init+0x392>
          {
            return flashstatus;
 8000312:	7efb      	ldrb	r3, [r7, #27]
 8000314:	b29b      	uxth	r3, r3
 8000316:	e0e8      	b.n	80004ea <EE_Init+0x39e>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000318:	8c3b      	ldrh	r3, [r7, #32]
 800031a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800031e:	4293      	cmp	r3, r2
 8000320:	d12b      	bne.n	800037a <EE_Init+0x22e>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <EE_Init+0x2ac>)
 8000328:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 800032a:	2301      	movs	r3, #1
 800032c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800032e:	4832      	ldr	r0, [pc, #200]	; (80003f8 <EE_Init+0x2ac>)
 8000330:	f000 f8ea 	bl	8000508 <EE_VerifyPageFullyErased>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d10e      	bne.n	8000358 <EE_Init+0x20c>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800033a:	f107 0214 	add.w	r2, r7, #20
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4611      	mov	r1, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f000 ff6a 	bl	800121c <HAL_FLASHEx_Erase>
 8000348:	4603      	mov	r3, r0
 800034a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800034c:	7efb      	ldrb	r3, [r7, #27]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d002      	beq.n	8000358 <EE_Init+0x20c>
          {
            return flashstatus;
 8000352:	7efb      	ldrb	r3, [r7, #27]
 8000354:	b29b      	uxth	r3, r3
 8000356:	e0c8      	b.n	80004ea <EE_Init+0x39e>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000358:	f04f 0200 	mov.w	r2, #0
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	4924      	ldr	r1, [pc, #144]	; (80003f4 <EE_Init+0x2a8>)
 8000362:	2001      	movs	r0, #1
 8000364:	f000 fe12 	bl	8000f8c <HAL_FLASH_Program>
 8000368:	4603      	mov	r3, r0
 800036a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800036c:	7efb      	ldrb	r3, [r7, #27]
 800036e:	2b00      	cmp	r3, #0
 8000370:	f000 80b5 	beq.w	80004de <EE_Init+0x392>
        {
          return flashstatus;
 8000374:	7efb      	ldrb	r3, [r7, #27]
 8000376:	b29b      	uxth	r3, r3
 8000378:	e0b7      	b.n	80004ea <EE_Init+0x39e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 800037a:	f000 f957 	bl	800062c <EE_Format>
 800037e:	4603      	mov	r3, r0
 8000380:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000382:	7efb      	ldrb	r3, [r7, #27]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f000 80aa 	beq.w	80004de <EE_Init+0x392>
        {
          return flashstatus;
 800038a:	7efb      	ldrb	r3, [r7, #27]
 800038c:	b29b      	uxth	r3, r3
 800038e:	e0ac      	b.n	80004ea <EE_Init+0x39e>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000390:	8c3b      	ldrh	r3, [r7, #32]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <EE_Init+0x260>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8000396:	f000 f949 	bl	800062c <EE_Format>
 800039a:	4603      	mov	r3, r0
 800039c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800039e:	7efb      	ldrb	r3, [r7, #27]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f000 809e 	beq.w	80004e2 <EE_Init+0x396>
        {
          return flashstatus;
 80003a6:	7efb      	ldrb	r3, [r7, #27]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	e09e      	b.n	80004ea <EE_Init+0x39e>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80003ac:	8c3b      	ldrh	r3, [r7, #32]
 80003ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d11b      	bne.n	80003ee <EE_Init+0x2a2>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <EE_Init+0x2ac>)
 80003bc:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80003c2:	480d      	ldr	r0, [pc, #52]	; (80003f8 <EE_Init+0x2ac>)
 80003c4:	f000 f8a0 	bl	8000508 <EE_VerifyPageFullyErased>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8089 	bne.w	80004e2 <EE_Init+0x396>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80003d0:	f107 0214 	add.w	r2, r7, #20
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 ff1f 	bl	800121c <HAL_FLASHEx_Erase>
 80003de:	4603      	mov	r3, r0
 80003e0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80003e2:	7efb      	ldrb	r3, [r7, #27]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d07c      	beq.n	80004e2 <EE_Init+0x396>
          {
            return flashstatus;
 80003e8:	7efb      	ldrb	r3, [r7, #27]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	e07d      	b.n	80004ea <EE_Init+0x39e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80003f2:	e03a      	b.n	800046a <EE_Init+0x31e>
 80003f4:	08008000 	.word	0x08008000
 80003f8:	08018000 	.word	0x08018000
 80003fc:	08008006 	.word	0x08008006
 8000400:	20000000 	.word	0x20000000
 8000404:	20000034 	.word	0x20000034
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8000408:	4b3a      	ldr	r3, [pc, #232]	; (80004f4 <EE_Init+0x3a8>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	b29a      	uxth	r2, r3
 800040e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000410:	4939      	ldr	r1, [pc, #228]	; (80004f8 <EE_Init+0x3ac>)
 8000412:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000416:	429a      	cmp	r2, r3
 8000418:	d101      	bne.n	800041e <EE_Init+0x2d2>
          {
            x = varidx;
 800041a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800041c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 800041e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000420:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000424:	429a      	cmp	r2, r3
 8000426:	d01d      	beq.n	8000464 <EE_Init+0x318>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8000428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800042a:	4a33      	ldr	r2, [pc, #204]	; (80004f8 <EE_Init+0x3ac>)
 800042c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000430:	4932      	ldr	r1, [pc, #200]	; (80004fc <EE_Init+0x3b0>)
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f88e 	bl	8000554 <EE_ReadVariable>
 8000438:	4603      	mov	r3, r0
 800043a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 800043c:	8bbb      	ldrh	r3, [r7, #28]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d010      	beq.n	8000464 <EE_Init+0x318>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8000442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000444:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <EE_Init+0x3ac>)
 8000446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044a:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <EE_Init+0x3b0>)
 800044c:	8812      	ldrh	r2, [r2, #0]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f97f 	bl	8000754 <EE_VerifyPageFullWriteVariable>
 8000456:	4603      	mov	r3, r0
 8000458:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 800045a:	8bfb      	ldrh	r3, [r7, #30]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <EE_Init+0x318>
              {
                return eepromstatus;
 8000460:	8bfb      	ldrh	r3, [r7, #30]
 8000462:	e042      	b.n	80004ea <EE_Init+0x39e>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000466:	3301      	adds	r3, #1
 8000468:	84fb      	strh	r3, [r7, #38]	; 0x26
 800046a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800046c:	2b02      	cmp	r3, #2
 800046e:	d9cb      	bls.n	8000408 <EE_Init+0x2bc>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000470:	f04f 0200 	mov.w	r2, #0
 8000474:	f04f 0300 	mov.w	r3, #0
 8000478:	4921      	ldr	r1, [pc, #132]	; (8000500 <EE_Init+0x3b4>)
 800047a:	2001      	movs	r0, #1
 800047c:	f000 fd86 	bl	8000f8c <HAL_FLASH_Program>
 8000480:	4603      	mov	r3, r0
 8000482:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8000484:	7efb      	ldrb	r3, [r7, #27]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d002      	beq.n	8000490 <EE_Init+0x344>
        {
          return flashstatus;
 800048a:	7efb      	ldrb	r3, [r7, #27]
 800048c:	b29b      	uxth	r3, r3
 800048e:	e02c      	b.n	80004ea <EE_Init+0x39e>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <EE_Init+0x3b8>)
 8000496:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8000498:	2301      	movs	r3, #1
 800049a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800049c:	4819      	ldr	r0, [pc, #100]	; (8000504 <EE_Init+0x3b8>)
 800049e:	f000 f833 	bl	8000508 <EE_VerifyPageFullyErased>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d11c      	bne.n	80004e2 <EE_Init+0x396>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80004a8:	f107 0214 	add.w	r2, r7, #20
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 feb3 	bl	800121c <HAL_FLASHEx_Erase>
 80004b6:	4603      	mov	r3, r0
 80004b8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80004ba:	7efb      	ldrb	r3, [r7, #27]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d010      	beq.n	80004e2 <EE_Init+0x396>
          {
            return flashstatus;
 80004c0:	7efb      	ldrb	r3, [r7, #27]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	e011      	b.n	80004ea <EE_Init+0x39e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 80004c6:	f000 f8b1 	bl	800062c <EE_Format>
 80004ca:	4603      	mov	r3, r0
 80004cc:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80004ce:	7efb      	ldrb	r3, [r7, #27]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d008      	beq.n	80004e6 <EE_Init+0x39a>
      {
        return flashstatus;
 80004d4:	7efb      	ldrb	r3, [r7, #27]
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	e007      	b.n	80004ea <EE_Init+0x39e>
      break;
 80004da:	bf00      	nop
 80004dc:	e004      	b.n	80004e8 <EE_Init+0x39c>
      break;
 80004de:	bf00      	nop
 80004e0:	e002      	b.n	80004e8 <EE_Init+0x39c>
      break;
 80004e2:	bf00      	nop
 80004e4:	e000      	b.n	80004e8 <EE_Init+0x39c>
      }
      break;
 80004e6:	bf00      	nop
  }

  return HAL_OK;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3728      	adds	r7, #40	; 0x28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	08018006 	.word	0x08018006
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000034 	.word	0x20000034
 8000500:	08018000 	.word	0x08018000
 8000504:	08008000 	.word	0x08008000

08000508 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 8000510:	2301      	movs	r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8000514:	f245 5355 	movw	r3, #21845	; 0x5555
 8000518:	817b      	strh	r3, [r7, #10]

  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800051a:	e00d      	b.n	8000538 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 8000522:	897b      	ldrh	r3, [r7, #10]
 8000524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000528:	4293      	cmp	r3, r2
 800052a:	d002      	beq.n	8000532 <EE_VerifyPageFullyErased+0x2a>
    {

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]

      break;
 8000530:	e006      	b.n	8000540 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3304      	adds	r3, #4
 8000536:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <EE_VerifyPageFullyErased+0x48>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d3ed      	bcc.n	800051c <EE_VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	b29b      	uxth	r3, r3
}
 8000544:	4618      	mov	r0, r3
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	08008400 	.word	0x08008400

08000554 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 8000560:	2300      	movs	r3, #0
 8000562:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 8000564:	f245 5355 	movw	r3, #21845	; 0x5555
 8000568:	81bb      	strh	r3, [r7, #12]
 800056a:	2301      	movs	r3, #1
 800056c:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <EE_ReadVariable+0x8c>)
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <EE_ReadVariable+0x8c>)
 8000574:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f8a8 	bl	80006cc <EE_FindValidPage>
 800057c:	4603      	mov	r3, r0
 800057e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	2bab      	cmp	r3, #171	; 0xab
 8000584:	d101      	bne.n	800058a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000586:	23ab      	movs	r3, #171	; 0xab
 8000588:	e025      	b.n	80005d6 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000590:	3320      	adds	r3, #32
 8000592:	029b      	lsls	r3, r3, #10
 8000594:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 8000596:	89fb      	ldrh	r3, [r7, #14]
 8000598:	3301      	adds	r3, #1
 800059a:	029a      	lsls	r2, r3, #10
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <EE_ReadVariable+0x90>)
 800059e:	4413      	add	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 80005a2:	e012      	b.n	80005ca <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 80005aa:	89ba      	ldrh	r2, [r7, #12]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d108      	bne.n	80005c4 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	3b02      	subs	r3, #2
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	82fb      	strh	r3, [r7, #22]

      break;
 80005c2:	e007      	b.n	80005d4 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	3b04      	subs	r3, #4
 80005c8:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3302      	adds	r3, #2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8e7      	bhi.n	80005a4 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 80005d4:	8afb      	ldrh	r3, [r7, #22]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	08008000 	.word	0x08008000
 80005e4:	08007ffe 	.word	0x08007ffe

080005e8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	80fb      	strh	r3, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80005fc:	88ba      	ldrh	r2, [r7, #4]
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f8a6 	bl	8000754 <EE_VerifyPageFullWriteVariable>
 8000608:	4603      	mov	r3, r0
 800060a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800060c:	89fb      	ldrh	r3, [r7, #14]
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	d107      	bne.n	8000622 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000612:	88ba      	ldrh	r2, [r7, #4]
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f8fd 	bl	8000818 <EE_PageTransfer>
 800061e:	4603      	mov	r3, r0
 8000620:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000622:	89fb      	ldrh	r3, [r7, #14]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <EE_Format+0x98>)
 8000640:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000646:	481f      	ldr	r0, [pc, #124]	; (80006c4 <EE_Format+0x98>)
 8000648:	f7ff ff5e 	bl	8000508 <EE_VerifyPageFullyErased>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10d      	bne.n	800066e <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000652:	f107 0210 	add.w	r2, r7, #16
 8000656:	463b      	mov	r3, r7
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fdde 	bl	800121c <HAL_FLASHEx_Erase>
 8000660:	4603      	mov	r3, r0
 8000662:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <EE_Format+0x42>
    {
      return flashstatus;
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	e025      	b.n	80006ba <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800066e:	f04f 0200 	mov.w	r2, #0
 8000672:	f04f 0300 	mov.w	r3, #0
 8000676:	4913      	ldr	r1, [pc, #76]	; (80006c4 <EE_Format+0x98>)
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fc87 	bl	8000f8c <HAL_FLASH_Program>
 800067e:	4603      	mov	r3, r0
 8000680:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <EE_Format+0x60>
  {
    return flashstatus;
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	e016      	b.n	80006ba <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <EE_Format+0x9c>)
 800068e:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <EE_Format+0x9c>)
 8000692:	f7ff ff39 	bl	8000508 <EE_VerifyPageFullyErased>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10d      	bne.n	80006b8 <EE_Format+0x8c>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800069c:	f107 0210 	add.w	r2, r7, #16
 80006a0:	463b      	mov	r3, r7
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fdb9 	bl	800121c <HAL_FLASHEx_Erase>
 80006aa:	4603      	mov	r3, r0
 80006ac:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <EE_Format+0x8c>
    {
      return flashstatus;
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	e000      	b.n	80006ba <EE_Format+0x8e>
    }
  }

  return HAL_OK;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	08008000 	.word	0x08008000
 80006c8:	08018000 	.word	0x08018000

080006cc <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 80006d6:	2306      	movs	r3, #6
 80006d8:	81fb      	strh	r3, [r7, #14]
 80006da:	2306      	movs	r3, #6
 80006dc:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <EE_FindValidPage+0x80>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <EE_FindValidPage+0x84>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d01b      	beq.n	8000728 <EE_FindValidPage+0x5c>
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d125      	bne.n	8000740 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 80006f4:	89bb      	ldrh	r3, [r7, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d108      	bne.n	800070c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000700:	4293      	cmp	r3, r2
 8000702:	d101      	bne.n	8000708 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000704:	2300      	movs	r3, #0
 8000706:	e01c      	b.n	8000742 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	e01a      	b.n	8000742 <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d108      	bne.n	8000724 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 8000712:	89bb      	ldrh	r3, [r7, #12]
 8000714:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000718:	4293      	cmp	r3, r2
 800071a:	d101      	bne.n	8000720 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	e010      	b.n	8000742 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000720:	2300      	movs	r3, #0
 8000722:	e00e      	b.n	8000742 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000724:	23ab      	movs	r3, #171	; 0xab
 8000726:	e00c      	b.n	8000742 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800072e:	2300      	movs	r3, #0
 8000730:	e007      	b.n	8000742 <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 8000732:	89bb      	ldrh	r3, [r7, #12]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	e002      	b.n	8000742 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800073c:	23ab      	movs	r3, #171	; 0xab
 800073e:	e000      	b.n	8000742 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000740:	2300      	movs	r3, #0
  }
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	08008000 	.word	0x08008000
 8000750:	08018000 	.word	0x08018000

08000754 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	460a      	mov	r2, r1
 8000760:	80fb      	strh	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 800076a:	2300      	movs	r3, #0
 800076c:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <EE_VerifyPageFullWriteVariable+0xb8>)
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000774:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ffa8 	bl	80006cc <EE_FindValidPage>
 800077c:	4603      	mov	r3, r0
 800077e:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 8000780:	8a3b      	ldrh	r3, [r7, #16]
 8000782:	2bab      	cmp	r3, #171	; 0xab
 8000784:	d101      	bne.n	800078a <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000786:	23ab      	movs	r3, #171	; 0xab
 8000788:	e03b      	b.n	8000802 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 800078a:	8a3b      	ldrh	r3, [r7, #16]
 800078c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000790:	3320      	adds	r3, #32
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 8000796:	8a3b      	ldrh	r3, [r7, #16]
 8000798:	3301      	adds	r3, #1
 800079a:	029a      	lsls	r2, r3, #10
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <EE_VerifyPageFullWriteVariable+0xc0>)
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80007a2:	e029      	b.n	80007f8 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ac:	d121      	bne.n	80007f2 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4622      	mov	r2, r4
 80007b8:	462b      	mov	r3, r5
 80007ba:	6979      	ldr	r1, [r7, #20]
 80007bc:	2001      	movs	r0, #1
 80007be:	f000 fbe5 	bl	8000f8c <HAL_FLASH_Program>
 80007c2:	4603      	mov	r3, r0
 80007c4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80007c6:	7cfb      	ldrb	r3, [r7, #19]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return flashstatus;
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	e017      	b.n	8000802 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	1c99      	adds	r1, r3, #2
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	2200      	movs	r2, #0
 80007da:	4698      	mov	r8, r3
 80007dc:	4691      	mov	r9, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	464b      	mov	r3, r9
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 fbd2 	bl	8000f8c <HAL_FLASH_Program>
 80007e8:	4603      	mov	r3, r0
 80007ea:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 80007ec:	7cfb      	ldrb	r3, [r7, #19]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	e007      	b.n	8000802 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3304      	adds	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d3d1      	bcc.n	80007a4 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000800:	2380      	movs	r3, #128	; 0x80
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800080c:	08008000 	.word	0x08008000
 8000810:	08008400 	.word	0x08008400
 8000814:	08007fff 	.word	0x08007fff

08000818 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	80fb      	strh	r3, [r7, #6]
 8000824:	4613      	mov	r3, r2
 8000826:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <EE_PageTransfer+0x164>)
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	847b      	strh	r3, [r7, #34]	; 0x22
 800083a:	2300      	movs	r3, #0
 800083c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	843b      	strh	r3, [r7, #32]
 8000842:	2300      	movs	r3, #0
 8000844:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff ff3e 	bl	80006cc <EE_FindValidPage>
 8000850:	4603      	mov	r3, r0
 8000852:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8000854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000856:	2b40      	cmp	r3, #64	; 0x40
 8000858:	d104      	bne.n	8000864 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <EE_PageTransfer+0x164>)
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 800085e:	4b48      	ldr	r3, [pc, #288]	; (8000980 <EE_PageTransfer+0x168>)
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
 8000862:	e009      	b.n	8000878 <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8000864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000866:	2b00      	cmp	r3, #0
 8000868:	d104      	bne.n	8000874 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 800086a:	4b45      	ldr	r3, [pc, #276]	; (8000980 <EE_PageTransfer+0x168>)
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <EE_PageTransfer+0x164>)
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
 8000872:	e001      	b.n	8000878 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000874:	23ab      	movs	r3, #171	; 0xab
 8000876:	e07c      	b.n	8000972 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);
 8000878:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fb82 	bl	8000f8c <HAL_FLASH_Program>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800088e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <EE_PageTransfer+0x86>
  {
    return flashstatus;
 8000896:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800089a:	b29b      	uxth	r3, r3
 800089c:	e069      	b.n	8000972 <EE_PageTransfer+0x15a>
  }

  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800089e:	88ba      	ldrh	r2, [r7, #4]
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff55 	bl	8000754 <EE_VerifyPageFullWriteVariable>
 80008aa:	4603      	mov	r3, r0
 80008ac:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 80008ae:	8c3b      	ldrh	r3, [r7, #32]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 80008b4:	8c3b      	ldrh	r3, [r7, #32]
 80008b6:	e05c      	b.n	8000972 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008bc:	e027      	b.n	800090e <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80008be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008c0:	4a30      	ldr	r2, [pc, #192]	; (8000984 <EE_PageTransfer+0x16c>)
 80008c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c6:	88fa      	ldrh	r2, [r7, #6]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d01d      	beq.n	8000908 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80008cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008ce:	4a2d      	ldr	r2, [pc, #180]	; (8000984 <EE_PageTransfer+0x16c>)
 80008d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d4:	492c      	ldr	r1, [pc, #176]	; (8000988 <EE_PageTransfer+0x170>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe3c 	bl	8000554 <EE_ReadVariable>
 80008dc:	4603      	mov	r3, r0
 80008de:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 80008e0:	8bfb      	ldrh	r3, [r7, #30]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d010      	beq.n	8000908 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80008e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008e8:	4a26      	ldr	r2, [pc, #152]	; (8000984 <EE_PageTransfer+0x16c>)
 80008ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ee:	4a26      	ldr	r2, [pc, #152]	; (8000988 <EE_PageTransfer+0x170>)
 80008f0:	8812      	ldrh	r2, [r2, #0]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff2d 	bl	8000754 <EE_VerifyPageFullWriteVariable>
 80008fa:	4603      	mov	r3, r0
 80008fc:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 80008fe:	8c3b      	ldrh	r3, [r7, #32]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8000904:	8c3b      	ldrh	r3, [r7, #32]
 8000906:	e034      	b.n	8000972 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8000908:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800090a:	3301      	adds	r3, #1
 800090c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800090e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000910:	2b02      	cmp	r3, #2
 8000912:	d9d4      	bls.n	80008be <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8000918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091a:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]

  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8000920:	f107 0218 	add.w	r2, r7, #24
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fc76 	bl	800121c <HAL_FLASHEx_Erase>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8000936:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 800093e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000942:	b29b      	uxth	r3, r3
 8000944:	e015      	b.n	8000972 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fb1b 	bl	8000f8c <HAL_FLASH_Program>
 8000956:	4603      	mov	r3, r0
 8000958:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 800095c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8000964:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000968:	b29b      	uxth	r3, r3
 800096a:	e002      	b.n	8000972 <EE_PageTransfer+0x15a>
  }



  /* Return last operation flash status */
  return flashstatus;
 800096c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000970:	b29b      	uxth	r3, r3
}
 8000972:	4618      	mov	r0, r3
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08008000 	.word	0x08008000
 8000980:	08018000 	.word	0x08018000
 8000984:	20000000 	.word	0x20000000
 8000988:	20000034 	.word	0x20000034

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 f9b5 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f895 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 f8d9 	bl	8000b50 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  	  HAL_FLASH_Unlock(); //Un;ock Flash Program Erase
 800099e:	f000 fb65 	bl	800106c <HAL_FLASH_Unlock>

  	  if(EE_Init() != EE_OK) //Init EEPROM
 80009a2:	f7ff fbd3 	bl	800014c <EE_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x24>
  	  {
  		  Error_Handler();
 80009ac:	f000 f91c 	bl	8000be8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (state)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d041      	beq.n	8000a3a <main+0xae>
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	dcfa      	bgt.n	80009b0 <main+0x24>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <main+0x38>
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d010      	beq.n	80009e4 <main+0x58>
 80009c2:	e7f5      	b.n	80009b0 <main+0x24>
	  {
	  	  case 0:
	  	  {
	  		  if(option == 1) //write Variable
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d104      	bne.n	80009d4 <main+0x48>
	  		  {
	  			  option = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	71bb      	strb	r3, [r7, #6]
	  			  state = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	71fb      	strb	r3, [r7, #7]
	  		  {
	  			  option = 0;
	  			  state = 2;
	  		  }
	  	  }
	  	  break;
 80009d2:	e06f      	b.n	8000ab4 <main+0x128>
	  		  else if (option ==2) //read variable
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d16c      	bne.n	8000ab4 <main+0x128>
	  			  option = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	71bb      	strb	r3, [r7, #6]
	  			  state = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	71fb      	strb	r3, [r7, #7]
	  	  break;
 80009e2:	e067      	b.n	8000ab4 <main+0x128>
	  	  case 1:
	  	  {
	  		  if((EE_WriteVariable(VirtAddVarTab[0], 125)) != HAL_OK)
 80009e4:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <main+0x12c>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	217d      	movs	r1, #125	; 0x7d
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdfc 	bl	80005e8 <EE_WriteVariable>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <main+0x6e>
	  		  {
	  			  Error_Handler();
 80009f6:	f000 f8f7 	bl	8000be8 <Error_Handler>
	  		  }

	  		  if((EE_WriteVariable(VirtAddVarTab[1], 250)) != HAL_OK)
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <main+0x12c>)
 80009fc:	885b      	ldrh	r3, [r3, #2]
 80009fe:	21fa      	movs	r1, #250	; 0xfa
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdf1 	bl	80005e8 <EE_WriteVariable>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <main+0x84>
	  		  {
	  			  Error_Handler();
 8000a0c:	f000 f8ec 	bl	8000be8 <Error_Handler>
	  		  }

	  		  if((EE_WriteVariable(VirtAddVarTab[2], 500)) != HAL_OK)
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <main+0x12c>)
 8000a12:	889b      	ldrh	r3, [r3, #4]
 8000a14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fde5 	bl	80005e8 <EE_WriteVariable>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <main+0x9c>
	  		  {
	  			  Error_Handler();
 8000a24:	f000 f8e0 	bl	8000be8 <Error_Handler>
	  		  }

	  		  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET); //Reset Pin PC13 (Led Off)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2e:	4823      	ldr	r0, [pc, #140]	; (8000abc <main+0x130>)
 8000a30:	f000 fe20 	bl	8001674 <HAL_GPIO_WritePin>
	  		  state = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	71fb      	strb	r3, [r7, #7]

	  	  }
	  	  break;
 8000a38:	e03d      	b.n	8000ab6 <main+0x12a>
	  	  case 2:
	  	  {
	  		  if((EE_ReadVariable(VirtAddVarTab[0], &VarDataTmp)) != HAL_OK)
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <main+0x12c>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	4920      	ldr	r1, [pc, #128]	; (8000ac0 <main+0x134>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fd87 	bl	8000554 <EE_ReadVariable>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <main+0xc4>
	  	      {
	  			  Error_Handler();
 8000a4c:	f000 f8cc 	bl	8000be8 <Error_Handler>
	  		  }
	  		  if(VarDataTmp != 125)
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <main+0x134>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	2b7d      	cmp	r3, #125	; 0x7d
 8000a56:	d001      	beq.n	8000a5c <main+0xd0>
	  		  {
	  			  Error_Handler();
 8000a58:	f000 f8c6 	bl	8000be8 <Error_Handler>
	  		  }

	  		  if((EE_ReadVariable(VirtAddVarTab[1], &VarDataTmp)) != HAL_OK)
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <main+0x12c>)
 8000a5e:	885b      	ldrh	r3, [r3, #2]
 8000a60:	4917      	ldr	r1, [pc, #92]	; (8000ac0 <main+0x134>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fd76 	bl	8000554 <EE_ReadVariable>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <main+0xe6>
	  		  {
	  			  Error_Handler();
 8000a6e:	f000 f8bb 	bl	8000be8 <Error_Handler>
	  		  }
	  		  if(VarDataTmp != 250)
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <main+0x134>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2bfa      	cmp	r3, #250	; 0xfa
 8000a78:	d001      	beq.n	8000a7e <main+0xf2>
	  		  {
	  			  Error_Handler();
 8000a7a:	f000 f8b5 	bl	8000be8 <Error_Handler>
	  		  }

	  		  if((EE_ReadVariable(VirtAddVarTab[2], &VarDataTmp)) != HAL_OK)
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <main+0x12c>)
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	490f      	ldr	r1, [pc, #60]	; (8000ac0 <main+0x134>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fd65 	bl	8000554 <EE_ReadVariable>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <main+0x108>
	  	      {
	  			  Error_Handler();
 8000a90:	f000 f8aa 	bl	8000be8 <Error_Handler>
	  		  }
	  		  if(VarDataTmp != 500)
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <main+0x134>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a9c:	d001      	beq.n	8000aa2 <main+0x116>
	  		  {
	  			  Error_Handler();
 8000a9e:	f000 f8a3 	bl	8000be8 <Error_Handler>
	  		  }

	  		  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET); //Reset Pin PC13 (Led On)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <main+0x130>)
 8000aaa:	f000 fde3 	bl	8001674 <HAL_GPIO_WritePin>
	  		  state = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	  	  }
	  	  break;
 8000ab2:	e000      	b.n	8000ab6 <main+0x12a>
	  	  break;
 8000ab4:	bf00      	nop
	  switch (state)
 8000ab6:	e77b      	b.n	80009b0 <main+0x24>
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	20000036 	.word	0x20000036

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	; 0x40
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f9c4 	bl	8001e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fdc9 	bl	80016a4 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b18:	f000 f866 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2102      	movs	r1, #2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f836 	bl	8001ba8 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b42:	f000 f851 	bl	8000be8 <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3740      	adds	r7, #64	; 0x40
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b82:	f043 0320 	orr.w	r3, r3, #32
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_GPIO_Init+0x94>)
 8000bb4:	f000 fd5e 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_D1_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_GPIO_Init+0x94>)
 8000bd2:	f000 fbcb 	bl	800136c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40011000 	.word	0x40011000

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_MspInit+0x60>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_MspInit+0x60>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9e:	f000 f875 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff fff7 	bl	8000ca6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cba:	490c      	ldr	r1, [pc, #48]	; (8000cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd0:	4c09      	ldr	r4, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f001 f8c7 	bl	8001e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fe53 	bl	800098c <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cf0:	08001efc 	.word	0x08001efc
  ldr r2, =_sbss
 8000cf4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000cf8:	20000060 	.word	0x20000060

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f907 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff ff6a 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f911 	bl	8000f72 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f8e7 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000010 	.word	0x20000010
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <HAL_IncTick+0x20>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000010 	.word	0x20000010
 8000dac:	20000038 	.word	0x20000038

08000db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000038 	.word	0x20000038

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff90 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff49 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff5e 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff90 	bl	8000e7c <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5f 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffb0 	bl	8000ee0 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_FLASH_Program+0xd8>)
 8000fa8:	7e1b      	ldrb	r3, [r3, #24]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_FLASH_Program+0x26>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e054      	b.n	800105c <HAL_FLASH_Program+0xd0>
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_FLASH_Program+0xd8>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fbc:	f000 f898 	bl	80010f0 <FLASH_WaitForLastOperation>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d144      	bne.n	8001054 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d102      	bne.n	8000fd6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	757b      	strb	r3, [r7, #21]
 8000fd4:	e007      	b.n	8000fe6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d102      	bne.n	8000fe2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	757b      	strb	r3, [r7, #21]
 8000fe0:	e001      	b.n	8000fe6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75bb      	strb	r3, [r7, #22]
 8000fea:	e02d      	b.n	8001048 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	005a      	lsls	r2, r3, #1
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	eb02 0c03 	add.w	ip, r2, r3
 8000ff6:	7dbb      	ldrb	r3, [r7, #22]
 8000ff8:	0119      	lsls	r1, r3, #4
 8000ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ffe:	f1c1 0620 	rsb	r6, r1, #32
 8001002:	f1a1 0020 	sub.w	r0, r1, #32
 8001006:	fa22 f401 	lsr.w	r4, r2, r1
 800100a:	fa03 f606 	lsl.w	r6, r3, r6
 800100e:	4334      	orrs	r4, r6
 8001010:	fa23 f000 	lsr.w	r0, r3, r0
 8001014:	4304      	orrs	r4, r0
 8001016:	fa23 f501 	lsr.w	r5, r3, r1
 800101a:	b2a3      	uxth	r3, r4
 800101c:	4619      	mov	r1, r3
 800101e:	4660      	mov	r0, ip
 8001020:	f000 f84a 	bl	80010b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001028:	f000 f862 	bl	80010f0 <FLASH_WaitForLastOperation>
 800102c:	4603      	mov	r3, r0
 800102e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_FLASH_Program+0xdc>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_FLASH_Program+0xdc>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d107      	bne.n	8001052 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	3301      	adds	r3, #1
 8001046:	75bb      	strb	r3, [r7, #22]
 8001048:	7dba      	ldrb	r2, [r7, #22]
 800104a:	7d7b      	ldrb	r3, [r7, #21]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3cd      	bcc.n	8000fec <HAL_FLASH_Program+0x60>
 8001050:	e000      	b.n	8001054 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001052:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_FLASH_Program+0xd8>)
 8001056:	2200      	movs	r2, #0
 8001058:	761a      	strb	r2, [r3, #24]

  return status;
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001064:	20000040 	.word	0x20000040
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_FLASH_Unlock+0x40>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00d      	beq.n	800109e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_FLASH_Unlock+0x40>)
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_FLASH_Unlock+0x44>)
 8001086:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_FLASH_Unlock+0x40>)
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_FLASH_Unlock+0x48>)
 800108c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_FLASH_Unlock+0x40>)
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800109e:	79fb      	ldrb	r3, [r7, #7]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	45670123 	.word	0x45670123
 80010b4:	cdef89ab 	.word	0xcdef89ab

080010b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <FLASH_Program_HalfWord+0x30>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <FLASH_Program_HalfWord+0x34>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <FLASH_Program_HalfWord+0x34>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	887a      	ldrh	r2, [r7, #2]
 80010da:	801a      	strh	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000040 	.word	0x20000040
 80010ec:	40022000 	.word	0x40022000

080010f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fe5a 	bl	8000db0 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010fe:	e010      	b.n	8001122 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001106:	d00c      	beq.n	8001122 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <FLASH_WaitForLastOperation+0x2e>
 800110e:	f7ff fe4f 	bl	8000db0 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d201      	bcs.n	8001122 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e025      	b.n	800116e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <FLASH_WaitForLastOperation+0x88>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e8      	bne.n	8001100 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <FLASH_WaitForLastOperation+0x88>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <FLASH_WaitForLastOperation+0x88>)
 800113c:	2220      	movs	r2, #32
 800113e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <FLASH_WaitForLastOperation+0x88>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <FLASH_WaitForLastOperation+0x88>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <FLASH_WaitForLastOperation+0x88>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001164:	f000 f80a 	bl	800117c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <FLASH_SetErrorCode+0x98>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <FLASH_SetErrorCode+0x9c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <FLASH_SetErrorCode+0x9c>)
 800119c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <FLASH_SetErrorCode+0x98>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <FLASH_SetErrorCode+0x9c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <FLASH_SetErrorCode+0x9c>)
 80011bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <FLASH_SetErrorCode+0x98>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <FLASH_SetErrorCode+0x9c>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <FLASH_SetErrorCode+0x9c>)
 80011dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <FLASH_SetErrorCode+0x98>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <FLASH_SetErrorCode+0x98>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f240 1201 	movw	r2, #257	; 0x101
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d106      	bne.n	8001202 <FLASH_SetErrorCode+0x86>
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <FLASH_SetErrorCode+0x98>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <FLASH_SetErrorCode+0x98>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	61d3      	str	r3, [r2, #28]
}  
 8001200:	e002      	b.n	8001208 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <FLASH_SetErrorCode+0x98>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60d3      	str	r3, [r2, #12]
}  
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000
 8001218:	20000040 	.word	0x20000040

0800121c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_FLASHEx_Erase+0xd0>)
 8001230:	7e1b      	ldrb	r3, [r3, #24]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_FLASHEx_Erase+0x1e>
 8001236:	2302      	movs	r3, #2
 8001238:	e053      	b.n	80012e2 <HAL_FLASHEx_Erase+0xc6>
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_FLASHEx_Erase+0xd0>)
 800123c:	2201      	movs	r2, #1
 800123e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d116      	bne.n	8001276 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001248:	f24c 3050 	movw	r0, #50000	; 0xc350
 800124c:	f7ff ff50 	bl	80010f0 <FLASH_WaitForLastOperation>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d141      	bne.n	80012da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 f84c 	bl	80012f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800125c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001260:	f7ff ff46 	bl	80010f0 <FLASH_WaitForLastOperation>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_FLASHEx_Erase+0xd4>)
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <HAL_FLASHEx_Erase+0xd4>)
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	6113      	str	r3, [r2, #16]
 8001274:	e031      	b.n	80012da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001276:	f24c 3050 	movw	r0, #50000	; 0xc350
 800127a:	f7ff ff39 	bl	80010f0 <FLASH_WaitForLastOperation>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d12a      	bne.n	80012da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f04f 32ff 	mov.w	r2, #4294967295
 800128a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	e019      	b.n	80012c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001294:	68b8      	ldr	r0, [r7, #8]
 8001296:	f000 f849 	bl	800132c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800129a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800129e:	f7ff ff27 	bl	80010f0 <FLASH_WaitForLastOperation>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_FLASHEx_Erase+0xd4>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_FLASHEx_Erase+0xd4>)
 80012ac:	f023 0302 	bic.w	r3, r3, #2
 80012b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	601a      	str	r2, [r3, #0]
            break;
 80012be:	e00c      	b.n	80012da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	029a      	lsls	r2, r3, #10
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4413      	add	r3, r2
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3dc      	bcc.n	8001294 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <HAL_FLASHEx_Erase+0xd0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	761a      	strb	r2, [r3, #24]

  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000040 	.word	0x20000040
 80012f0:	40022000 	.word	0x40022000

080012f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <FLASH_MassErase+0x30>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <FLASH_MassErase+0x34>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <FLASH_MassErase+0x34>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <FLASH_MassErase+0x34>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <FLASH_MassErase+0x34>)
 8001314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001318:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000040 	.word	0x20000040
 8001328:	40022000 	.word	0x40022000

0800132c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <FLASH_PageErase+0x38>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <FLASH_PageErase+0x3c>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <FLASH_PageErase+0x3c>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <FLASH_PageErase+0x3c>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <FLASH_PageErase+0x3c>)
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <FLASH_PageErase+0x3c>)
 8001352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001356:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000040 	.word	0x20000040
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e169      	b.n	8001654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001380:	2201      	movs	r2, #1
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8158 	bne.w	800164e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a9a      	ldr	r2, [pc, #616]	; (800160c <HAL_GPIO_Init+0x2a0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d05e      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013a8:	4a98      	ldr	r2, [pc, #608]	; (800160c <HAL_GPIO_Init+0x2a0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d875      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ae:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d058      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013b4:	4a96      	ldr	r2, [pc, #600]	; (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d86f      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ba:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_GPIO_Init+0x2a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d052      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013c0:	4a94      	ldr	r2, [pc, #592]	; (8001614 <HAL_GPIO_Init+0x2a8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d869      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013c6:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_GPIO_Init+0x2ac>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04c      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013cc:	4a92      	ldr	r2, [pc, #584]	; (8001618 <HAL_GPIO_Init+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d863      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013d2:	4a92      	ldr	r2, [pc, #584]	; (800161c <HAL_GPIO_Init+0x2b0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d046      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013d8:	4a90      	ldr	r2, [pc, #576]	; (800161c <HAL_GPIO_Init+0x2b0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d85d      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d82a      	bhi.n	8001438 <HAL_GPIO_Init+0xcc>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d859      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <HAL_GPIO_Init+0x80>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001453 	.word	0x08001453
 80013f8:	08001495 	.word	0x08001495
 80013fc:	0800149b 	.word	0x0800149b
 8001400:	0800149b 	.word	0x0800149b
 8001404:	0800149b 	.word	0x0800149b
 8001408:	0800149b 	.word	0x0800149b
 800140c:	0800149b 	.word	0x0800149b
 8001410:	0800149b 	.word	0x0800149b
 8001414:	0800149b 	.word	0x0800149b
 8001418:	0800149b 	.word	0x0800149b
 800141c:	0800149b 	.word	0x0800149b
 8001420:	0800149b 	.word	0x0800149b
 8001424:	0800149b 	.word	0x0800149b
 8001428:	0800149b 	.word	0x0800149b
 800142c:	0800149b 	.word	0x0800149b
 8001430:	08001449 	.word	0x08001449
 8001434:	0800145d 	.word	0x0800145d
 8001438:	4a79      	ldr	r2, [pc, #484]	; (8001620 <HAL_GPIO_Init+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143e:	e02c      	b.n	800149a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e029      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e024      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	3308      	adds	r3, #8
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e01f      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	330c      	adds	r3, #12
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e01a      	b.n	800149c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146e:	2304      	movs	r3, #4
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e013      	b.n	800149c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	611a      	str	r2, [r3, #16]
          break;
 8001486:	e009      	b.n	800149c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	615a      	str	r2, [r3, #20]
          break;
 8001492:	e003      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x130>
          break;
 800149a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d801      	bhi.n	80014a6 <HAL_GPIO_Init+0x13a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_Init+0x13e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	; 0xff
 80014b0:	d802      	bhi.n	80014b8 <HAL_GPIO_Init+0x14c>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x152>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	3b08      	subs	r3, #8
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	210f      	movs	r1, #15
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	6a39      	ldr	r1, [r7, #32]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80b1 	beq.w	800164e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001504:	4a48      	ldr	r2, [pc, #288]	; (8001628 <HAL_GPIO_Init+0x2bc>)
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a40      	ldr	r2, [pc, #256]	; (800162c <HAL_GPIO_Init+0x2c0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <HAL_GPIO_Init+0x2c8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3d      	ldr	r2, [pc, #244]	; (8001638 <HAL_GPIO_Init+0x2cc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e0>
 8001548:	2303      	movs	r3, #3
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 800154c:	2304      	movs	r3, #4
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001558:	2300      	movs	r3, #0
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156a:	492f      	ldr	r1, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x2bc>)
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	492c      	ldr	r1, [pc, #176]	; (800163c <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4928      	ldr	r1, [pc, #160]	; (800163c <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4922      	ldr	r1, [pc, #136]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	491e      	ldr	r1, [pc, #120]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4918      	ldr	r1, [pc, #96]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4914      	ldr	r1, [pc, #80]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d021      	beq.n	8001640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e021      	b.n	800164e <HAL_GPIO_Init+0x2e2>
 800160a:	bf00      	nop
 800160c:	10320000 	.word	0x10320000
 8001610:	10310000 	.word	0x10310000
 8001614:	10220000 	.word	0x10220000
 8001618:	10210000 	.word	0x10210000
 800161c:	10120000 	.word	0x10120000
 8001620:	10110000 	.word	0x10110000
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	40011000 	.word	0x40011000
 8001638:	40011400 	.word	0x40011400
 800163c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_GPIO_Init+0x304>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <HAL_GPIO_Init+0x304>)
 800164a:	4013      	ands	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae8e 	bne.w	8001380 <HAL_GPIO_Init+0x14>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	; 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e272      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8087 	beq.w	80017d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c4:	4b92      	ldr	r3, [pc, #584]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d00c      	beq.n	80016ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d0:	4b8f      	ldr	r3, [pc, #572]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d112      	bne.n	8001702 <HAL_RCC_OscConfig+0x5e>
 80016dc:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d10b      	bne.n	8001702 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d06c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x12c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d168      	bne.n	80017d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e24c      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x76>
 800170c:	4b80      	ldr	r3, [pc, #512]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a7f      	ldr	r2, [pc, #508]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	e02e      	b.n	8001778 <HAL_RCC_OscConfig+0xd4>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x98>
 8001722:	4b7b      	ldr	r3, [pc, #492]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7a      	ldr	r2, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b78      	ldr	r3, [pc, #480]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a77      	ldr	r2, [pc, #476]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0xd4>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0xbc>
 8001746:	4b72      	ldr	r3, [pc, #456]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a71      	ldr	r2, [pc, #452]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b6f      	ldr	r3, [pc, #444]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a6e      	ldr	r2, [pc, #440]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xd4>
 8001760:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6a      	ldr	r2, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a67      	ldr	r2, [pc, #412]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb16 	bl	8000db0 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fb12 	bl	8000db0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e200      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xe4>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb02 	bl	8000db0 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fafe 	bl	8000db0 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1ec      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x10c>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d063      	beq.n	80018a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ea:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d11c      	bne.n	8001830 <HAL_RCC_OscConfig+0x18c>
 80017f6:	4b46      	ldr	r3, [pc, #280]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d116      	bne.n	8001830 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x176>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e1c0      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4939      	ldr	r1, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	e03a      	b.n	80018a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d020      	beq.n	800187a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fab7 	bl	8000db0 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fab3 	bl	8000db0 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1a1      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4927      	ldr	r1, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
 8001878:	e015      	b.n	80018a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_RCC_OscConfig+0x270>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fa96 	bl	8000db0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff fa92 	bl	8000db0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e180      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d03a      	beq.n	8001928 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d019      	beq.n	80018ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_RCC_OscConfig+0x274>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fa76 	bl	8000db0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c8:	f7ff fa72 	bl	8000db0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e160      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 fa9c 	bl	8001e24 <RCC_Delay>
 80018ec:	e01c      	b.n	8001928 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_OscConfig+0x274>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa5c 	bl	8000db0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fa:	e00f      	b.n	800191c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fa58 	bl	8000db0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d908      	bls.n	800191c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e146      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	42420000 	.word	0x42420000
 8001918:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	4b92      	ldr	r3, [pc, #584]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e9      	bne.n	80018fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a6 	beq.w	8001a82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b8b      	ldr	r3, [pc, #556]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10d      	bne.n	8001962 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b88      	ldr	r3, [pc, #544]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a87      	ldr	r2, [pc, #540]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b85      	ldr	r3, [pc, #532]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195e:	2301      	movs	r3, #1
 8001960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <HAL_RCC_OscConfig+0x4c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196e:	4b7f      	ldr	r3, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0x4c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a7e      	ldr	r2, [pc, #504]	; (8001b6c <HAL_RCC_OscConfig+0x4c8>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff fa19 	bl	8000db0 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff fa15 	bl	8000db0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e103      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <HAL_RCC_OscConfig+0x4c8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x312>
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	e02d      	b.n	8001a12 <HAL_RCC_OscConfig+0x36e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x334>
 80019be:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a69      	ldr	r2, [pc, #420]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	e01c      	b.n	8001a12 <HAL_RCC_OscConfig+0x36e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d10c      	bne.n	80019fa <HAL_RCC_OscConfig+0x356>
 80019e0:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a60      	ldr	r2, [pc, #384]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	e00b      	b.n	8001a12 <HAL_RCC_OscConfig+0x36e>
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a5a      	ldr	r2, [pc, #360]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 0304 	bic.w	r3, r3, #4
 8001a10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d015      	beq.n	8001a46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f9c9 	bl	8000db0 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff f9c5 	bl	8000db0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0b1      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ee      	beq.n	8001a22 <HAL_RCC_OscConfig+0x37e>
 8001a44:	e014      	b.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f9b3 	bl	8000db0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7ff f9af 	bl	8000db0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e09b      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1ee      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d105      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8087 	beq.w	8001b9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d061      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d146      	bne.n	8001b2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa0:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f983 	bl	8000db0 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f97f 	bl	8000db0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e06d      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d108      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4921      	ldr	r1, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a19      	ldr	r1, [r3, #32]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	430b      	orrs	r3, r1
 8001afa:	491b      	ldr	r1, [pc, #108]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x4cc>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff f953 	bl	8000db0 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff f94f 	bl	8000db0 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e03d      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46a>
 8001b2c:	e035      	b.n	8001b9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_OscConfig+0x4cc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f93c 	bl	8000db0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f938 	bl	8000db0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e026      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x498>
 8001b5a:	e01e      	b.n	8001b9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e019      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x500>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0d0      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4965      	ldr	r1, [pc, #404]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d040      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e073      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4936      	ldr	r1, [pc, #216]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7ff f88a 	bl	8000db0 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f886 	bl	8000db0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e053      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d210      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1cc>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe ffe8 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08001ed0 	.word	0x08001ed0
 8001d74:	20000008 	.word	0x20000008
 8001d78:	2000000c 	.word	0x2000000c

08001d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x30>
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x36>
 8001daa:	e027      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	e027      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0c5b      	lsrs	r3, r3, #17
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e004      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfe:	613b      	str	r3, [r7, #16]
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	693b      	ldr	r3, [r7, #16]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	007a1200 	.word	0x007a1200
 8001e18:	08001ee0 	.word	0x08001ee0
 8001e1c:	08001ef0 	.word	0x08001ef0
 8001e20:	003d0900 	.word	0x003d0900

08001e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <RCC_Delay+0x34>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <RCC_Delay+0x38>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0a5b      	lsrs	r3, r3, #9
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e40:	bf00      	nop
  }
  while (Delay --);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e5a      	subs	r2, r3, #1
 8001e46:	60fa      	str	r2, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f9      	bne.n	8001e40 <RCC_Delay+0x1c>
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	10624dd3 	.word	0x10624dd3

08001e60 <memset>:
 8001e60:	4603      	mov	r3, r0
 8001e62:	4402      	add	r2, r0
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d100      	bne.n	8001e6a <memset+0xa>
 8001e68:	4770      	bx	lr
 8001e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e6e:	e7f9      	b.n	8001e64 <memset+0x4>

08001e70 <__libc_init_array>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	2600      	movs	r6, #0
 8001e74:	4d0c      	ldr	r5, [pc, #48]	; (8001ea8 <__libc_init_array+0x38>)
 8001e76:	4c0d      	ldr	r4, [pc, #52]	; (8001eac <__libc_init_array+0x3c>)
 8001e78:	1b64      	subs	r4, r4, r5
 8001e7a:	10a4      	asrs	r4, r4, #2
 8001e7c:	42a6      	cmp	r6, r4
 8001e7e:	d109      	bne.n	8001e94 <__libc_init_array+0x24>
 8001e80:	f000 f81a 	bl	8001eb8 <_init>
 8001e84:	2600      	movs	r6, #0
 8001e86:	4d0a      	ldr	r5, [pc, #40]	; (8001eb0 <__libc_init_array+0x40>)
 8001e88:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <__libc_init_array+0x44>)
 8001e8a:	1b64      	subs	r4, r4, r5
 8001e8c:	10a4      	asrs	r4, r4, #2
 8001e8e:	42a6      	cmp	r6, r4
 8001e90:	d105      	bne.n	8001e9e <__libc_init_array+0x2e>
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
 8001e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e98:	4798      	blx	r3
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	e7ee      	b.n	8001e7c <__libc_init_array+0xc>
 8001e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea2:	4798      	blx	r3
 8001ea4:	3601      	adds	r6, #1
 8001ea6:	e7f2      	b.n	8001e8e <__libc_init_array+0x1e>
 8001ea8:	08001ef4 	.word	0x08001ef4
 8001eac:	08001ef4 	.word	0x08001ef4
 8001eb0:	08001ef4 	.word	0x08001ef4
 8001eb4:	08001ef8 	.word	0x08001ef8

08001eb8 <_init>:
 8001eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eba:	bf00      	nop
 8001ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ebe:	bc08      	pop	{r3}
 8001ec0:	469e      	mov	lr, r3
 8001ec2:	4770      	bx	lr

08001ec4 <_fini>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	bf00      	nop
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr
