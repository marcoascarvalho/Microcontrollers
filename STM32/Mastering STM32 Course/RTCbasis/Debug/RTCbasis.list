
RTCbasis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cdc  08002cdc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cdc  08002cdc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cdc  08002cdc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000005c  08002d40  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08002d40  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004e8a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c7  00000000  00000000  00024f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  00026720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049e  00000000  00000000  00026d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166a0  00000000  00000000  0002721e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007e4c  00000000  00000000  0003d8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008029b  00000000  00000000  0004570a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c90  00000000  00000000  000c59a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c7638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c30 	.word	0x08002c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c30 	.word	0x08002c30

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	RTC_TimeTypeDef sTime = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2100      	movs	r1, #0
 8000156:	460a      	mov	r2, r1
 8000158:	801a      	strh	r2, [r3, #0]
 800015a:	460a      	mov	r2, r1
 800015c:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDate = {0};
 800015e:	2300      	movs	r3, #0
 8000160:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fa5b 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f897 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f919 	bl	80003a0 <MX_GPIO_Init>
  MX_RTC_Init();
 800016e:	f000 f8f1 	bl	8000354 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //Check if data stored in Backup register 1 fits the previous record
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x1122)
 8000172:	2101      	movs	r1, #1
 8000174:	4842      	ldr	r0, [pc, #264]	; (8000280 <main+0x134>)
 8000176:	f002 f88d 	bl	8002294 <HAL_RTCEx_BKUPRead>
 800017a:	4603      	mov	r3, r0
 800017c:	f241 1222 	movw	r2, #4386	; 0x1122
 8000180:	4293      	cmp	r3, r2
 8000182:	d02a      	beq.n	80001da <main+0x8e>
  {
	  /* Initialize RTC and set time and date */
	  sTime.Hours = 0x10;
 8000184:	2310      	movs	r3, #16
 8000186:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x10;
 8000188:	2310      	movs	r3, #16
 800018a:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x00;
 800018c:	2300      	movs	r3, #0
 800018e:	71bb      	strb	r3, [r7, #6]
	  //sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	  //sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2201      	movs	r2, #1
 8000194:	4619      	mov	r1, r3
 8000196:	483a      	ldr	r0, [pc, #232]	; (8000280 <main+0x134>)
 8000198:	f001 fb46 	bl	8001828 <HAL_RTC_SetTime>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <main+0x5a>
	  {
		  Error_Handler();
 80001a2:	f000 f955 	bl	8000450 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80001a6:	2306      	movs	r3, #6
 80001a8:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JUNE;
 80001aa:	2306      	movs	r3, #6
 80001ac:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x11;
 80001ae:	2311      	movs	r3, #17
 80001b0:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x22;
 80001b2:	2322      	movs	r3, #34	; 0x22
 80001b4:	70fb      	strb	r3, [r7, #3]
	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80001b6:	463b      	mov	r3, r7
 80001b8:	2201      	movs	r2, #1
 80001ba:	4619      	mov	r1, r3
 80001bc:	4830      	ldr	r0, [pc, #192]	; (8000280 <main+0x134>)
 80001be:	f001 fca3 	bl	8001b08 <HAL_RTC_SetDate>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <main+0x80>
	  {
	  	  Error_Handler();
 80001c8:	f000 f942 	bl	8000450 <Error_Handler>
	  }

	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x1122); //Write data in Backup register 1
 80001cc:	f241 1222 	movw	r2, #4386	; 0x1122
 80001d0:	2101      	movs	r1, #1
 80001d2:	482b      	ldr	r0, [pc, #172]	; (8000280 <main+0x134>)
 80001d4:	f002 f844 	bl	8002260 <HAL_RTCEx_BKUPWrite>
 80001d8:	e032      	b.n	8000240 <main+0xf4>
  }
  else
  {
	  //Check the Power On Reset Flag
	  if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 80001da:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <main+0x138>)
 80001dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d00f      	beq.n	8000206 <main+0xba>
	  {
		  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ec:	4826      	ldr	r0, [pc, #152]	; (8000288 <main+0x13c>)
 80001ee:	f000 fd03 	bl	8000bf8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f6:	f000 fa73 	bl	80006e0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	4821      	ldr	r0, [pc, #132]	; (8000288 <main+0x13c>)
 8000202:	f000 fcf9 	bl	8000bf8 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 fa69 	bl	80006e0 <HAL_Delay>
	  //Check the Pin Reset Flag
	  if(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800020e:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <main+0x138>)
 8000210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000216:	2b00      	cmp	r3, #0
 8000218:	d00f      	beq.n	800023a <main+0xee>
	  {
		  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	4819      	ldr	r0, [pc, #100]	; (8000288 <main+0x13c>)
 8000222:	f000 fce9 	bl	8000bf8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022a:	f000 fa59 	bl	80006e0 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 800022e:	2201      	movs	r2, #1
 8000230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <main+0x13c>)
 8000236:	f000 fcdf 	bl	8000bf8 <HAL_GPIO_WritePin>
	  }
	  //Clear source Reset Flag
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <main+0x140>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Update Calendar information each second
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	4619      	mov	r1, r3
 8000246:	480e      	ldr	r0, [pc, #56]	; (8000280 <main+0x134>)
 8000248:	f001 fb86 	bl	8001958 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800024c:	463b      	mov	r3, r7
 800024e:	2200      	movs	r2, #0
 8000250:	4619      	mov	r1, r3
 8000252:	480b      	ldr	r0, [pc, #44]	; (8000280 <main+0x134>)
 8000254:	f001 fd0e 	bl	8001c74 <HAL_RTC_GetDate>
	  sprintf(dateTime, "%02d:%02d:%02d %02d/%02d/%02d", sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);
 8000258:	793b      	ldrb	r3, [r7, #4]
 800025a:	461c      	mov	r4, r3
 800025c:	797b      	ldrb	r3, [r7, #5]
 800025e:	461d      	mov	r5, r3
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	78ba      	ldrb	r2, [r7, #2]
 8000264:	7879      	ldrb	r1, [r7, #1]
 8000266:	78f8      	ldrb	r0, [r7, #3]
 8000268:	9003      	str	r0, [sp, #12]
 800026a:	9102      	str	r1, [sp, #8]
 800026c:	9201      	str	r2, [sp, #4]
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	462b      	mov	r3, r5
 8000272:	4622      	mov	r2, r4
 8000274:	4906      	ldr	r1, [pc, #24]	; (8000290 <main+0x144>)
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <main+0x148>)
 8000278:	f002 f828 	bl	80022cc <siprintf>
  {
 800027c:	e7e0      	b.n	8000240 <main+0xf4>
 800027e:	bf00      	nop
 8000280:	20000078 	.word	0x20000078
 8000284:	40021000 	.word	0x40021000
 8000288:	40010c00 	.word	0x40010c00
 800028c:	424204e0 	.word	0x424204e0
 8000290:	08002c48 	.word	0x08002c48
 8000294:	2000008c 	.word	0x2000008c

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b094      	sub	sp, #80	; 0x50
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 f830 	bl	800230c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002c8:	2305      	movs	r3, #5
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fca4 	bl	8000c40 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002fe:	f000 f8a7 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000312:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f000 ff10 	bl	8001144 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800032a:	f000 f891 	bl	8000450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800032e:	2301      	movs	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000336:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4618      	mov	r0, r3
 800033c:	f001 f87c 	bl	8001438 <HAL_RCCEx_PeriphCLKConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000346:	f000 f883 	bl	8000450 <Error_Handler>
  }
}
 800034a:	bf00      	nop
 800034c:	3750      	adds	r7, #80	; 0x50
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2100      	movs	r1, #0
 800035e:	460a      	mov	r2, r1
 8000360:	801a      	strh	r2, [r3, #0]
 8000362:	460a      	mov	r2, r1
 8000364:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000366:	2300      	movs	r3, #0
 8000368:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_RTC_Init+0x44>)
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <MX_RTC_Init+0x48>)
 800036e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_RTC_Init+0x44>)
 8000372:	f04f 32ff 	mov.w	r2, #4294967295
 8000376:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_RTC_Init+0x44>)
 800037a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800037e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_RTC_Init+0x44>)
 8000382:	f001 f9c5 	bl	8001710 <HAL_RTC_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800038c:	f000 f860 	bl	8000450 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000078 	.word	0x20000078
 800039c:	40002800 	.word	0x40002800

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b24      	ldr	r3, [pc, #144]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a23      	ldr	r2, [pc, #140]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b21      	ldr	r3, [pc, #132]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a1d      	ldr	r2, [pc, #116]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0320 	and.w	r3, r3, #32
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a17      	ldr	r2, [pc, #92]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_GPIO_Init+0xa8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a11      	ldr	r2, [pc, #68]	; (8000448 <MX_GPIO_Init+0xa8>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_GPIO_Init+0xa8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	480c      	ldr	r0, [pc, #48]	; (800044c <MX_GPIO_Init+0xac>)
 800041c:	f000 fbec 	bl	8000bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_D1_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin;
 8000420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D1_GPIO_Port, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <MX_GPIO_Init+0xac>)
 800043a:	f000 fa59 	bl	80008f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043e:	bf00      	nop
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40010c00 	.word	0x40010c00

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	e7fe      	b.n	8000458 <Error_Handler+0x8>
	...

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <HAL_RTC_MspInit+0x3c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d110      	bne.n	80004f4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80004d2:	f000 fba9 	bl	8000c28 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_RTC_MspInit+0x40>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a09      	ldr	r2, [pc, #36]	; (8000500 <HAL_RTC_MspInit+0x40>)
 80004dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_RTC_MspInit+0x40>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_RTC_MspInit+0x44>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40002800 	.word	0x40002800
 8000500:	40021000 	.word	0x40021000
 8000504:	4242043c 	.word	0x4242043c

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f000 f8ab 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f001 fec8 	bl	800231c <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20005000 	.word	0x20005000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	200000f0 	.word	0x200000f0
 80005c0:	20000240 	.word	0x20000240

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d0:	f7ff fff8 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005d6:	490c      	ldr	r1, [pc, #48]	; (8000608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005ec:	4c09      	ldr	r4, [pc, #36]	; (8000614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fa:	f001 fe95 	bl	8002328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fda5 	bl	800014c <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800060c:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 8000610:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000614:	20000240 	.word	0x20000240

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f92b 	bl	8000888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff ff10 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f935 	bl	80008d6 <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f90b 	bl	800089e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x20>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000008 	.word	0x20000008
 80006c8:	200000f4 	.word	0x200000f4

080006cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	200000f4 	.word	0x200000f4

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff fff0 	bl	80006cc <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_Delay+0x44>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffe0 	bl	80006cc <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
         );
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	; 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000854:	d301      	bcc.n	800085a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000856:	2301      	movs	r3, #1
 8000858:	e00f      	b.n	800087a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <SysTick_Config+0x40>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000862:	210f      	movs	r1, #15
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f7ff ff90 	bl	800078c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <SysTick_Config+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SysTick_Config+0x40>)
 8000874:	2207      	movs	r2, #7
 8000876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	e000e010 	.word	0xe000e010

08000888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff49 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b0:	f7ff ff5e 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	f7ff ff90 	bl	80007e0 <NVIC_EncodePriority>
 80008c0:	4602      	mov	r2, r0
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff5f 	bl	800078c <__NVIC_SetPriority>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffb0 	bl	8000844 <SysTick_Config>
 80008e4:	4603      	mov	r3, r0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b08b      	sub	sp, #44	; 0x2c
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000902:	e169      	b.n	8000bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000904:	2201      	movs	r2, #1
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	429a      	cmp	r2, r3
 800091e:	f040 8158 	bne.w	8000bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a9a      	ldr	r2, [pc, #616]	; (8000b90 <HAL_GPIO_Init+0x2a0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d05e      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 800092c:	4a98      	ldr	r2, [pc, #608]	; (8000b90 <HAL_GPIO_Init+0x2a0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d875      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000932:	4a98      	ldr	r2, [pc, #608]	; (8000b94 <HAL_GPIO_Init+0x2a4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d058      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000938:	4a96      	ldr	r2, [pc, #600]	; (8000b94 <HAL_GPIO_Init+0x2a4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d86f      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800093e:	4a96      	ldr	r2, [pc, #600]	; (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d052      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000944:	4a94      	ldr	r2, [pc, #592]	; (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d869      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800094a:	4a94      	ldr	r2, [pc, #592]	; (8000b9c <HAL_GPIO_Init+0x2ac>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d04c      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000950:	4a92      	ldr	r2, [pc, #584]	; (8000b9c <HAL_GPIO_Init+0x2ac>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d863      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000956:	4a92      	ldr	r2, [pc, #584]	; (8000ba0 <HAL_GPIO_Init+0x2b0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d046      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 800095c:	4a90      	ldr	r2, [pc, #576]	; (8000ba0 <HAL_GPIO_Init+0x2b0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d85d      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000962:	2b12      	cmp	r3, #18
 8000964:	d82a      	bhi.n	80009bc <HAL_GPIO_Init+0xcc>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d859      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800096a:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <HAL_GPIO_Init+0x80>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	080009eb 	.word	0x080009eb
 8000974:	080009c5 	.word	0x080009c5
 8000978:	080009d7 	.word	0x080009d7
 800097c:	08000a19 	.word	0x08000a19
 8000980:	08000a1f 	.word	0x08000a1f
 8000984:	08000a1f 	.word	0x08000a1f
 8000988:	08000a1f 	.word	0x08000a1f
 800098c:	08000a1f 	.word	0x08000a1f
 8000990:	08000a1f 	.word	0x08000a1f
 8000994:	08000a1f 	.word	0x08000a1f
 8000998:	08000a1f 	.word	0x08000a1f
 800099c:	08000a1f 	.word	0x08000a1f
 80009a0:	08000a1f 	.word	0x08000a1f
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	08000a1f 	.word	0x08000a1f
 80009ac:	08000a1f 	.word	0x08000a1f
 80009b0:	08000a1f 	.word	0x08000a1f
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009e1 	.word	0x080009e1
 80009bc:	4a79      	ldr	r2, [pc, #484]	; (8000ba4 <HAL_GPIO_Init+0x2b4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009c2:	e02c      	b.n	8000a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e029      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	3304      	adds	r3, #4
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e024      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	3308      	adds	r3, #8
 80009dc:	623b      	str	r3, [r7, #32]
          break;
 80009de:	e01f      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	330c      	adds	r3, #12
 80009e6:	623b      	str	r3, [r7, #32]
          break;
 80009e8:	e01a      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f2:	2304      	movs	r3, #4
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e013      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a00:	2308      	movs	r3, #8
 8000a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	611a      	str	r2, [r3, #16]
          break;
 8000a0a:	e009      	b.n	8000a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	615a      	str	r2, [r3, #20]
          break;
 8000a16:	e003      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          break;
 8000a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d801      	bhi.n	8000a2a <HAL_GPIO_Init+0x13a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	e001      	b.n	8000a2e <HAL_GPIO_Init+0x13e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	d802      	bhi.n	8000a3c <HAL_GPIO_Init+0x14c>
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x152>
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	3b08      	subs	r3, #8
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	210f      	movs	r1, #15
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	6a39      	ldr	r1, [r7, #32]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80b1 	beq.w	8000bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a70:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a4c      	ldr	r2, [pc, #304]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a88:	4a48      	ldr	r2, [pc, #288]	; (8000bac <HAL_GPIO_Init+0x2bc>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <HAL_GPIO_Init+0x2c0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d013      	beq.n	8000adc <HAL_GPIO_Init+0x1ec>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <HAL_GPIO_Init+0x2c4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d00d      	beq.n	8000ad8 <HAL_GPIO_Init+0x1e8>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a3e      	ldr	r2, [pc, #248]	; (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d007      	beq.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a3d      	ldr	r2, [pc, #244]	; (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d101      	bne.n	8000ad0 <HAL_GPIO_Init+0x1e0>
 8000acc:	2303      	movs	r3, #3
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	e004      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e000      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000adc:	2300      	movs	r3, #0
 8000ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae0:	f002 0203 	and.w	r2, r2, #3
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	4093      	lsls	r3, r2
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aee:	492f      	ldr	r1, [pc, #188]	; (8000bac <HAL_GPIO_Init+0x2bc>)
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3302      	adds	r3, #2
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b08:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	492c      	ldr	r1, [pc, #176]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	608b      	str	r3, [r1, #8]
 8000b14:	e006      	b.n	8000b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4928      	ldr	r1, [pc, #160]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	4922      	ldr	r1, [pc, #136]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60cb      	str	r3, [r1, #12]
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	491e      	ldr	r1, [pc, #120]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4918      	ldr	r1, [pc, #96]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	604b      	str	r3, [r1, #4]
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4914      	ldr	r1, [pc, #80]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d021      	beq.n	8000bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	490e      	ldr	r1, [pc, #56]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
 8000b8c:	e021      	b.n	8000bd2 <HAL_GPIO_Init+0x2e2>
 8000b8e:	bf00      	nop
 8000b90:	10320000 	.word	0x10320000
 8000b94:	10310000 	.word	0x10310000
 8000b98:	10220000 	.word	0x10220000
 8000b9c:	10210000 	.word	0x10210000
 8000ba0:	10120000 	.word	0x10120000
 8000ba4:	10110000 	.word	0x10110000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40011400 	.word	0x40011400
 8000bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_GPIO_Init+0x304>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	4909      	ldr	r1, [pc, #36]	; (8000bf4 <HAL_GPIO_Init+0x304>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	fa22 f303 	lsr.w	r3, r2, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f47f ae8e 	bne.w	8000904 <HAL_GPIO_Init+0x14>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	372c      	adds	r7, #44	; 0x2c
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c14:	e003      	b.n	8000c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	041a      	lsls	r2, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	611a      	str	r2, [r3, #16]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_PWR_EnableBkUpAccess+0x14>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	420e0020 	.word	0x420e0020

08000c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e272      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8087 	beq.w	8000d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c60:	4b92      	ldr	r3, [pc, #584]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d00c      	beq.n	8000c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c6c:	4b8f      	ldr	r3, [pc, #572]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d112      	bne.n	8000c9e <HAL_RCC_OscConfig+0x5e>
 8000c78:	4b8c      	ldr	r3, [pc, #560]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c84:	d10b      	bne.n	8000c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c86:	4b89      	ldr	r3, [pc, #548]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d06c      	beq.n	8000d6c <HAL_RCC_OscConfig+0x12c>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d168      	bne.n	8000d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e24c      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x76>
 8000ca8:	4b80      	ldr	r3, [pc, #512]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a7f      	ldr	r2, [pc, #508]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e02e      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x98>
 8000cbe:	4b7b      	ldr	r3, [pc, #492]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a7a      	ldr	r2, [pc, #488]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a77      	ldr	r2, [pc, #476]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e01d      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0xbc>
 8000ce2:	4b72      	ldr	r3, [pc, #456]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a71      	ldr	r2, [pc, #452]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a6e      	ldr	r2, [pc, #440]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e00b      	b.n	8000d14 <HAL_RCC_OscConfig+0xd4>
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a6a      	ldr	r2, [pc, #424]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b68      	ldr	r3, [pc, #416]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a67      	ldr	r2, [pc, #412]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fcd6 	bl	80006cc <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fcd2 	bl	80006cc <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e200      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0xe4>
 8000d42:	e014      	b.n	8000d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fcc2 	bl	80006cc <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fcbe 	bl	80006cc <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e1ec      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b53      	ldr	r3, [pc, #332]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x10c>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d063      	beq.n	8000e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d11c      	bne.n	8000dcc <HAL_RCC_OscConfig+0x18c>
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d116      	bne.n	8000dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e1c0      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4939      	ldr	r1, [pc, #228]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	e03a      	b.n	8000e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d020      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	4b36      	ldr	r3, [pc, #216]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fc77 	bl	80006cc <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de2:	f7ff fc73 	bl	80006cc <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e1a1      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e00:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
 8000e14:	e015      	b.n	8000e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_RCC_OscConfig+0x270>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc56 	bl	80006cc <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fc52 	bl	80006cc <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e180      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d03a      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d019      	beq.n	8000e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc36 	bl	80006cc <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc32 	bl	80006cc <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e160      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_RCC_OscConfig+0x26c>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f0      	beq.n	8000e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 faba 	bl	80013fc <RCC_Delay>
 8000e88:	e01c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_RCC_OscConfig+0x274>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fc1c 	bl	80006cc <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e96:	e00f      	b.n	8000eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc18 	bl	80006cc <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d908      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e146      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	42420000 	.word	0x42420000
 8000eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e9      	bne.n	8000e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80a6 	beq.w	800101e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed6:	4b8b      	ldr	r3, [pc, #556]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10d      	bne.n	8000efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a87      	ldr	r2, [pc, #540]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b85      	ldr	r3, [pc, #532]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000efa:	2301      	movs	r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	4b82      	ldr	r3, [pc, #520]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d118      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0a:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7e      	ldr	r2, [pc, #504]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fbd9 	bl	80006cc <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff fbd5 	bl	80006cc <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e103      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	4b75      	ldr	r3, [pc, #468]	; (8001108 <HAL_RCC_OscConfig+0x4c8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x312>
 8000f44:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	e02d      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x334>
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a69      	ldr	r2, [pc, #420]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	4b67      	ldr	r3, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a66      	ldr	r2, [pc, #408]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6213      	str	r3, [r2, #32]
 8000f72:	e01c      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d10c      	bne.n	8000f96 <HAL_RCC_OscConfig+0x356>
 8000f7c:	4b61      	ldr	r3, [pc, #388]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	4a60      	ldr	r2, [pc, #384]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6213      	str	r3, [r2, #32]
 8000f88:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a5d      	ldr	r2, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6213      	str	r3, [r2, #32]
 8000f94:	e00b      	b.n	8000fae <HAL_RCC_OscConfig+0x36e>
 8000f96:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a5a      	ldr	r2, [pc, #360]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b58      	ldr	r3, [pc, #352]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d015      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fb89 	bl	80006cc <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbc:	e00a      	b.n	8000fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fb85 	bl	80006cc <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e0b1      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0ee      	beq.n	8000fbe <HAL_RCC_OscConfig+0x37e>
 8000fe0:	e014      	b.n	800100c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fb73 	bl	80006cc <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe8:	e00a      	b.n	8001000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fea:	f7ff fb6f 	bl	80006cc <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e09b      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001000:	4b40      	ldr	r3, [pc, #256]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ee      	bne.n	8000fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d105      	bne.n	800101e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a3b      	ldr	r2, [pc, #236]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 8087 	beq.w	8001136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d061      	beq.n	80010f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d146      	bne.n	80010ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <HAL_RCC_OscConfig+0x4cc>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb43 	bl	80006cc <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fb3f 	bl	80006cc <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e06d      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001070:	d108      	bne.n	8001084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	4921      	ldr	r1, [pc, #132]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a19      	ldr	r1, [r3, #32]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	430b      	orrs	r3, r1
 8001096:	491b      	ldr	r1, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_RCC_OscConfig+0x4cc>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fb13 	bl	80006cc <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fb0f 	bl	80006cc <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e03d      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x46a>
 80010c8:	e035      	b.n	8001136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_RCC_OscConfig+0x4cc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fafc 	bl	80006cc <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff faf8 	bl	80006cc <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e026      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x498>
 80010f6:	e01e      	b.n	8001136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e019      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
 8001104:	40021000 	.word	0x40021000
 8001108:	40007000 	.word	0x40007000
 800110c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_OscConfig+0x500>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	429a      	cmp	r2, r3
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	429a      	cmp	r2, r3
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0d0      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d910      	bls.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 0207 	bic.w	r2, r3, #7
 800116e:	4965      	ldr	r1, [pc, #404]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001176:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d001      	beq.n	8001188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0b8      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d020      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a0:	4b59      	ldr	r3, [pc, #356]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b8:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c4:	4b50      	ldr	r3, [pc, #320]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	494d      	ldr	r1, [pc, #308]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d040      	beq.n	8001264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d115      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e07f      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d107      	bne.n	8001212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e073      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06b      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0203 	bic.w	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4936      	ldr	r1, [pc, #216]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff fa4a 	bl	80006cc <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	e00a      	b.n	8001252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f7ff fa46 	bl	80006cc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e053      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 020c 	and.w	r2, r3, #12
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	429a      	cmp	r2, r3
 8001262:	d1eb      	bne.n	800123c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d210      	bcs.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e032      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4916      	ldr	r1, [pc, #88]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	490e      	ldr	r1, [pc, #56]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012d2:	f000 f821 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 80012d6:	4602      	mov	r2, r0
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	490a      	ldr	r1, [pc, #40]	; (800130c <HAL_RCC_ClockConfig+0x1c8>)
 80012e4:	5ccb      	ldrb	r3, [r1, r3]
 80012e6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_RCC_ClockConfig+0x1cc>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1d0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f9a8 	bl	8000648 <HAL_InitTick>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000
 8001308:	40021000 	.word	0x40021000
 800130c:	08002c68 	.word	0x08002c68
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d002      	beq.n	8001348 <HAL_RCC_GetSysClockFreq+0x30>
 8001342:	2b08      	cmp	r3, #8
 8001344:	d003      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x36>
 8001346:	e027      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800134a:	613b      	str	r3, [r7, #16]
      break;
 800134c:	e027      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d010      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0c5b      	lsrs	r3, r3, #17
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800137a:	fb03 f202 	mul.w	r2, r3, r2
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	fbb2 f3f3 	udiv	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e004      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	613b      	str	r3, [r7, #16]
      break;
 8001396:	e002      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800139a:	613b      	str	r3, [r7, #16]
      break;
 800139c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139e:	693b      	ldr	r3, [r7, #16]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	007a1200 	.word	0x007a1200
 80013b4:	08002c80 	.word	0x08002c80
 80013b8:	08002c90 	.word	0x08002c90
 80013bc:	003d0900 	.word	0x003d0900

080013c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff fff2 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0adb      	lsrs	r3, r3, #11
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	08002c78 	.word	0x08002c78

080013fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <RCC_Delay+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <RCC_Delay+0x38>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001418:	bf00      	nop
  }
  while (Delay --);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <RCC_Delay+0x1c>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d07d      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10d      	bne.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	61d3      	str	r3, [r2, #28]
 8001470:	4b49      	ldr	r3, [pc, #292]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147c:	2301      	movs	r3, #1
 800147e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d118      	bne.n	80014be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148c:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a42      	ldr	r2, [pc, #264]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001498:	f7ff f918 	bl	80006cc <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	e008      	b.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff f914 	bl	80006cc <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e06d      	b.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d02e      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d027      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d014      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff f8e3 	bl	80006cc <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff f8df 	bl	80006cc <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e036      	b.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4917      	ldr	r1, [pc, #92]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800153a:	4313      	orrs	r3, r2
 800153c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800154a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	490b      	ldr	r1, [pc, #44]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4904      	ldr	r1, [pc, #16]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	42420440 	.word	0x42420440

080015a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d00a      	beq.n	80015dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	f200 808a 	bhi.w	80016e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d045      	beq.n	8001660 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d075      	beq.n	80016c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80015da:	e082      	b.n	80016e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80015dc:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80015e2:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d07b      	beq.n	80016e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	0c9b      	lsrs	r3, r3, #18
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d015      	beq.n	8001632 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	0c5b      	lsrs	r3, r3, #17
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00d      	beq.n	800163c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001620:	4a38      	ldr	r2, [pc, #224]	; (8001704 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fbb2 f2f3 	udiv	r2, r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	e004      	b.n	800163c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4a34      	ldr	r2, [pc, #208]	; (8001708 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001648:	d102      	bne.n	8001650 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	61bb      	str	r3, [r7, #24]
      break;
 800164e:	e04a      	b.n	80016e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4a2d      	ldr	r2, [pc, #180]	; (800170c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
      break;
 800165e:	e042      	b.n	80016e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001670:	d108      	bne.n	8001684 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800167c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	e01f      	b.n	80016c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168e:	d109      	bne.n	80016a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800169c:	f649 4340 	movw	r3, #40000	; 0x9c40
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	e00f      	b.n	80016c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ae:	d11c      	bne.n	80016ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d016      	beq.n	80016ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80016bc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80016c0:	61bb      	str	r3, [r7, #24]
      break;
 80016c2:	e012      	b.n	80016ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80016c4:	e011      	b.n	80016ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80016c6:	f7ff fe85 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	0b9b      	lsrs	r3, r3, #14
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	3301      	adds	r3, #1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	61bb      	str	r3, [r7, #24]
      break;
 80016e0:	e004      	b.n	80016ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80016e2:	bf00      	nop
 80016e4:	e002      	b.n	80016ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80016e6:	bf00      	nop
 80016e8:	e000      	b.n	80016ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80016ea:	bf00      	nop
    }
  }
  return (frequency);
 80016ec:	69bb      	ldr	r3, [r7, #24]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	08002c94 	.word	0x08002c94
 8001700:	08002ca4 	.word	0x08002ca4
 8001704:	007a1200 	.word	0x007a1200
 8001708:	003d0900 	.word	0x003d0900
 800170c:	aaaaaaab 	.word	0xaaaaaaab

08001710 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07a      	b.n	800181c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7c5b      	ldrb	r3, [r3, #17]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe fec2 	bl	80004c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 faea 	bl	8001d1c <HAL_RTC_WaitForSynchro>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e061      	b.n	800181c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fba3 	bl	8001ea4 <RTC_EnterInitMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2204      	movs	r2, #4
 8001768:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e056      	b.n	800181c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0207 	bic.w	r2, r2, #7
 800177c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RTC_Init+0x114>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a26      	ldr	r2, [pc, #152]	; (8001824 <HAL_RTC_Init+0x114>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RTC_Init+0x114>)
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4921      	ldr	r1, [pc, #132]	; (8001824 <HAL_RTC_Init+0x114>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d003      	beq.n	80017b6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e00e      	b.n	80017d4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fef4 	bl	80015a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80017bc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2204      	movs	r2, #4
 80017c8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e026      	b.n	800181c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	0c1a      	lsrs	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f002 020f 	and.w	r2, r2, #15
 80017e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	b292      	uxth	r2, r2
 80017ea:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fb81 	bl	8001ef4 <RTC_ExitInitMode>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00c      	b.n	800181c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800181a:	2300      	movs	r3, #0
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40006c00 	.word	0x40006c00

08001828 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RTC_SetTime+0x20>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e080      	b.n	800194e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	7c1b      	ldrb	r3, [r3, #16]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_RTC_SetTime+0x30>
 8001854:	2302      	movs	r3, #2
 8001856:	e07a      	b.n	800194e <HAL_RTC_SetTime+0x126>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2202      	movs	r2, #2
 8001862:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d113      	bne.n	8001892 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001874:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	4619      	mov	r1, r3
 800187e:	460b      	mov	r3, r1
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	1a5b      	subs	r3, r3, r1
 8001884:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001886:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e01e      	b.n	80018d0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fb71 	bl	8001f7e <RTC_Bcd2ToByte>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80018a4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fb66 	bl	8001f7e <RTC_Bcd2ToByte>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018be:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fb5a 	bl	8001f7e <RTC_Bcd2ToByte>
 80018ca:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018cc:	4423      	add	r3, r4
 80018ce:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80018d0:	6979      	ldr	r1, [r7, #20]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 fa7f 	bl	8001dd6 <RTC_WriteTimeCounter>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2204      	movs	r2, #4
 80018e2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e02f      	b.n	800194e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0205 	bic.w	r2, r2, #5
 80018fc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fa90 	bl	8001e24 <RTC_ReadAlarmCounter>
 8001904:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d018      	beq.n	8001940 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	429a      	cmp	r2, r3
 8001914:	d214      	bcs.n	8001940 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800191c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001920:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001922:	6939      	ldr	r1, [r7, #16]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fa96 	bl	8001e56 <RTC_WriteAlarmCounter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2204      	movs	r2, #4
 8001934:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e006      	b.n	800194e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800194c:	2300      	movs	r3, #0
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
	...

08001958 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_RTC_GetTime+0x28>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b5      	b.n	8001af0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0ac      	b.n	8001af0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f9ed 	bl	8001d76 <RTC_ReadTimeCounter>
 800199c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <HAL_RTC_GetTime+0x1a0>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0adb      	lsrs	r3, r3, #11
 80019a8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4b52      	ldr	r3, [pc, #328]	; (8001af8 <HAL_RTC_GetTime+0x1a0>)
 80019ae:	fba3 1302 	umull	r1, r3, r3, r2
 80019b2:	0adb      	lsrs	r3, r3, #11
 80019b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <HAL_RTC_GetTime+0x1a4>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	4a4a      	ldr	r2, [pc, #296]	; (8001af8 <HAL_RTC_GetTime+0x1a0>)
 80019d0:	fba2 1203 	umull	r1, r2, r2, r3
 80019d4:	0ad2      	lsrs	r2, r2, #11
 80019d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80019da:	fb01 f202 	mul.w	r2, r1, r2
 80019de:	1a9a      	subs	r2, r3, r2
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RTC_GetTime+0x1a4>)
 80019e2:	fba3 1302 	umull	r1, r3, r3, r2
 80019e6:	0959      	lsrs	r1, r3, #5
 80019e8:	460b      	mov	r3, r1
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a5b      	subs	r3, r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	1ad1      	subs	r1, r2, r3
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2b17      	cmp	r3, #23
 80019fc:	d955      	bls.n	8001aaa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4a3f      	ldr	r2, [pc, #252]	; (8001b00 <HAL_RTC_GetTime+0x1a8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001a0a:	6939      	ldr	r1, [r7, #16]
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_RTC_GetTime+0x1a8>)
 8001a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a12:	091a      	lsrs	r2, r3, #4
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	1aca      	subs	r2, r1, r3
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f9fd 	bl	8001e24 <RTC_ReadAlarmCounter>
 8001a2a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d008      	beq.n	8001a46 <HAL_RTC_GetTime+0xee>
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d904      	bls.n	8001a46 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	e002      	b.n	8001a4c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <HAL_RTC_GetTime+0x1ac>)
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f9ba 	bl	8001dd6 <RTC_WriteTimeCounter>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e041      	b.n	8001af0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d00c      	beq.n	8001a8e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4413      	add	r3, r2
 8001a7a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a7c:	69f9      	ldr	r1, [r7, #28]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f9e9 	bl	8001e56 <RTC_WriteAlarmCounter>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e030      	b.n	8001af0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a8e:	69f9      	ldr	r1, [r7, #28]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f9e0 	bl	8001e56 <RTC_WriteAlarmCounter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e027      	b.n	8001af0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fa88 	bl	8001fb8 <RTC_DateUpdate>
 8001aa8:	e003      	b.n	8001ab2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01a      	beq.n	8001aee <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fa41 	bl	8001f44 <RTC_ByteToBcd2>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fa38 	bl	8001f44 <RTC_ByteToBcd2>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	789b      	ldrb	r3, [r3, #2]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fa2f 	bl	8001f44 <RTC_ByteToBcd2>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	91a2b3c5 	.word	0x91a2b3c5
 8001afc:	88888889 	.word	0x88888889
 8001b00:	aaaaaaab 	.word	0xaaaaaaab
 8001b04:	00015180 	.word	0x00015180

08001b08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_RTC_SetDate+0x24>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e097      	b.n	8001c60 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	7c1b      	ldrb	r3, [r3, #16]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_RTC_SetDate+0x34>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e091      	b.n	8001c60 <HAL_RTC_SetDate+0x158>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2202      	movs	r2, #2
 8001b46:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	78da      	ldrb	r2, [r3, #3]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	785a      	ldrb	r2, [r3, #1]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	789a      	ldrb	r2, [r3, #2]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	739a      	strb	r2, [r3, #14]
 8001b66:	e01a      	b.n	8001b9e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	78db      	ldrb	r3, [r3, #3]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fa06 	bl	8001f7e <RTC_Bcd2ToByte>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f9fd 	bl	8001f7e <RTC_Bcd2ToByte>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f9f4 	bl	8001f7e <RTC_Bcd2ToByte>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	7bdb      	ldrb	r3, [r3, #15]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	7b59      	ldrb	r1, [r3, #13]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	7b9b      	ldrb	r3, [r3, #14]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f000 fadf 	bl	8002170 <RTC_WeekDayNum>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	7b1a      	ldrb	r2, [r3, #12]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f8d7 	bl	8001d76 <RTC_ReadTimeCounter>
 8001bc8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_RTC_SetDate+0x160>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0adb      	lsrs	r3, r3, #11
 8001bd4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b18      	cmp	r3, #24
 8001bda:	d93a      	bls.n	8001c52 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <HAL_RTC_SetDate+0x164>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_RTC_SetDate+0x168>)
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001bf2:	69f9      	ldr	r1, [r7, #28]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f8ee 	bl	8001dd6 <RTC_WriteTimeCounter>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2204      	movs	r2, #4
 8001c04:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e027      	b.n	8001c60 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f907 	bl	8001e24 <RTC_ReadAlarmCounter>
 8001c16:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d018      	beq.n	8001c52 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d214      	bcs.n	8001c52 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001c2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c32:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c34:	69b9      	ldr	r1, [r7, #24]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f90d 	bl	8001e56 <RTC_WriteAlarmCounter>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2204      	movs	r2, #4
 8001c46:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e006      	b.n	8001c60 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	91a2b3c5 	.word	0x91a2b3c5
 8001c6c:	aaaaaaab 	.word	0xaaaaaaab
 8001c70:	00015180 	.word	0x00015180

08001c74 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2100      	movs	r1, #0
 8001c86:	460a      	mov	r2, r1
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_RTC_GetDate+0x26>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e03a      	b.n	8001d14 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff fe56 	bl	8001958 <HAL_RTC_GetTime>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e02e      	b.n	8001d14 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	7b1a      	ldrb	r2, [r3, #12]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	7bda      	ldrb	r2, [r3, #15]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	7b5a      	ldrb	r2, [r3, #13]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	7b9a      	ldrb	r2, [r3, #14]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01a      	beq.n	8001d12 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	78db      	ldrb	r3, [r3, #3]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f92f 	bl	8001f44 <RTC_ByteToBcd2>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f926 	bl	8001f44 <RTC_ByteToBcd2>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f91d 	bl	8001f44 <RTC_ByteToBcd2>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e01d      	b.n	8001d6e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001d42:	f7fe fcc3 	bl	80006cc <HAL_GetTick>
 8001d46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001d48:	e009      	b.n	8001d5e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d4a:	f7fe fcbf 	bl	80006cc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d58:	d901      	bls.n	8001d5e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e007      	b.n	8001d6e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ee      	beq.n	8001d4a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b087      	sub	sp, #28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	827b      	strh	r3, [r7, #18]
 8001d82:	2300      	movs	r3, #0
 8001d84:	823b      	strh	r3, [r7, #16]
 8001d86:	2300      	movs	r3, #0
 8001d88:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001da6:	8a7a      	ldrh	r2, [r7, #18]
 8001da8:	8a3b      	ldrh	r3, [r7, #16]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d008      	beq.n	8001dc0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001dae:	8a3b      	ldrh	r3, [r7, #16]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e004      	b.n	8001dca <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001dc0:	8a7b      	ldrh	r3, [r7, #18]
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001dca:	697b      	ldr	r3, [r7, #20]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f85d 	bl	8001ea4 <RTC_EnterInitMode>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e011      	b.n	8001e1a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	0c12      	lsrs	r2, r2, #16
 8001dfe:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b292      	uxth	r2, r2
 8001e08:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f872 	bl	8001ef4 <RTC_ExitInitMode>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	81fb      	strh	r3, [r7, #14]
 8001e30:	2300      	movs	r3, #0
 8001e32:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	041a      	lsls	r2, r3, #16
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f81d 	bl	8001ea4 <RTC_EnterInitMode>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e011      	b.n	8001e9a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	0c12      	lsrs	r2, r2, #16
 8001e7e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	b292      	uxth	r2, r2
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f832 	bl	8001ef4 <RTC_ExitInitMode>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001eb0:	f7fe fc0c 	bl	80006cc <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001eb6:	e009      	b.n	8001ecc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001eb8:	f7fe fc08 	bl	80006cc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec6:	d901      	bls.n	8001ecc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e00f      	b.n	8001eec <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0210 	orr.w	r2, r2, #16
 8001ee8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0210 	bic.w	r2, r2, #16
 8001f0e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f10:	f7fe fbdc 	bl	80006cc <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001f16:	e009      	b.n	8001f2c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f18:	f7fe fbd8 	bl	80006cc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f26:	d901      	bls.n	8001f2c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e007      	b.n	8001f3c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0ee      	beq.n	8001f18 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8001f52:	e005      	b.n	8001f60 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	3b0a      	subs	r3, #10
 8001f5e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	d8f6      	bhi.n	8001f54 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7bdb      	ldrb	r3, [r3, #15]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7b5b      	ldrb	r3, [r3, #13]
 8001fdc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7b9b      	ldrb	r3, [r3, #14]
 8001fe2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	e06f      	b.n	80020ca <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d011      	beq.n	8002014 <RTC_DateUpdate+0x5c>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d00e      	beq.n	8002014 <RTC_DateUpdate+0x5c>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d00b      	beq.n	8002014 <RTC_DateUpdate+0x5c>
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b07      	cmp	r3, #7
 8002000:	d008      	beq.n	8002014 <RTC_DateUpdate+0x5c>
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d005      	beq.n	8002014 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b0a      	cmp	r3, #10
 800200c:	d002      	beq.n	8002014 <RTC_DateUpdate+0x5c>
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d117      	bne.n	8002044 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b1e      	cmp	r3, #30
 8002018:	d803      	bhi.n	8002022 <RTC_DateUpdate+0x6a>
      {
        day++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002020:	e050      	b.n	80020c4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d005      	beq.n	8002034 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	3301      	adds	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800202e:	2301      	movs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002032:	e047      	b.n	80020c4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002034:	2301      	movs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002038:	2301      	movs	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
          year++;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002042:	e03f      	b.n	80020c4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d008      	beq.n	800205c <RTC_DateUpdate+0xa4>
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b06      	cmp	r3, #6
 800204e:	d005      	beq.n	800205c <RTC_DateUpdate+0xa4>
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b09      	cmp	r3, #9
 8002054:	d002      	beq.n	800205c <RTC_DateUpdate+0xa4>
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b0b      	cmp	r3, #11
 800205a:	d10c      	bne.n	8002076 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b1d      	cmp	r3, #29
 8002060:	d803      	bhi.n	800206a <RTC_DateUpdate+0xb2>
      {
        day++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3301      	adds	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002068:	e02c      	b.n	80020c4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3301      	adds	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002070:	2301      	movs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002074:	e026      	b.n	80020c4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b1b      	cmp	r3, #27
 8002080:	d803      	bhi.n	800208a <RTC_DateUpdate+0xd2>
      {
        day++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e01c      	b.n	80020c4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b1c      	cmp	r3, #28
 800208e:	d111      	bne.n	80020b4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f839 	bl	800210c <RTC_IsLeapYear>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e00d      	b.n	80020c4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3301      	adds	r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
          day = 1U;
 80020ae:	2301      	movs	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e007      	b.n	80020c4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b1d      	cmp	r3, #29
 80020b8:	d104      	bne.n	80020c4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	3301      	adds	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
        day = 1U;
 80020c0:	2301      	movs	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d38b      	bcc.n	8001fea <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	6978      	ldr	r0, [r7, #20]
 80020f6:	f000 f83b 	bl	8002170 <RTC_WeekDayNum>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	731a      	strb	r2, [r3, #12]
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	e01d      	b.n	8002162 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4a10      	ldr	r2, [pc, #64]	; (800216c <RTC_IsLeapYear+0x60>)
 800212a:	fba2 1203 	umull	r1, r2, r2, r3
 800212e:	0952      	lsrs	r2, r2, #5
 8002130:	2164      	movs	r1, #100	; 0x64
 8002132:	fb01 f202 	mul.w	r2, r1, r2
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <RTC_IsLeapYear+0x60>)
 8002146:	fba2 1203 	umull	r1, r2, r2, r3
 800214a:	09d2      	lsrs	r2, r2, #7
 800214c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002150:	fb01 f202 	mul.w	r2, r1, r2
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002160:	2300      	movs	r3, #0
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	51eb851f 	.word	0x51eb851f

08002170 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
 800217c:	4613      	mov	r3, r2
 800217e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800218e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d82d      	bhi.n	80021f2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	4a2c      	ldr	r2, [pc, #176]	; (8002254 <RTC_WeekDayNum+0xe4>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	085a      	lsrs	r2, r3, #1
 80021aa:	78bb      	ldrb	r3, [r7, #2]
 80021ac:	441a      	add	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	441a      	add	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3b01      	subs	r3, #1
 80021be:	4926      	ldr	r1, [pc, #152]	; (8002258 <RTC_WeekDayNum+0xe8>)
 80021c0:	fba1 1303 	umull	r1, r3, r1, r3
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	4922      	ldr	r1, [pc, #136]	; (8002258 <RTC_WeekDayNum+0xe8>)
 80021ce:	fba1 1303 	umull	r1, r3, r1, r3
 80021d2:	09db      	lsrs	r3, r3, #7
 80021d4:	4413      	add	r3, r2
 80021d6:	1d1a      	adds	r2, r3, #4
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <RTC_WeekDayNum+0xec>)
 80021da:	fba3 1302 	umull	r1, r3, r3, r2
 80021de:	1ad1      	subs	r1, r2, r3
 80021e0:	0849      	lsrs	r1, r1, #1
 80021e2:	440b      	add	r3, r1
 80021e4:	0899      	lsrs	r1, r3, #2
 80021e6:	460b      	mov	r3, r1
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a5b      	subs	r3, r3, r1
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e029      	b.n	8002246 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <RTC_WeekDayNum+0xe4>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	085a      	lsrs	r2, r3, #1
 8002206:	78bb      	ldrb	r3, [r7, #2]
 8002208:	441a      	add	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	441a      	add	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	441a      	add	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4910      	ldr	r1, [pc, #64]	; (8002258 <RTC_WeekDayNum+0xe8>)
 8002218:	fba1 1303 	umull	r1, r3, r1, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	1ad2      	subs	r2, r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	490d      	ldr	r1, [pc, #52]	; (8002258 <RTC_WeekDayNum+0xe8>)
 8002224:	fba1 1303 	umull	r1, r3, r1, r3
 8002228:	09db      	lsrs	r3, r3, #7
 800222a:	4413      	add	r3, r2
 800222c:	1c9a      	adds	r2, r3, #2
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <RTC_WeekDayNum+0xec>)
 8002230:	fba3 1302 	umull	r1, r3, r3, r2
 8002234:	1ad1      	subs	r1, r2, r3
 8002236:	0849      	lsrs	r1, r1, #1
 8002238:	440b      	add	r3, r1
 800223a:	0899      	lsrs	r1, r3, #2
 800223c:	460b      	mov	r3, r1
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a5b      	subs	r3, r3, r1
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	b2db      	uxtb	r3, r3
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	38e38e39 	.word	0x38e38e39
 8002258:	51eb851f 	.word	0x51eb851f
 800225c:	24924925 	.word	0x24924925

08002260 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RTCEx_BKUPWrite+0x30>)
 8002272:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4413      	add	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	b292      	uxth	r2, r2
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40006c00 	.word	0x40006c00

08002294 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_RTCEx_BKUPRead+0x34>)
 80022a8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 80022bc:	68bb      	ldr	r3, [r7, #8]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40006c00 	.word	0x40006c00

080022cc <siprintf>:
 80022cc:	b40e      	push	{r1, r2, r3}
 80022ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022d2:	b500      	push	{lr}
 80022d4:	b09c      	sub	sp, #112	; 0x70
 80022d6:	ab1d      	add	r3, sp, #116	; 0x74
 80022d8:	9002      	str	r0, [sp, #8]
 80022da:	9006      	str	r0, [sp, #24]
 80022dc:	9107      	str	r1, [sp, #28]
 80022de:	9104      	str	r1, [sp, #16]
 80022e0:	4808      	ldr	r0, [pc, #32]	; (8002304 <siprintf+0x38>)
 80022e2:	4909      	ldr	r1, [pc, #36]	; (8002308 <siprintf+0x3c>)
 80022e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80022e8:	9105      	str	r1, [sp, #20]
 80022ea:	6800      	ldr	r0, [r0, #0]
 80022ec:	a902      	add	r1, sp, #8
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	f000 f98e 	bl	8002610 <_svfiprintf_r>
 80022f4:	2200      	movs	r2, #0
 80022f6:	9b02      	ldr	r3, [sp, #8]
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	b01c      	add	sp, #112	; 0x70
 80022fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002300:	b003      	add	sp, #12
 8002302:	4770      	bx	lr
 8002304:	20000058 	.word	0x20000058
 8002308:	ffff0208 	.word	0xffff0208

0800230c <memset>:
 800230c:	4603      	mov	r3, r0
 800230e:	4402      	add	r2, r0
 8002310:	4293      	cmp	r3, r2
 8002312:	d100      	bne.n	8002316 <memset+0xa>
 8002314:	4770      	bx	lr
 8002316:	f803 1b01 	strb.w	r1, [r3], #1
 800231a:	e7f9      	b.n	8002310 <memset+0x4>

0800231c <__errno>:
 800231c:	4b01      	ldr	r3, [pc, #4]	; (8002324 <__errno+0x8>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000058 	.word	0x20000058

08002328 <__libc_init_array>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2600      	movs	r6, #0
 800232c:	4d0c      	ldr	r5, [pc, #48]	; (8002360 <__libc_init_array+0x38>)
 800232e:	4c0d      	ldr	r4, [pc, #52]	; (8002364 <__libc_init_array+0x3c>)
 8002330:	1b64      	subs	r4, r4, r5
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	42a6      	cmp	r6, r4
 8002336:	d109      	bne.n	800234c <__libc_init_array+0x24>
 8002338:	f000 fc7a 	bl	8002c30 <_init>
 800233c:	2600      	movs	r6, #0
 800233e:	4d0a      	ldr	r5, [pc, #40]	; (8002368 <__libc_init_array+0x40>)
 8002340:	4c0a      	ldr	r4, [pc, #40]	; (800236c <__libc_init_array+0x44>)
 8002342:	1b64      	subs	r4, r4, r5
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	42a6      	cmp	r6, r4
 8002348:	d105      	bne.n	8002356 <__libc_init_array+0x2e>
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002350:	4798      	blx	r3
 8002352:	3601      	adds	r6, #1
 8002354:	e7ee      	b.n	8002334 <__libc_init_array+0xc>
 8002356:	f855 3b04 	ldr.w	r3, [r5], #4
 800235a:	4798      	blx	r3
 800235c:	3601      	adds	r6, #1
 800235e:	e7f2      	b.n	8002346 <__libc_init_array+0x1e>
 8002360:	08002cdc 	.word	0x08002cdc
 8002364:	08002cdc 	.word	0x08002cdc
 8002368:	08002cdc 	.word	0x08002cdc
 800236c:	08002ce0 	.word	0x08002ce0

08002370 <__retarget_lock_acquire_recursive>:
 8002370:	4770      	bx	lr

08002372 <__retarget_lock_release_recursive>:
 8002372:	4770      	bx	lr

08002374 <_free_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4605      	mov	r5, r0
 8002378:	2900      	cmp	r1, #0
 800237a:	d040      	beq.n	80023fe <_free_r+0x8a>
 800237c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002380:	1f0c      	subs	r4, r1, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	bfb8      	it	lt
 8002386:	18e4      	addlt	r4, r4, r3
 8002388:	f000 f8dc 	bl	8002544 <__malloc_lock>
 800238c:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <_free_r+0x8c>)
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	b933      	cbnz	r3, 80023a0 <_free_r+0x2c>
 8002392:	6063      	str	r3, [r4, #4]
 8002394:	6014      	str	r4, [r2, #0]
 8002396:	4628      	mov	r0, r5
 8002398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800239c:	f000 b8d8 	b.w	8002550 <__malloc_unlock>
 80023a0:	42a3      	cmp	r3, r4
 80023a2:	d908      	bls.n	80023b6 <_free_r+0x42>
 80023a4:	6820      	ldr	r0, [r4, #0]
 80023a6:	1821      	adds	r1, r4, r0
 80023a8:	428b      	cmp	r3, r1
 80023aa:	bf01      	itttt	eq
 80023ac:	6819      	ldreq	r1, [r3, #0]
 80023ae:	685b      	ldreq	r3, [r3, #4]
 80023b0:	1809      	addeq	r1, r1, r0
 80023b2:	6021      	streq	r1, [r4, #0]
 80023b4:	e7ed      	b.n	8002392 <_free_r+0x1e>
 80023b6:	461a      	mov	r2, r3
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	b10b      	cbz	r3, 80023c0 <_free_r+0x4c>
 80023bc:	42a3      	cmp	r3, r4
 80023be:	d9fa      	bls.n	80023b6 <_free_r+0x42>
 80023c0:	6811      	ldr	r1, [r2, #0]
 80023c2:	1850      	adds	r0, r2, r1
 80023c4:	42a0      	cmp	r0, r4
 80023c6:	d10b      	bne.n	80023e0 <_free_r+0x6c>
 80023c8:	6820      	ldr	r0, [r4, #0]
 80023ca:	4401      	add	r1, r0
 80023cc:	1850      	adds	r0, r2, r1
 80023ce:	4283      	cmp	r3, r0
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	d1e0      	bne.n	8002396 <_free_r+0x22>
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4408      	add	r0, r1
 80023da:	6010      	str	r0, [r2, #0]
 80023dc:	6053      	str	r3, [r2, #4]
 80023de:	e7da      	b.n	8002396 <_free_r+0x22>
 80023e0:	d902      	bls.n	80023e8 <_free_r+0x74>
 80023e2:	230c      	movs	r3, #12
 80023e4:	602b      	str	r3, [r5, #0]
 80023e6:	e7d6      	b.n	8002396 <_free_r+0x22>
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	1821      	adds	r1, r4, r0
 80023ec:	428b      	cmp	r3, r1
 80023ee:	bf01      	itttt	eq
 80023f0:	6819      	ldreq	r1, [r3, #0]
 80023f2:	685b      	ldreq	r3, [r3, #4]
 80023f4:	1809      	addeq	r1, r1, r0
 80023f6:	6021      	streq	r1, [r4, #0]
 80023f8:	6063      	str	r3, [r4, #4]
 80023fa:	6054      	str	r4, [r2, #4]
 80023fc:	e7cb      	b.n	8002396 <_free_r+0x22>
 80023fe:	bd38      	pop	{r3, r4, r5, pc}
 8002400:	20000238 	.word	0x20000238

08002404 <sbrk_aligned>:
 8002404:	b570      	push	{r4, r5, r6, lr}
 8002406:	4e0e      	ldr	r6, [pc, #56]	; (8002440 <sbrk_aligned+0x3c>)
 8002408:	460c      	mov	r4, r1
 800240a:	6831      	ldr	r1, [r6, #0]
 800240c:	4605      	mov	r5, r0
 800240e:	b911      	cbnz	r1, 8002416 <sbrk_aligned+0x12>
 8002410:	f000 fbaa 	bl	8002b68 <_sbrk_r>
 8002414:	6030      	str	r0, [r6, #0]
 8002416:	4621      	mov	r1, r4
 8002418:	4628      	mov	r0, r5
 800241a:	f000 fba5 	bl	8002b68 <_sbrk_r>
 800241e:	1c43      	adds	r3, r0, #1
 8002420:	d00a      	beq.n	8002438 <sbrk_aligned+0x34>
 8002422:	1cc4      	adds	r4, r0, #3
 8002424:	f024 0403 	bic.w	r4, r4, #3
 8002428:	42a0      	cmp	r0, r4
 800242a:	d007      	beq.n	800243c <sbrk_aligned+0x38>
 800242c:	1a21      	subs	r1, r4, r0
 800242e:	4628      	mov	r0, r5
 8002430:	f000 fb9a 	bl	8002b68 <_sbrk_r>
 8002434:	3001      	adds	r0, #1
 8002436:	d101      	bne.n	800243c <sbrk_aligned+0x38>
 8002438:	f04f 34ff 	mov.w	r4, #4294967295
 800243c:	4620      	mov	r0, r4
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	2000023c 	.word	0x2000023c

08002444 <_malloc_r>:
 8002444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002448:	1ccd      	adds	r5, r1, #3
 800244a:	f025 0503 	bic.w	r5, r5, #3
 800244e:	3508      	adds	r5, #8
 8002450:	2d0c      	cmp	r5, #12
 8002452:	bf38      	it	cc
 8002454:	250c      	movcc	r5, #12
 8002456:	2d00      	cmp	r5, #0
 8002458:	4607      	mov	r7, r0
 800245a:	db01      	blt.n	8002460 <_malloc_r+0x1c>
 800245c:	42a9      	cmp	r1, r5
 800245e:	d905      	bls.n	800246c <_malloc_r+0x28>
 8002460:	230c      	movs	r3, #12
 8002462:	2600      	movs	r6, #0
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4630      	mov	r0, r6
 8002468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800246c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002540 <_malloc_r+0xfc>
 8002470:	f000 f868 	bl	8002544 <__malloc_lock>
 8002474:	f8d8 3000 	ldr.w	r3, [r8]
 8002478:	461c      	mov	r4, r3
 800247a:	bb5c      	cbnz	r4, 80024d4 <_malloc_r+0x90>
 800247c:	4629      	mov	r1, r5
 800247e:	4638      	mov	r0, r7
 8002480:	f7ff ffc0 	bl	8002404 <sbrk_aligned>
 8002484:	1c43      	adds	r3, r0, #1
 8002486:	4604      	mov	r4, r0
 8002488:	d155      	bne.n	8002536 <_malloc_r+0xf2>
 800248a:	f8d8 4000 	ldr.w	r4, [r8]
 800248e:	4626      	mov	r6, r4
 8002490:	2e00      	cmp	r6, #0
 8002492:	d145      	bne.n	8002520 <_malloc_r+0xdc>
 8002494:	2c00      	cmp	r4, #0
 8002496:	d048      	beq.n	800252a <_malloc_r+0xe6>
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	4631      	mov	r1, r6
 800249c:	4638      	mov	r0, r7
 800249e:	eb04 0903 	add.w	r9, r4, r3
 80024a2:	f000 fb61 	bl	8002b68 <_sbrk_r>
 80024a6:	4581      	cmp	r9, r0
 80024a8:	d13f      	bne.n	800252a <_malloc_r+0xe6>
 80024aa:	6821      	ldr	r1, [r4, #0]
 80024ac:	4638      	mov	r0, r7
 80024ae:	1a6d      	subs	r5, r5, r1
 80024b0:	4629      	mov	r1, r5
 80024b2:	f7ff ffa7 	bl	8002404 <sbrk_aligned>
 80024b6:	3001      	adds	r0, #1
 80024b8:	d037      	beq.n	800252a <_malloc_r+0xe6>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	442b      	add	r3, r5
 80024be:	6023      	str	r3, [r4, #0]
 80024c0:	f8d8 3000 	ldr.w	r3, [r8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d038      	beq.n	800253a <_malloc_r+0xf6>
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	42a2      	cmp	r2, r4
 80024cc:	d12b      	bne.n	8002526 <_malloc_r+0xe2>
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	e00f      	b.n	80024f4 <_malloc_r+0xb0>
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	1b52      	subs	r2, r2, r5
 80024d8:	d41f      	bmi.n	800251a <_malloc_r+0xd6>
 80024da:	2a0b      	cmp	r2, #11
 80024dc:	d917      	bls.n	800250e <_malloc_r+0xca>
 80024de:	1961      	adds	r1, r4, r5
 80024e0:	42a3      	cmp	r3, r4
 80024e2:	6025      	str	r5, [r4, #0]
 80024e4:	bf18      	it	ne
 80024e6:	6059      	strne	r1, [r3, #4]
 80024e8:	6863      	ldr	r3, [r4, #4]
 80024ea:	bf08      	it	eq
 80024ec:	f8c8 1000 	streq.w	r1, [r8]
 80024f0:	5162      	str	r2, [r4, r5]
 80024f2:	604b      	str	r3, [r1, #4]
 80024f4:	4638      	mov	r0, r7
 80024f6:	f104 060b 	add.w	r6, r4, #11
 80024fa:	f000 f829 	bl	8002550 <__malloc_unlock>
 80024fe:	f026 0607 	bic.w	r6, r6, #7
 8002502:	1d23      	adds	r3, r4, #4
 8002504:	1af2      	subs	r2, r6, r3
 8002506:	d0ae      	beq.n	8002466 <_malloc_r+0x22>
 8002508:	1b9b      	subs	r3, r3, r6
 800250a:	50a3      	str	r3, [r4, r2]
 800250c:	e7ab      	b.n	8002466 <_malloc_r+0x22>
 800250e:	42a3      	cmp	r3, r4
 8002510:	6862      	ldr	r2, [r4, #4]
 8002512:	d1dd      	bne.n	80024d0 <_malloc_r+0x8c>
 8002514:	f8c8 2000 	str.w	r2, [r8]
 8002518:	e7ec      	b.n	80024f4 <_malloc_r+0xb0>
 800251a:	4623      	mov	r3, r4
 800251c:	6864      	ldr	r4, [r4, #4]
 800251e:	e7ac      	b.n	800247a <_malloc_r+0x36>
 8002520:	4634      	mov	r4, r6
 8002522:	6876      	ldr	r6, [r6, #4]
 8002524:	e7b4      	b.n	8002490 <_malloc_r+0x4c>
 8002526:	4613      	mov	r3, r2
 8002528:	e7cc      	b.n	80024c4 <_malloc_r+0x80>
 800252a:	230c      	movs	r3, #12
 800252c:	4638      	mov	r0, r7
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	f000 f80e 	bl	8002550 <__malloc_unlock>
 8002534:	e797      	b.n	8002466 <_malloc_r+0x22>
 8002536:	6025      	str	r5, [r4, #0]
 8002538:	e7dc      	b.n	80024f4 <_malloc_r+0xb0>
 800253a:	605b      	str	r3, [r3, #4]
 800253c:	deff      	udf	#255	; 0xff
 800253e:	bf00      	nop
 8002540:	20000238 	.word	0x20000238

08002544 <__malloc_lock>:
 8002544:	4801      	ldr	r0, [pc, #4]	; (800254c <__malloc_lock+0x8>)
 8002546:	f7ff bf13 	b.w	8002370 <__retarget_lock_acquire_recursive>
 800254a:	bf00      	nop
 800254c:	20000234 	.word	0x20000234

08002550 <__malloc_unlock>:
 8002550:	4801      	ldr	r0, [pc, #4]	; (8002558 <__malloc_unlock+0x8>)
 8002552:	f7ff bf0e 	b.w	8002372 <__retarget_lock_release_recursive>
 8002556:	bf00      	nop
 8002558:	20000234 	.word	0x20000234

0800255c <__ssputs_r>:
 800255c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002560:	461f      	mov	r7, r3
 8002562:	688e      	ldr	r6, [r1, #8]
 8002564:	4682      	mov	sl, r0
 8002566:	42be      	cmp	r6, r7
 8002568:	460c      	mov	r4, r1
 800256a:	4690      	mov	r8, r2
 800256c:	680b      	ldr	r3, [r1, #0]
 800256e:	d82c      	bhi.n	80025ca <__ssputs_r+0x6e>
 8002570:	898a      	ldrh	r2, [r1, #12]
 8002572:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002576:	d026      	beq.n	80025c6 <__ssputs_r+0x6a>
 8002578:	6965      	ldr	r5, [r4, #20]
 800257a:	6909      	ldr	r1, [r1, #16]
 800257c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002580:	eba3 0901 	sub.w	r9, r3, r1
 8002584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002588:	1c7b      	adds	r3, r7, #1
 800258a:	444b      	add	r3, r9
 800258c:	106d      	asrs	r5, r5, #1
 800258e:	429d      	cmp	r5, r3
 8002590:	bf38      	it	cc
 8002592:	461d      	movcc	r5, r3
 8002594:	0553      	lsls	r3, r2, #21
 8002596:	d527      	bpl.n	80025e8 <__ssputs_r+0x8c>
 8002598:	4629      	mov	r1, r5
 800259a:	f7ff ff53 	bl	8002444 <_malloc_r>
 800259e:	4606      	mov	r6, r0
 80025a0:	b360      	cbz	r0, 80025fc <__ssputs_r+0xa0>
 80025a2:	464a      	mov	r2, r9
 80025a4:	6921      	ldr	r1, [r4, #16]
 80025a6:	f000 fafd 	bl	8002ba4 <memcpy>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	6126      	str	r6, [r4, #16]
 80025b8:	444e      	add	r6, r9
 80025ba:	6026      	str	r6, [r4, #0]
 80025bc:	463e      	mov	r6, r7
 80025be:	6165      	str	r5, [r4, #20]
 80025c0:	eba5 0509 	sub.w	r5, r5, r9
 80025c4:	60a5      	str	r5, [r4, #8]
 80025c6:	42be      	cmp	r6, r7
 80025c8:	d900      	bls.n	80025cc <__ssputs_r+0x70>
 80025ca:	463e      	mov	r6, r7
 80025cc:	4632      	mov	r2, r6
 80025ce:	4641      	mov	r1, r8
 80025d0:	6820      	ldr	r0, [r4, #0]
 80025d2:	f000 faaf 	bl	8002b34 <memmove>
 80025d6:	2000      	movs	r0, #0
 80025d8:	68a3      	ldr	r3, [r4, #8]
 80025da:	1b9b      	subs	r3, r3, r6
 80025dc:	60a3      	str	r3, [r4, #8]
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	4433      	add	r3, r6
 80025e2:	6023      	str	r3, [r4, #0]
 80025e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e8:	462a      	mov	r2, r5
 80025ea:	f000 fae9 	bl	8002bc0 <_realloc_r>
 80025ee:	4606      	mov	r6, r0
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d1e0      	bne.n	80025b6 <__ssputs_r+0x5a>
 80025f4:	4650      	mov	r0, sl
 80025f6:	6921      	ldr	r1, [r4, #16]
 80025f8:	f7ff febc 	bl	8002374 <_free_r>
 80025fc:	230c      	movs	r3, #12
 80025fe:	f8ca 3000 	str.w	r3, [sl]
 8002602:	89a3      	ldrh	r3, [r4, #12]
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260c:	81a3      	strh	r3, [r4, #12]
 800260e:	e7e9      	b.n	80025e4 <__ssputs_r+0x88>

08002610 <_svfiprintf_r>:
 8002610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002614:	4698      	mov	r8, r3
 8002616:	898b      	ldrh	r3, [r1, #12]
 8002618:	4607      	mov	r7, r0
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	460d      	mov	r5, r1
 800261e:	4614      	mov	r4, r2
 8002620:	b09d      	sub	sp, #116	; 0x74
 8002622:	d50e      	bpl.n	8002642 <_svfiprintf_r+0x32>
 8002624:	690b      	ldr	r3, [r1, #16]
 8002626:	b963      	cbnz	r3, 8002642 <_svfiprintf_r+0x32>
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	f7ff ff0b 	bl	8002444 <_malloc_r>
 800262e:	6028      	str	r0, [r5, #0]
 8002630:	6128      	str	r0, [r5, #16]
 8002632:	b920      	cbnz	r0, 800263e <_svfiprintf_r+0x2e>
 8002634:	230c      	movs	r3, #12
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	e0d0      	b.n	80027e0 <_svfiprintf_r+0x1d0>
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	616b      	str	r3, [r5, #20]
 8002642:	2300      	movs	r3, #0
 8002644:	9309      	str	r3, [sp, #36]	; 0x24
 8002646:	2320      	movs	r3, #32
 8002648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800264c:	2330      	movs	r3, #48	; 0x30
 800264e:	f04f 0901 	mov.w	r9, #1
 8002652:	f8cd 800c 	str.w	r8, [sp, #12]
 8002656:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80027f8 <_svfiprintf_r+0x1e8>
 800265a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800265e:	4623      	mov	r3, r4
 8002660:	469a      	mov	sl, r3
 8002662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002666:	b10a      	cbz	r2, 800266c <_svfiprintf_r+0x5c>
 8002668:	2a25      	cmp	r2, #37	; 0x25
 800266a:	d1f9      	bne.n	8002660 <_svfiprintf_r+0x50>
 800266c:	ebba 0b04 	subs.w	fp, sl, r4
 8002670:	d00b      	beq.n	800268a <_svfiprintf_r+0x7a>
 8002672:	465b      	mov	r3, fp
 8002674:	4622      	mov	r2, r4
 8002676:	4629      	mov	r1, r5
 8002678:	4638      	mov	r0, r7
 800267a:	f7ff ff6f 	bl	800255c <__ssputs_r>
 800267e:	3001      	adds	r0, #1
 8002680:	f000 80a9 	beq.w	80027d6 <_svfiprintf_r+0x1c6>
 8002684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002686:	445a      	add	r2, fp
 8002688:	9209      	str	r2, [sp, #36]	; 0x24
 800268a:	f89a 3000 	ldrb.w	r3, [sl]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80a1 	beq.w	80027d6 <_svfiprintf_r+0x1c6>
 8002694:	2300      	movs	r3, #0
 8002696:	f04f 32ff 	mov.w	r2, #4294967295
 800269a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800269e:	f10a 0a01 	add.w	sl, sl, #1
 80026a2:	9304      	str	r3, [sp, #16]
 80026a4:	9307      	str	r3, [sp, #28]
 80026a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026aa:	931a      	str	r3, [sp, #104]	; 0x68
 80026ac:	4654      	mov	r4, sl
 80026ae:	2205      	movs	r2, #5
 80026b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b4:	4850      	ldr	r0, [pc, #320]	; (80027f8 <_svfiprintf_r+0x1e8>)
 80026b6:	f000 fa67 	bl	8002b88 <memchr>
 80026ba:	9a04      	ldr	r2, [sp, #16]
 80026bc:	b9d8      	cbnz	r0, 80026f6 <_svfiprintf_r+0xe6>
 80026be:	06d0      	lsls	r0, r2, #27
 80026c0:	bf44      	itt	mi
 80026c2:	2320      	movmi	r3, #32
 80026c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026c8:	0711      	lsls	r1, r2, #28
 80026ca:	bf44      	itt	mi
 80026cc:	232b      	movmi	r3, #43	; 0x2b
 80026ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026d2:	f89a 3000 	ldrb.w	r3, [sl]
 80026d6:	2b2a      	cmp	r3, #42	; 0x2a
 80026d8:	d015      	beq.n	8002706 <_svfiprintf_r+0xf6>
 80026da:	4654      	mov	r4, sl
 80026dc:	2000      	movs	r0, #0
 80026de:	f04f 0c0a 	mov.w	ip, #10
 80026e2:	9a07      	ldr	r2, [sp, #28]
 80026e4:	4621      	mov	r1, r4
 80026e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026ea:	3b30      	subs	r3, #48	; 0x30
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d94d      	bls.n	800278c <_svfiprintf_r+0x17c>
 80026f0:	b1b0      	cbz	r0, 8002720 <_svfiprintf_r+0x110>
 80026f2:	9207      	str	r2, [sp, #28]
 80026f4:	e014      	b.n	8002720 <_svfiprintf_r+0x110>
 80026f6:	eba0 0308 	sub.w	r3, r0, r8
 80026fa:	fa09 f303 	lsl.w	r3, r9, r3
 80026fe:	4313      	orrs	r3, r2
 8002700:	46a2      	mov	sl, r4
 8002702:	9304      	str	r3, [sp, #16]
 8002704:	e7d2      	b.n	80026ac <_svfiprintf_r+0x9c>
 8002706:	9b03      	ldr	r3, [sp, #12]
 8002708:	1d19      	adds	r1, r3, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	9103      	str	r1, [sp, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	bfbb      	ittet	lt
 8002712:	425b      	neglt	r3, r3
 8002714:	f042 0202 	orrlt.w	r2, r2, #2
 8002718:	9307      	strge	r3, [sp, #28]
 800271a:	9307      	strlt	r3, [sp, #28]
 800271c:	bfb8      	it	lt
 800271e:	9204      	strlt	r2, [sp, #16]
 8002720:	7823      	ldrb	r3, [r4, #0]
 8002722:	2b2e      	cmp	r3, #46	; 0x2e
 8002724:	d10c      	bne.n	8002740 <_svfiprintf_r+0x130>
 8002726:	7863      	ldrb	r3, [r4, #1]
 8002728:	2b2a      	cmp	r3, #42	; 0x2a
 800272a:	d134      	bne.n	8002796 <_svfiprintf_r+0x186>
 800272c:	9b03      	ldr	r3, [sp, #12]
 800272e:	3402      	adds	r4, #2
 8002730:	1d1a      	adds	r2, r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	9203      	str	r2, [sp, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	bfb8      	it	lt
 800273a:	f04f 33ff 	movlt.w	r3, #4294967295
 800273e:	9305      	str	r3, [sp, #20]
 8002740:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80027fc <_svfiprintf_r+0x1ec>
 8002744:	2203      	movs	r2, #3
 8002746:	4650      	mov	r0, sl
 8002748:	7821      	ldrb	r1, [r4, #0]
 800274a:	f000 fa1d 	bl	8002b88 <memchr>
 800274e:	b138      	cbz	r0, 8002760 <_svfiprintf_r+0x150>
 8002750:	2240      	movs	r2, #64	; 0x40
 8002752:	9b04      	ldr	r3, [sp, #16]
 8002754:	eba0 000a 	sub.w	r0, r0, sl
 8002758:	4082      	lsls	r2, r0
 800275a:	4313      	orrs	r3, r2
 800275c:	3401      	adds	r4, #1
 800275e:	9304      	str	r3, [sp, #16]
 8002760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002764:	2206      	movs	r2, #6
 8002766:	4826      	ldr	r0, [pc, #152]	; (8002800 <_svfiprintf_r+0x1f0>)
 8002768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800276c:	f000 fa0c 	bl	8002b88 <memchr>
 8002770:	2800      	cmp	r0, #0
 8002772:	d038      	beq.n	80027e6 <_svfiprintf_r+0x1d6>
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <_svfiprintf_r+0x1f4>)
 8002776:	bb1b      	cbnz	r3, 80027c0 <_svfiprintf_r+0x1b0>
 8002778:	9b03      	ldr	r3, [sp, #12]
 800277a:	3307      	adds	r3, #7
 800277c:	f023 0307 	bic.w	r3, r3, #7
 8002780:	3308      	adds	r3, #8
 8002782:	9303      	str	r3, [sp, #12]
 8002784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002786:	4433      	add	r3, r6
 8002788:	9309      	str	r3, [sp, #36]	; 0x24
 800278a:	e768      	b.n	800265e <_svfiprintf_r+0x4e>
 800278c:	460c      	mov	r4, r1
 800278e:	2001      	movs	r0, #1
 8002790:	fb0c 3202 	mla	r2, ip, r2, r3
 8002794:	e7a6      	b.n	80026e4 <_svfiprintf_r+0xd4>
 8002796:	2300      	movs	r3, #0
 8002798:	f04f 0c0a 	mov.w	ip, #10
 800279c:	4619      	mov	r1, r3
 800279e:	3401      	adds	r4, #1
 80027a0:	9305      	str	r3, [sp, #20]
 80027a2:	4620      	mov	r0, r4
 80027a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027a8:	3a30      	subs	r2, #48	; 0x30
 80027aa:	2a09      	cmp	r2, #9
 80027ac:	d903      	bls.n	80027b6 <_svfiprintf_r+0x1a6>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0c6      	beq.n	8002740 <_svfiprintf_r+0x130>
 80027b2:	9105      	str	r1, [sp, #20]
 80027b4:	e7c4      	b.n	8002740 <_svfiprintf_r+0x130>
 80027b6:	4604      	mov	r4, r0
 80027b8:	2301      	movs	r3, #1
 80027ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80027be:	e7f0      	b.n	80027a2 <_svfiprintf_r+0x192>
 80027c0:	ab03      	add	r3, sp, #12
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	462a      	mov	r2, r5
 80027c6:	4638      	mov	r0, r7
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <_svfiprintf_r+0x1f8>)
 80027ca:	a904      	add	r1, sp, #16
 80027cc:	f3af 8000 	nop.w
 80027d0:	1c42      	adds	r2, r0, #1
 80027d2:	4606      	mov	r6, r0
 80027d4:	d1d6      	bne.n	8002784 <_svfiprintf_r+0x174>
 80027d6:	89ab      	ldrh	r3, [r5, #12]
 80027d8:	065b      	lsls	r3, r3, #25
 80027da:	f53f af2d 	bmi.w	8002638 <_svfiprintf_r+0x28>
 80027de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027e0:	b01d      	add	sp, #116	; 0x74
 80027e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e6:	ab03      	add	r3, sp, #12
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	462a      	mov	r2, r5
 80027ec:	4638      	mov	r0, r7
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <_svfiprintf_r+0x1f8>)
 80027f0:	a904      	add	r1, sp, #16
 80027f2:	f000 f87d 	bl	80028f0 <_printf_i>
 80027f6:	e7eb      	b.n	80027d0 <_svfiprintf_r+0x1c0>
 80027f8:	08002ca6 	.word	0x08002ca6
 80027fc:	08002cac 	.word	0x08002cac
 8002800:	08002cb0 	.word	0x08002cb0
 8002804:	00000000 	.word	0x00000000
 8002808:	0800255d 	.word	0x0800255d

0800280c <_printf_common>:
 800280c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002810:	4616      	mov	r6, r2
 8002812:	4699      	mov	r9, r3
 8002814:	688a      	ldr	r2, [r1, #8]
 8002816:	690b      	ldr	r3, [r1, #16]
 8002818:	4607      	mov	r7, r0
 800281a:	4293      	cmp	r3, r2
 800281c:	bfb8      	it	lt
 800281e:	4613      	movlt	r3, r2
 8002820:	6033      	str	r3, [r6, #0]
 8002822:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002826:	460c      	mov	r4, r1
 8002828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800282c:	b10a      	cbz	r2, 8002832 <_printf_common+0x26>
 800282e:	3301      	adds	r3, #1
 8002830:	6033      	str	r3, [r6, #0]
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	0699      	lsls	r1, r3, #26
 8002836:	bf42      	ittt	mi
 8002838:	6833      	ldrmi	r3, [r6, #0]
 800283a:	3302      	addmi	r3, #2
 800283c:	6033      	strmi	r3, [r6, #0]
 800283e:	6825      	ldr	r5, [r4, #0]
 8002840:	f015 0506 	ands.w	r5, r5, #6
 8002844:	d106      	bne.n	8002854 <_printf_common+0x48>
 8002846:	f104 0a19 	add.w	sl, r4, #25
 800284a:	68e3      	ldr	r3, [r4, #12]
 800284c:	6832      	ldr	r2, [r6, #0]
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	42ab      	cmp	r3, r5
 8002852:	dc2b      	bgt.n	80028ac <_printf_common+0xa0>
 8002854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002858:	1e13      	subs	r3, r2, #0
 800285a:	6822      	ldr	r2, [r4, #0]
 800285c:	bf18      	it	ne
 800285e:	2301      	movne	r3, #1
 8002860:	0692      	lsls	r2, r2, #26
 8002862:	d430      	bmi.n	80028c6 <_printf_common+0xba>
 8002864:	4649      	mov	r1, r9
 8002866:	4638      	mov	r0, r7
 8002868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800286c:	47c0      	blx	r8
 800286e:	3001      	adds	r0, #1
 8002870:	d023      	beq.n	80028ba <_printf_common+0xae>
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	6922      	ldr	r2, [r4, #16]
 8002876:	f003 0306 	and.w	r3, r3, #6
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf14      	ite	ne
 800287e:	2500      	movne	r5, #0
 8002880:	6833      	ldreq	r3, [r6, #0]
 8002882:	f04f 0600 	mov.w	r6, #0
 8002886:	bf08      	it	eq
 8002888:	68e5      	ldreq	r5, [r4, #12]
 800288a:	f104 041a 	add.w	r4, r4, #26
 800288e:	bf08      	it	eq
 8002890:	1aed      	subeq	r5, r5, r3
 8002892:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002896:	bf08      	it	eq
 8002898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800289c:	4293      	cmp	r3, r2
 800289e:	bfc4      	itt	gt
 80028a0:	1a9b      	subgt	r3, r3, r2
 80028a2:	18ed      	addgt	r5, r5, r3
 80028a4:	42b5      	cmp	r5, r6
 80028a6:	d11a      	bne.n	80028de <_printf_common+0xd2>
 80028a8:	2000      	movs	r0, #0
 80028aa:	e008      	b.n	80028be <_printf_common+0xb2>
 80028ac:	2301      	movs	r3, #1
 80028ae:	4652      	mov	r2, sl
 80028b0:	4649      	mov	r1, r9
 80028b2:	4638      	mov	r0, r7
 80028b4:	47c0      	blx	r8
 80028b6:	3001      	adds	r0, #1
 80028b8:	d103      	bne.n	80028c2 <_printf_common+0xb6>
 80028ba:	f04f 30ff 	mov.w	r0, #4294967295
 80028be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c2:	3501      	adds	r5, #1
 80028c4:	e7c1      	b.n	800284a <_printf_common+0x3e>
 80028c6:	2030      	movs	r0, #48	; 0x30
 80028c8:	18e1      	adds	r1, r4, r3
 80028ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028d4:	4422      	add	r2, r4
 80028d6:	3302      	adds	r3, #2
 80028d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028dc:	e7c2      	b.n	8002864 <_printf_common+0x58>
 80028de:	2301      	movs	r3, #1
 80028e0:	4622      	mov	r2, r4
 80028e2:	4649      	mov	r1, r9
 80028e4:	4638      	mov	r0, r7
 80028e6:	47c0      	blx	r8
 80028e8:	3001      	adds	r0, #1
 80028ea:	d0e6      	beq.n	80028ba <_printf_common+0xae>
 80028ec:	3601      	adds	r6, #1
 80028ee:	e7d9      	b.n	80028a4 <_printf_common+0x98>

080028f0 <_printf_i>:
 80028f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028f4:	7e0f      	ldrb	r7, [r1, #24]
 80028f6:	4691      	mov	r9, r2
 80028f8:	2f78      	cmp	r7, #120	; 0x78
 80028fa:	4680      	mov	r8, r0
 80028fc:	460c      	mov	r4, r1
 80028fe:	469a      	mov	sl, r3
 8002900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002906:	d807      	bhi.n	8002918 <_printf_i+0x28>
 8002908:	2f62      	cmp	r7, #98	; 0x62
 800290a:	d80a      	bhi.n	8002922 <_printf_i+0x32>
 800290c:	2f00      	cmp	r7, #0
 800290e:	f000 80d5 	beq.w	8002abc <_printf_i+0x1cc>
 8002912:	2f58      	cmp	r7, #88	; 0x58
 8002914:	f000 80c1 	beq.w	8002a9a <_printf_i+0x1aa>
 8002918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800291c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002920:	e03a      	b.n	8002998 <_printf_i+0xa8>
 8002922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002926:	2b15      	cmp	r3, #21
 8002928:	d8f6      	bhi.n	8002918 <_printf_i+0x28>
 800292a:	a101      	add	r1, pc, #4	; (adr r1, 8002930 <_printf_i+0x40>)
 800292c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002930:	08002989 	.word	0x08002989
 8002934:	0800299d 	.word	0x0800299d
 8002938:	08002919 	.word	0x08002919
 800293c:	08002919 	.word	0x08002919
 8002940:	08002919 	.word	0x08002919
 8002944:	08002919 	.word	0x08002919
 8002948:	0800299d 	.word	0x0800299d
 800294c:	08002919 	.word	0x08002919
 8002950:	08002919 	.word	0x08002919
 8002954:	08002919 	.word	0x08002919
 8002958:	08002919 	.word	0x08002919
 800295c:	08002aa3 	.word	0x08002aa3
 8002960:	080029c9 	.word	0x080029c9
 8002964:	08002a5d 	.word	0x08002a5d
 8002968:	08002919 	.word	0x08002919
 800296c:	08002919 	.word	0x08002919
 8002970:	08002ac5 	.word	0x08002ac5
 8002974:	08002919 	.word	0x08002919
 8002978:	080029c9 	.word	0x080029c9
 800297c:	08002919 	.word	0x08002919
 8002980:	08002919 	.word	0x08002919
 8002984:	08002a65 	.word	0x08002a65
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	1d1a      	adds	r2, r3, #4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	602a      	str	r2, [r5, #0]
 8002990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002998:	2301      	movs	r3, #1
 800299a:	e0a0      	b.n	8002ade <_printf_i+0x1ee>
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	682b      	ldr	r3, [r5, #0]
 80029a0:	0607      	lsls	r7, r0, #24
 80029a2:	f103 0104 	add.w	r1, r3, #4
 80029a6:	6029      	str	r1, [r5, #0]
 80029a8:	d501      	bpl.n	80029ae <_printf_i+0xbe>
 80029aa:	681e      	ldr	r6, [r3, #0]
 80029ac:	e003      	b.n	80029b6 <_printf_i+0xc6>
 80029ae:	0646      	lsls	r6, r0, #25
 80029b0:	d5fb      	bpl.n	80029aa <_printf_i+0xba>
 80029b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80029b6:	2e00      	cmp	r6, #0
 80029b8:	da03      	bge.n	80029c2 <_printf_i+0xd2>
 80029ba:	232d      	movs	r3, #45	; 0x2d
 80029bc:	4276      	negs	r6, r6
 80029be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029c2:	230a      	movs	r3, #10
 80029c4:	4859      	ldr	r0, [pc, #356]	; (8002b2c <_printf_i+0x23c>)
 80029c6:	e012      	b.n	80029ee <_printf_i+0xfe>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	6820      	ldr	r0, [r4, #0]
 80029cc:	1d19      	adds	r1, r3, #4
 80029ce:	6029      	str	r1, [r5, #0]
 80029d0:	0605      	lsls	r5, r0, #24
 80029d2:	d501      	bpl.n	80029d8 <_printf_i+0xe8>
 80029d4:	681e      	ldr	r6, [r3, #0]
 80029d6:	e002      	b.n	80029de <_printf_i+0xee>
 80029d8:	0641      	lsls	r1, r0, #25
 80029da:	d5fb      	bpl.n	80029d4 <_printf_i+0xe4>
 80029dc:	881e      	ldrh	r6, [r3, #0]
 80029de:	2f6f      	cmp	r7, #111	; 0x6f
 80029e0:	bf0c      	ite	eq
 80029e2:	2308      	moveq	r3, #8
 80029e4:	230a      	movne	r3, #10
 80029e6:	4851      	ldr	r0, [pc, #324]	; (8002b2c <_printf_i+0x23c>)
 80029e8:	2100      	movs	r1, #0
 80029ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029ee:	6865      	ldr	r5, [r4, #4]
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	bfa8      	it	ge
 80029f4:	6821      	ldrge	r1, [r4, #0]
 80029f6:	60a5      	str	r5, [r4, #8]
 80029f8:	bfa4      	itt	ge
 80029fa:	f021 0104 	bicge.w	r1, r1, #4
 80029fe:	6021      	strge	r1, [r4, #0]
 8002a00:	b90e      	cbnz	r6, 8002a06 <_printf_i+0x116>
 8002a02:	2d00      	cmp	r5, #0
 8002a04:	d04b      	beq.n	8002a9e <_printf_i+0x1ae>
 8002a06:	4615      	mov	r5, r2
 8002a08:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a0c:	fb03 6711 	mls	r7, r3, r1, r6
 8002a10:	5dc7      	ldrb	r7, [r0, r7]
 8002a12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a16:	4637      	mov	r7, r6
 8002a18:	42bb      	cmp	r3, r7
 8002a1a:	460e      	mov	r6, r1
 8002a1c:	d9f4      	bls.n	8002a08 <_printf_i+0x118>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d10b      	bne.n	8002a3a <_printf_i+0x14a>
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	07de      	lsls	r6, r3, #31
 8002a26:	d508      	bpl.n	8002a3a <_printf_i+0x14a>
 8002a28:	6923      	ldr	r3, [r4, #16]
 8002a2a:	6861      	ldr	r1, [r4, #4]
 8002a2c:	4299      	cmp	r1, r3
 8002a2e:	bfde      	ittt	le
 8002a30:	2330      	movle	r3, #48	; 0x30
 8002a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a3a:	1b52      	subs	r2, r2, r5
 8002a3c:	6122      	str	r2, [r4, #16]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	4621      	mov	r1, r4
 8002a42:	4640      	mov	r0, r8
 8002a44:	f8cd a000 	str.w	sl, [sp]
 8002a48:	aa03      	add	r2, sp, #12
 8002a4a:	f7ff fedf 	bl	800280c <_printf_common>
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d14a      	bne.n	8002ae8 <_printf_i+0x1f8>
 8002a52:	f04f 30ff 	mov.w	r0, #4294967295
 8002a56:	b004      	add	sp, #16
 8002a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	f043 0320 	orr.w	r3, r3, #32
 8002a62:	6023      	str	r3, [r4, #0]
 8002a64:	2778      	movs	r7, #120	; 0x78
 8002a66:	4832      	ldr	r0, [pc, #200]	; (8002b30 <_printf_i+0x240>)
 8002a68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	6829      	ldr	r1, [r5, #0]
 8002a70:	061f      	lsls	r7, r3, #24
 8002a72:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a76:	d402      	bmi.n	8002a7e <_printf_i+0x18e>
 8002a78:	065f      	lsls	r7, r3, #25
 8002a7a:	bf48      	it	mi
 8002a7c:	b2b6      	uxthmi	r6, r6
 8002a7e:	07df      	lsls	r7, r3, #31
 8002a80:	bf48      	it	mi
 8002a82:	f043 0320 	orrmi.w	r3, r3, #32
 8002a86:	6029      	str	r1, [r5, #0]
 8002a88:	bf48      	it	mi
 8002a8a:	6023      	strmi	r3, [r4, #0]
 8002a8c:	b91e      	cbnz	r6, 8002a96 <_printf_i+0x1a6>
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	f023 0320 	bic.w	r3, r3, #32
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	2310      	movs	r3, #16
 8002a98:	e7a6      	b.n	80029e8 <_printf_i+0xf8>
 8002a9a:	4824      	ldr	r0, [pc, #144]	; (8002b2c <_printf_i+0x23c>)
 8002a9c:	e7e4      	b.n	8002a68 <_printf_i+0x178>
 8002a9e:	4615      	mov	r5, r2
 8002aa0:	e7bd      	b.n	8002a1e <_printf_i+0x12e>
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	6826      	ldr	r6, [r4, #0]
 8002aa6:	1d18      	adds	r0, r3, #4
 8002aa8:	6961      	ldr	r1, [r4, #20]
 8002aaa:	6028      	str	r0, [r5, #0]
 8002aac:	0635      	lsls	r5, r6, #24
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	d501      	bpl.n	8002ab6 <_printf_i+0x1c6>
 8002ab2:	6019      	str	r1, [r3, #0]
 8002ab4:	e002      	b.n	8002abc <_printf_i+0x1cc>
 8002ab6:	0670      	lsls	r0, r6, #25
 8002ab8:	d5fb      	bpl.n	8002ab2 <_printf_i+0x1c2>
 8002aba:	8019      	strh	r1, [r3, #0]
 8002abc:	2300      	movs	r3, #0
 8002abe:	4615      	mov	r5, r2
 8002ac0:	6123      	str	r3, [r4, #16]
 8002ac2:	e7bc      	b.n	8002a3e <_printf_i+0x14e>
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	1d1a      	adds	r2, r3, #4
 8002aca:	602a      	str	r2, [r5, #0]
 8002acc:	681d      	ldr	r5, [r3, #0]
 8002ace:	6862      	ldr	r2, [r4, #4]
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f000 f859 	bl	8002b88 <memchr>
 8002ad6:	b108      	cbz	r0, 8002adc <_printf_i+0x1ec>
 8002ad8:	1b40      	subs	r0, r0, r5
 8002ada:	6060      	str	r0, [r4, #4]
 8002adc:	6863      	ldr	r3, [r4, #4]
 8002ade:	6123      	str	r3, [r4, #16]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ae6:	e7aa      	b.n	8002a3e <_printf_i+0x14e>
 8002ae8:	462a      	mov	r2, r5
 8002aea:	4649      	mov	r1, r9
 8002aec:	4640      	mov	r0, r8
 8002aee:	6923      	ldr	r3, [r4, #16]
 8002af0:	47d0      	blx	sl
 8002af2:	3001      	adds	r0, #1
 8002af4:	d0ad      	beq.n	8002a52 <_printf_i+0x162>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	079b      	lsls	r3, r3, #30
 8002afa:	d413      	bmi.n	8002b24 <_printf_i+0x234>
 8002afc:	68e0      	ldr	r0, [r4, #12]
 8002afe:	9b03      	ldr	r3, [sp, #12]
 8002b00:	4298      	cmp	r0, r3
 8002b02:	bfb8      	it	lt
 8002b04:	4618      	movlt	r0, r3
 8002b06:	e7a6      	b.n	8002a56 <_printf_i+0x166>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	4632      	mov	r2, r6
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	4640      	mov	r0, r8
 8002b10:	47d0      	blx	sl
 8002b12:	3001      	adds	r0, #1
 8002b14:	d09d      	beq.n	8002a52 <_printf_i+0x162>
 8002b16:	3501      	adds	r5, #1
 8002b18:	68e3      	ldr	r3, [r4, #12]
 8002b1a:	9903      	ldr	r1, [sp, #12]
 8002b1c:	1a5b      	subs	r3, r3, r1
 8002b1e:	42ab      	cmp	r3, r5
 8002b20:	dcf2      	bgt.n	8002b08 <_printf_i+0x218>
 8002b22:	e7eb      	b.n	8002afc <_printf_i+0x20c>
 8002b24:	2500      	movs	r5, #0
 8002b26:	f104 0619 	add.w	r6, r4, #25
 8002b2a:	e7f5      	b.n	8002b18 <_printf_i+0x228>
 8002b2c:	08002cb7 	.word	0x08002cb7
 8002b30:	08002cc8 	.word	0x08002cc8

08002b34 <memmove>:
 8002b34:	4288      	cmp	r0, r1
 8002b36:	b510      	push	{r4, lr}
 8002b38:	eb01 0402 	add.w	r4, r1, r2
 8002b3c:	d902      	bls.n	8002b44 <memmove+0x10>
 8002b3e:	4284      	cmp	r4, r0
 8002b40:	4623      	mov	r3, r4
 8002b42:	d807      	bhi.n	8002b54 <memmove+0x20>
 8002b44:	1e43      	subs	r3, r0, #1
 8002b46:	42a1      	cmp	r1, r4
 8002b48:	d008      	beq.n	8002b5c <memmove+0x28>
 8002b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b52:	e7f8      	b.n	8002b46 <memmove+0x12>
 8002b54:	4601      	mov	r1, r0
 8002b56:	4402      	add	r2, r0
 8002b58:	428a      	cmp	r2, r1
 8002b5a:	d100      	bne.n	8002b5e <memmove+0x2a>
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b66:	e7f7      	b.n	8002b58 <memmove+0x24>

08002b68 <_sbrk_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	4d05      	ldr	r5, [pc, #20]	; (8002b84 <_sbrk_r+0x1c>)
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4608      	mov	r0, r1
 8002b72:	602b      	str	r3, [r5, #0]
 8002b74:	f7fd fcf0 	bl	8000558 <_sbrk>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d102      	bne.n	8002b82 <_sbrk_r+0x1a>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	b103      	cbz	r3, 8002b82 <_sbrk_r+0x1a>
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	20000230 	.word	0x20000230

08002b88 <memchr>:
 8002b88:	4603      	mov	r3, r0
 8002b8a:	b510      	push	{r4, lr}
 8002b8c:	b2c9      	uxtb	r1, r1
 8002b8e:	4402      	add	r2, r0
 8002b90:	4293      	cmp	r3, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	d101      	bne.n	8002b9a <memchr+0x12>
 8002b96:	2000      	movs	r0, #0
 8002b98:	e003      	b.n	8002ba2 <memchr+0x1a>
 8002b9a:	7804      	ldrb	r4, [r0, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	428c      	cmp	r4, r1
 8002ba0:	d1f6      	bne.n	8002b90 <memchr+0x8>
 8002ba2:	bd10      	pop	{r4, pc}

08002ba4 <memcpy>:
 8002ba4:	440a      	add	r2, r1
 8002ba6:	4291      	cmp	r1, r2
 8002ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bac:	d100      	bne.n	8002bb0 <memcpy+0xc>
 8002bae:	4770      	bx	lr
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bb6:	4291      	cmp	r1, r2
 8002bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bbc:	d1f9      	bne.n	8002bb2 <memcpy+0xe>
 8002bbe:	bd10      	pop	{r4, pc}

08002bc0 <_realloc_r>:
 8002bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc4:	4680      	mov	r8, r0
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	460e      	mov	r6, r1
 8002bca:	b921      	cbnz	r1, 8002bd6 <_realloc_r+0x16>
 8002bcc:	4611      	mov	r1, r2
 8002bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd2:	f7ff bc37 	b.w	8002444 <_malloc_r>
 8002bd6:	b92a      	cbnz	r2, 8002be4 <_realloc_r+0x24>
 8002bd8:	f7ff fbcc 	bl	8002374 <_free_r>
 8002bdc:	4625      	mov	r5, r4
 8002bde:	4628      	mov	r0, r5
 8002be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be4:	f000 f81b 	bl	8002c1e <_malloc_usable_size_r>
 8002be8:	4284      	cmp	r4, r0
 8002bea:	4607      	mov	r7, r0
 8002bec:	d802      	bhi.n	8002bf4 <_realloc_r+0x34>
 8002bee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bf2:	d812      	bhi.n	8002c1a <_realloc_r+0x5a>
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	f7ff fc24 	bl	8002444 <_malloc_r>
 8002bfc:	4605      	mov	r5, r0
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d0ed      	beq.n	8002bde <_realloc_r+0x1e>
 8002c02:	42bc      	cmp	r4, r7
 8002c04:	4622      	mov	r2, r4
 8002c06:	4631      	mov	r1, r6
 8002c08:	bf28      	it	cs
 8002c0a:	463a      	movcs	r2, r7
 8002c0c:	f7ff ffca 	bl	8002ba4 <memcpy>
 8002c10:	4631      	mov	r1, r6
 8002c12:	4640      	mov	r0, r8
 8002c14:	f7ff fbae 	bl	8002374 <_free_r>
 8002c18:	e7e1      	b.n	8002bde <_realloc_r+0x1e>
 8002c1a:	4635      	mov	r5, r6
 8002c1c:	e7df      	b.n	8002bde <_realloc_r+0x1e>

08002c1e <_malloc_usable_size_r>:
 8002c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c22:	1f18      	subs	r0, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bfbc      	itt	lt
 8002c28:	580b      	ldrlt	r3, [r1, r0]
 8002c2a:	18c0      	addlt	r0, r0, r3
 8002c2c:	4770      	bx	lr
	...

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
